[{"/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/main/Flows/builder.tsx":"1","/home/rabinson/Freelancing/ShipboardBot/frontend/src/apis/bots.ts":"2","/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/main/Flows/index.tsx":"3","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Flows/CreateModal.tsx":"4","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Flows/EditModal.tsx":"5","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Bots/Configure/Messenger.tsx":"6","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Bots/Configure/Slack.tsx":"7","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Flows/DeleteModal.tsx":"8","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Bots/Configure/Telegram.tsx":"9","/home/rabinson/Freelancing/ShipboardBot/frontend/src/index.tsx":"10","/home/rabinson/Freelancing/ShipboardBot/frontend/src/services/Auth/AuthProvider.tsx":"11","/home/rabinson/Freelancing/ShipboardBot/frontend/src/utils/storage.ts":"12","/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/LandingPage.tsx":"13","/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/auth/ForgotPasswordPage.tsx":"14","/home/rabinson/Freelancing/ShipboardBot/frontend/src/services/Modal/ModalProvider.tsx":"15","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/common/typography.ts":"16","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/common/form.ts":"17","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/front/header/index.tsx":"18","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/common/Pagination/index.tsx":"19","/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/main/Flows/styles.ts":"20","/home/rabinson/Freelancing/ShipboardBot/frontend/src/apis/messages.ts":"21","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Bots/DeleteModal.tsx":"22","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Toolbar/index.tsx":"23","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/common/Pagination/styles.ts":"24","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/front/navbar/index.tsx":"25","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Toolbar/styles.ts":"26","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Toolbar/BtnEditor.tsx":"27","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Text/index.tsx":"28","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/front/feature/styles.ts":"29","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/front/footer/styles.ts":"30","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Image/styles.ts":"31","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Card/styles.ts":"32","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Card/index.tsx":"33","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Modals/ConnectFlow.tsx":"34"},{"size":29768,"mtime":1612891090396,"results":"35","hashOfConfig":"36"},{"size":1387,"mtime":1612885626225,"results":"37","hashOfConfig":"36"},{"size":8928,"mtime":1612887533074,"results":"38","hashOfConfig":"36"},{"size":2347,"mtime":1611495697651,"results":"39","hashOfConfig":"36"},{"size":2316,"mtime":1612681211971,"results":"40","hashOfConfig":"36"},{"size":6221,"mtime":1612887705333,"results":"41","hashOfConfig":"36"},{"size":4631,"mtime":1612887686855,"results":"42","hashOfConfig":"36"},{"size":1488,"mtime":1611506630557,"results":"43","hashOfConfig":"36"},{"size":4972,"mtime":1612887697390,"results":"44","hashOfConfig":"36"},{"size":515,"mtime":1607764359769,"results":"45","hashOfConfig":"36"},{"size":1534,"mtime":1607842467004,"results":"46","hashOfConfig":"36"},{"size":330,"mtime":1606965896953,"results":"47","hashOfConfig":"36"},{"size":395,"mtime":1606572185322,"results":"48","hashOfConfig":"36"},{"size":2699,"mtime":1607850305009,"results":"49","hashOfConfig":"36"},{"size":3582,"mtime":1612584637978,"results":"50","hashOfConfig":"36"},{"size":1320,"mtime":1609667047505,"results":"51","hashOfConfig":"36"},{"size":1603,"mtime":1612803710437,"results":"52","hashOfConfig":"36"},{"size":962,"mtime":1607398449634,"results":"53","hashOfConfig":"36"},{"size":1583,"mtime":1611403993930,"results":"54","hashOfConfig":"36"},{"size":1334,"mtime":1612721735370,"results":"55","hashOfConfig":"36"},{"size":1279,"mtime":1612715948412,"results":"56","hashOfConfig":"36"},{"size":1475,"mtime":1611506512498,"results":"57","hashOfConfig":"36"},{"size":9213,"mtime":1612839726135,"results":"58","hashOfConfig":"36"},{"size":739,"mtime":1612585684875,"results":"59","hashOfConfig":"36"},{"size":717,"mtime":1607357496043,"results":"60","hashOfConfig":"36"},{"size":4275,"mtime":1612803540319,"results":"61","hashOfConfig":"36"},{"size":3134,"mtime":1612807706134,"results":"62","hashOfConfig":"36"},{"size":4677,"mtime":1612836634935,"results":"63","hashOfConfig":"36"},{"size":707,"mtime":1606842094420,"results":"64","hashOfConfig":"36"},{"size":758,"mtime":1607358268935,"results":"65","hashOfConfig":"36"},{"size":1691,"mtime":1612625185277,"results":"66","hashOfConfig":"36"},{"size":2734,"mtime":1610160143779,"results":"67","hashOfConfig":"36"},{"size":10895,"mtime":1612840010182,"results":"68","hashOfConfig":"36"},{"size":2919,"mtime":1612694265888,"results":"69","hashOfConfig":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":51,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},"v8ty68",{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"78"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"105","messages":"106","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"122"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"129"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"129"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","errorCount":0,"warningCount":34,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"146","messages":"147","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/main/Flows/builder.tsx",["148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198"],"import React, { useState } from 'react';\nimport {withRouter} from 'react-router-dom'\nimport { FlowBuilderWrapper } from './styles';\nimport { Stage, Layer, Rect, Image, Text, Group, Circle } from 'react-konva';\nimport Toolbar from '../../../components/dashboard/builder/Toolbar/index';\nimport PuffLoader from \"react-spinners/PuffLoader\";\n\nimport {\n  handleRenderingCards,\n  getImage,\n  calculateHeightOfMessageBox,\n  handleWheel,\n  onTouchPinch,\n  Edge,\n  URLImage,\n} from './helper';\nimport {\n  useBuilder,\n} from '../../../services/Builder/BuilderProvider';\nimport { BiMessageSquareAdd } from 'react-icons/bi';\nimport { saveMessage, getMessages, updateMessage, deleteMessage, createAndConnectMessage } from '../../../apis/messages';\nimport { toast } from 'react-toastify';\nimport { getFlow } from '../../../apis/flows';\nimport { createAndConnectWithButton, updateButton } from '../../../apis/buttons';\nimport Konva from 'konva';\n\nconst FlowBuilder = (props) => {\n  const [isToolbarActive, setIsToolbarActive] = useState(null);\n  const [builderState, setBuilderState, sidebar] = useBuilder();\n  const [flow, setFlow] = useState(null);\n  const [id, setId] = useState(null);\n  const [mousePosition, setMousePosition] = useState({\n    x: 0,\n    y: 0,\n  });\n  const [isEdging, setIsSetting] = useState(false);\n  const [showToolOption, setShowToolOption] = useState(false);\n  const [edgingMessageId, setEdgingMessageId] = useState(null);\n  const [edgingButtonId, setEdgingButtonId] = useState(null);\n  const [edgingButtonMessageId, setEdgingButtonMessageId] = useState(null);\n  const [edgingButtonChildId, setEdgingButtonChildId] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const [state, setState] = useState({\n    layerScale: 1,\n    layerX: 0,\n    layerY: 0,\n  });\n\n  const TrashIcon = \"data:image/svg+xml;base64,\" + window.btoa('<svg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" viewBox=\"0 0 24 24\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"none\" d=\"M17.004 20L17.003 8h-1-8-1v12H17.004zM13.003 10h2v8h-2V10zM9.003 10h2v8h-2V10zM9.003 4H15.003V6H9.003z\"></path><path d=\"M5.003,20c0,1.103,0.897,2,2,2h10c1.103,0,2-0.897,2-2V8h2V6h-3h-1V4c0-1.103-0.897-2-2-2h-6c-1.103,0-2,0.897-2,2v2h-1h-3 v2h2V20z M9.003,4h6v2h-6V4z M8.003,8h8h1l0.001,12H7.003V8H8.003z\"></path><path d=\"M9.003 10H11.003V18H9.003zM13.003 10H15.003V18H13.003z\"></path></svg>');\n\n  const getNextNode = (id) => {\n    if (id) {\n      const nextIndex = builderState.findIndex((obj) => obj.id == id);\n      if (nextIndex == -1) {\n        return mousePosition;\n      }\n      return builderState[nextIndex].position;\n    }\n  };\n\n  const hideToolbar = () => {\n    setIsToolbarActive(false);\n    setId(0);\n  };\n\n  const showToolbar = (id) => {\n    setId(id);\n    setIsToolbarActive(true);\n  };\n\n \nconst handleRenderingChildrens = (message) => {\n  var lastPosition = 70;\n  return message.children.map(function (child) {\n    var yposition = lastPosition;\n    if (child.type === 'card') {\n      lastPosition = lastPosition + child.cards[0].height;\n    } else if (child.type === 'text') {\n      const buttons = child.buttons.length;\n      lastPosition = lastPosition + child.height + (buttons * 40) + 40;\n    } else if (child.type === 'image') {\n      lastPosition = lastPosition + child.height + 20;\n    }\n    return getChildren(message, child, yposition);\n  });\n};\n  \n  const getChildren = (message, child, lastPosition) => {\n    // var messageHeight = calculateHeightOfMessageBox(message.children);\n  if (child.type === 'text') {\n    var textButtons = child.buttons;\n    var boxHeight = (child.height * 1.05) + (textButtons.length * 40) + 10;\n    return (\n      <Group x={20} y={lastPosition}>\n        <Rect\n          fill=\"#F0F4F7\"\n          cornerRadius={5}\n          height={boxHeight}\n          width={300}\n          stroke=\"lightGrey\"\n          strokeWidth={1}\n          shadowColor=\"#95bbdf\"\n          shadowOpacity={0.5}\n          shadowBlur={7}\n        />\n        <Text\n          x={15}\n          y={7}\n          text={child.value}\n          fontSize={15}\n          lineHeight={1.2}\n          width={280}\n        />\n        {child.buttons.map((button, index) => {\n          var y = (child.height * 1.05) + (40 * index) + 10;\n          var node2 = getNextNode(button.next);\n          return (\n            <Group key={button.id}>\n              { button.next &&\n                  <Edge\n                    height={boxHeight}\n                    node1={{ x: -60, y: - boxHeight + 30 + (y)}}\n                    node2={{ x: node2.x - message.position.x -20, y: node2.y - message.position.y - 80}}\n                    width={20}\n                  />\n              }\n              <Rect\n                x={25}\n                y={y}\n                fill=\"#FFFFFF\"\n                cornerRadius={5}\n                height={30}\n                width={250}\n                shadowOpacity={0.5}\n                shadowBlur={7}\n                align={\"center\"}\n              />\n              <Text\n                x={10}\n                y={y + 3}\n                text={button.name}\n                fontSize={15}\n                width={280}\n                lineHeight={1.5}\n                align={\"center\"}\n              />\n              <Circle x={260} y={y + 14} radius={9} fill=\"#8392AB\" strokeWidth={1}\n                onMouseOver={() => { document.body.style.cursor = 'pointer' }}\n                onMouseOut={() => { document.body.style.cursor = 'default' }}\n                onClick={(e) => {\n                  e.cancelBubble = true;\n                  connectButtonEdge(message.id, child.id, button.id)\n                }}\n             />\n            </Group>\n          );\n         })}\n      </Group>\n    );\n  } else if (child.type === 'image') {\n    return getImage(child, lastPosition);\n  } else if (child.type === 'card') {\n    return (\n      <Group x={20} y={lastPosition}>\n        {handleRenderingCards(child)}\n      </Group>\n    );\n  }\n};\n\n  const getStageWidth = () => {\n    return sidebar ? window.innerWidth - 280 : window.innerWidth - 90;\n  };\n\n  const setSelectedTrue = (messageId) => {\n    var previousSelected = getSelectedNode(builderState);\n    if (previousSelected >= 0) {\n      setBuilderState(\n        builderState.map((item, index) => {\n          if (index == messageId) {\n            item.isSelected = true;\n          }\n          if (index == previousSelected) {\n            item.isSelected = false;\n          }\n          return item;\n        })\n      );\n    } else {\n      setBuilderState(\n        builderState.map((item, index) => {\n          if (index == messageId) {\n            item.isSelected = true;\n          }\n          return item;\n        })\n      );\n    }\n  };\n\n  const setHoverTrue = (messageId) => {\n    var previousHover = getHoveredNode(builderState);\n    if (previousHover >= 0) {\n      setBuilderState(\n        builderState.map((item, index) => {\n          if (index == messageId) {\n            item.isHover = true;\n          }\n          if (index == previousHover) {\n            item.isHover = false;\n          }\n          return item;\n        })\n      );\n    } else {\n      setBuilderState(\n        builderState.map((item, index) => {\n          if (index == messageId) {\n            item.isHover = true;\n          }\n          return item;\n        })\n      );\n    }\n  };\n\n  const setHoverFalse = (messageId) => {\n    setBuilderState(\n      builderState.map((item, index) => {\n        if (index == messageId) {\n          item.isHover = false;\n        }\n        return item;\n      })\n    );\n  };\n\n  const connectEdge = (messageId) => {\n    setEdgingButtonId(null);\n    setEdgingMessageId(null);\n\n    if (!showToolOption) {\n      setIsSetting(true);\n      setEdgingMessageId(messageId);\n      setBuilderState(\n        builderState.map((item) => {\n          if (item.id == messageId) {\n            item.next = 'dummy';\n          }\n          return item;\n        })\n      );\n    }\n  };\n\n  const connectButtonEdge = (messageId, childId, buttonId) => {\n    setEdgingButtonId(null);\n    setEdgingMessageId(null);\n    if (!showToolOption) {\n      setIsSetting(true);\n      setEdgingButtonId(buttonId);\n      setEdgingButtonMessageId(messageId);\n      setEdgingButtonChildId(childId);\n\n      setBuilderState(\n        builderState.map((item) => {\n          if (item.id == messageId) {\n            item.children.map((child) => {\n              if (child.id == childId) {\n                child.buttons.map((button) => {\n                  if (button.id == buttonId) {\n                    button.next = \"dummy\"\n                  }\n                  return button;\n                })\n              }\n              return child;\n            })\n          }\n          return item;\n        })\n      );\n    }\n  }\n\n  const handleMousePosition = (event) => {\n    if (!showToolOption) {\n      var point = event.target.getStage().getPointerPosition();\n      setMousePosition({\n        x: point.x,\n        y: point.y,\n      });\n    }\n  };\n\n  const handleClickOnCanvas = () => {\n    if (isEdging) {\n      var hoveredIndex = getHoveredNode(builderState);\n      if (hoveredIndex > 0) {\n        //If the edging is hovered over another message and connect that message\n        var messageIdOfHover = builderState[hoveredIndex].id\n        if (messageIdOfHover != edgingMessageId) {\n          if (edgingMessageId) {\n            updateMessage({\n              next: messageIdOfHover\n            }, edgingMessageId).then((response) => { \n              setBuilderState(\n                builderState.map((item, index) => {\n                  if (item.id == edgingMessageId) {\n                    item.next = messageIdOfHover\n                  }\n                  return item;\n                })\n              );\n            }).catch((err) => {\n              toast.error(\"Something went wrong\");\n            }).finally(() => {\n              setEdgingMessageId(null);\n            })\n           } else if (edgingButtonId) {\n            updateButton({\n              next: messageIdOfHover\n            }, edgingButtonId).then((response) => {\n              setBuilderState(\n                builderState.map((item, index) => {\n                  if (item.id == edgingButtonMessageId) {\n                    item.children.map((child) => {\n                      if (child.id == edgingButtonChildId) {\n                        child.buttons.map((button) => {\n                          if (button.id == edgingButtonId) {\n                            button.next = messageIdOfHover\n                          }\n                        })\n                      }\n                    })\n                  }  \n                  return item;\n                })\n              );\n            }).catch((err) => {\n              toast.error(\"Something went wrong\")\n            }).finally(() => {\n              setEdgingButtonId(null);\n            })\n          }\n        } \n      } else {\n        setShowToolOption(true);\n      }\n    }\n  };\n\n  const handleAddMessage = () => {\n    let number = builderState.length + 1;\n    saveMessage({\n      name: 'Send Message #' + number,\n      type: 'default',\n      position_x: 1200,\n      position_y: 60,\n      flow: props.match.params.id\n    }).then((response) => {\n       setBuilderState([...builderState, response.data]);\n\n    }).catch((err) => {\n      toast.error(\"Something went wrong\")\n    })\n  }\n\n  const handleDeleteMessage = (item, index) => {\n    setIsToolbarActive(false);\n    if (index > 0) {\n      \n      //Delete the message\n    builderState.splice(index, 1);\n    //Delete the edging where this message belongs to\n      // const messageIndexHavingNextOfDeleteMessage = getMessageIndexWhichHasNextOfGivenMessageId(builderState, item.id);\n      //Remove the edging to the button when message deleted\n    setBuilderState(\n      builderState.map((message) => {\n        if (message.next == item.id) {\n          message.next = null\n        }\n        message.children.map((child) => {\n          if (child.type == 'text') {\n            child.buttons.map((button) => {\n              if (button.next == item.id) {\n                 button.next = null\n               }\n             })\n           }\n        })\n        return message;\n      })\n    );\n      \n    deleteMessage(item.id).then(() => {\n      setShowToolOption(false);\n      setEdgingMessageId(null);\n      setEdgingButtonId(null);\n      setIsSetting(false);\n    }).catch((err) => {\n        toast.error(\"Something went wrong\");\n      })\n    } else {\n      toast.info(\"You cannot delete the start message\")\n    }\n  }\n\n  const handleDragMessage = (e, item, index) =>  {\n    var updatedPosition = {\n      x: e.target.x(),\n      y: e.target.y(),\n    };\n\n    setBuilderState(\n      builderState.map((item, ind) => {\n        if (ind == index) {\n          item.position = updatedPosition;\n        }\n        return item;\n      })\n    );\n  }\n\n  const updateMessagePosition = (item) => {\n    updateMessage({\n      position_x: item.position.x,\n      position_y: item.position.y\n    }, item.id).catch((err) => {\n      toast.error('Something went wrong')\n    })    \n  }\n\n  const handleToolOptionNewMessageAction = () => {\n    setIsSetting(false);\n    setShowToolOption(false);\n    let number = builderState.length + 1;\n    var newMessage = {\n      name: 'Send Message #' + number,\n      type: 'default',\n      position_x: mousePosition.x,\n      position_y: mousePosition.y,\n      flow: props.match.params.id\n    }\n\n    if (edgingMessageId) {\n      createAndConnectMessage(newMessage, edgingMessageId)\n        .then((response) => {\n          setBuilderState(\n            builderState.map((item) => {\n              if (item.id == edgingMessageId) {\n                item.next = response.data.id;\n              }\n              return item;\n            })\n          );\n          setBuilderState([...builderState, response.data]);\n        }).catch((err) => {\n          toast.error(\"Something went wrong\")\n        }).finally(() => {\n          setEdgingMessageId(null);\n        })\n    } else if (edgingButtonId) {\n      createAndConnectWithButton(newMessage, edgingButtonId)\n        .then((response) => {\n          setBuilderState(\n            builderState.map((item) => {\n              if (item.id == edgingButtonMessageId) {\n                item.children.map((child) => {\n                  if (child.id == edgingButtonChildId) {\n                    child.buttons.map((button) => {\n                      if (button.id == edgingButtonId) {\n                        button.next = response.data.id\n                      }\n                      return button;\n                    })\n                  }\n                  return child;\n                })\n              }\n              return item;\n            })\n          );\n          setBuilderState([...builderState, response.data]);\n        }).catch((err) => {\n          toast.error(\"Something went wrong\")\n        }).finally(() => {\n          setEdgingButtonId(null);\n          setEdgingButtonMessageId(null);\n          setEdgingButtonChildId(null);\n        })\n    }\n  }\n\n  const handleToolOptionConnectFlow = () => {\n    setIsSetting(false);\n    setShowToolOption(false);\n    let number = builderState.length + 1;\n    var newFlow = {\n      name: 'Connect Flow #' + number,\n      type: 'flow',\n      position_x: mousePosition.x,\n      position_y: mousePosition.y,\n      flow: props.match.params.id\n    }\n    if (edgingMessageId) {\n      createAndConnectMessage(newFlow, edgingMessageId).then((response) => {\n        setBuilderState(\n          builderState.map((item) => {\n            if (item.id == edgingMessageId) {\n              item.next = response.data.id;\n            }\n            return item;\n          })\n        );\n        setBuilderState([...builderState, response.data]);\n       \n      }).catch((err) => {\n        toast.error(\"Something went wrong\")\n      }).finally(() => {\n        setEdgingMessageId(null);\n      });\n    } else if (edgingButtonId) {\n      createAndConnectWithButton(newFlow, edgingButtonId)\n        .then((response) => {\n          setBuilderState(\n            builderState.map((item) => {\n              if (item.id == edgingButtonMessageId) {\n                item.children.map((child) => {\n                  if (child.id == edgingButtonChildId) {\n                    child.buttons.map((button) => {\n                      if (button.id == edgingButtonId) {\n                        button.next = response.data.id\n                      }\n                      return button;\n                    })\n                  }\n                  return child;\n                })\n              }\n              return item;\n            })\n          );\n          setBuilderState([...builderState, response.data]);\n        }).catch((err) => {\n          toast.error(\"Something went wrong\")\n        }).finally(() => {\n          setEdgingButtonId(null);\n          setEdgingButtonMessageId(null);\n          setEdgingButtonChildId(null);\n        })\n    }\n  }\n\n  const handleToolOptionCancel = () => {\n    setShowToolOption(false);\n    if (isEdging) setIsSetting(false);\n    if (edgingMessageId) {\n      setBuilderState(\n        builderState.map((item) => {\n          if (item.id == edgingMessageId) {\n            item.next = \"\"\n          }\n          return item;\n        })\n      );\n      if (edgingMessageId) setEdgingMessageId(null);\n    } else if (edgingButtonId) {\n        setBuilderState(\n          builderState.map((item) => {\n            if (item.id == edgingButtonMessageId) {\n              item.children.map((child) => {\n                if (child.id == edgingButtonChildId) {\n                  child.buttons.map((button) => {\n                    if (button.id == edgingButtonId) {\n                      button.next = null\n                    }\n                    return button;\n                  })\n                }\n                return child;\n              })\n            }\n            return item;\n          })\n        );\n        if(edgingButtonId) setEdgingButtonId(null);\n        if(edgingButtonChildId) setEdgingButtonChildId(null);\n        if(edgingButtonMessageId) setEdgingButtonMessageId(null);\n      }          \n    }\n  React.useEffect(() => {\n    setIsLoading(true);\n    getMessages(props.match.params.id)\n      .then((response) => {\n        setBuilderState(response.data)\n      })\n      .catch((err) => {\n        toast.error(\"Something went wrong\")\n      }).finally(() => {\n        setIsLoading(false);\n      })\n    getFlow(props.match.params.id)\n      .then((response) => {  \n        setFlow(response.data);\n    }).catch((err) => {\n      toast.error(\"Something went wrong\")   \n    })\n    Konva.hitOnDragEnabled = true;\n  }, []);\n\n  const getToolOption = () => {\n    return (\n      <Group  x={mousePosition.x} y={mousePosition.y} zIndex={200}\n        onMouseOver={() => { document.body.style.cursor = 'pointer' }}\n        onMouseOut={() => { document.body.style.cursor = 'default' }}\n      >\n        <Group onClick={handleToolOptionNewMessageAction}>\n          <Rect\n            width={200}\n            height={50}\n            fill=\"#FDFDFD\"\n            strokeWidth={2}\n            shadowColor=\"gray\"\n            shadowOpacity={0.7}\n            shadowBlur={2}\n            onMouseDown={(e) => {\n              e.target.setAttr('fill', ' #eef1f4');\n            }}\n          />\n          <Text\n            x={15}\n            y={15}\n            text=\"+ New Message\"\n            fontFamily={'Roboto'}\n            fontSize={20}\n            fill={'#5850eb'}\n          />\n        </Group>\n        <Group y={50} onClick={handleToolOptionConnectFlow}>\n          <Rect\n            width={200}\n            height={50}\n            fill=\"#FDFDFD\"\n            strokeWidth={2}\n            shadowColor=\"gray\"\n            shadowOpacity={0.7}\n            shadowBlur={2}\n            onMouseDown={(e) => {\n              e.target.setAttr('fill', ' #eef1f4');\n            }}\n          />\n          <Text\n            x={15}\n            y={15}\n            text=\"+ Connect Flow\"\n            fontFamily={'Roboto'}\n            fontSize={20}\n            fill={'#5850eb'}\n          />\n        </Group>\n        <Group y={100}  onClick={handleToolOptionCancel}>\n          <Rect\n            width={200}\n            height={50}\n            fill=\"#FDFDFD\"\n            strokeWidth={2}\n            shadowColor=\"gray\"\n            shadowOpacity={0.7}\n            shadowBlur={2}\n            onMouseDown={(e) => {\n              e.target.setAttr('fill', ' #eef1f4');\n            }}\n          />\n          <Text\n            x={15}\n            y={15}\n            text=\"- Cancel\"\n            fontFamily={'Roboto'}\n            fontSize={20}\n            fill={'#5850eb'}\n          />\n        </Group>\n      </Group>\n    );\n  }\n  const getDefaultMessage = (item, index, messageHeight) => {\n    return (\n      <Group\n        x={item.position?.x}\n        y={item.position?.y}\n        draggable\n        onClick={(e) => {\n          showToolbar(item.id);\n          setSelectedTrue(index);\n        }}\n        onMouseEnter={(e) => {\n          setHoverTrue(index);\n        }}\n        onMouseLeave={(e) => {\n          setHoverFalse(index);\n        }}\n        hitOnDragEnabled={true}\n        onDragMove={(e) => {\n          handleDragMessage(e, item, index)\n        }}\n        onDragEnd={() => { updateMessagePosition(item) }}\n      >\n        {index === 0 &&\n          <Group x={10} y={-40}>\n            <Rect cornerRadius={7} stroke={\"green\"} strokeWidth={2} fill=\"#FDFDFD\" width={60} height={30} />\n            <Text\n              x={13}\n              y={8}\n              text={\"Start\"}\n              fontFamily={'Roboto'}\n              fontSize={15}\n              fill={'green'}\n            />\n          </Group>\n        }\n        <Rect\n          cornerRadius={16}\n          height={messageHeight}\n          width={340}\n          fill=\"#FDFDFD\"\n          strokeWidth={1}\n          stroke={ \"#5850EB\"}\n          shadowColor={getShadowColor(item)}\n          shadowOpacity={1}\n          shadowBlur={7}\n        />\n        {item.isHover &&\n          <>\n            <Rect\n              width={50} height={30} x={330} y={10} />\n            <URLImage\n              onMouseOver={() => { document.body.style.cursor = 'pointer' }}\n              onMouseOut={() => { document.body.style.cursor = 'default' }}\n              onClick={() => { handleDeleteMessage(item, index) }}\n              image={TrashIcon} x={345} y={10} height={25} width={25} />\n          </>\n        }\n        <Circle x={30} y={30} radius={15} fill=\"#5850EB\" />\n        <Text\n          x={55}\n          y={22}\n          text={item.name}\n          fontFamily={'Roboto'}\n          fontSize={20}\n          fill={'gray'}\n        />\n        <Group\n          x={340}\n          y={messageHeight - 20}\n          onMouseOver={() => { document.body.style.cursor = 'pointer' }}\n          onMouseOut={() => { document.body.style.cursor = 'default' }}\n          onClick={(e) => {\n            e.cancelBubble = true;\n            connectEdge(item.id)\n          }}>\n          <Circle radius={9} fill=\"#8392AB\" strokeWidth={1} />\n          <Text\n            x={-80}\n            y={-8}\n            text=\"Next Step\"\n            fontFamily={'Roboto'}\n            fontSize={15}\n            fontWeight={300}\n            fill={'gray'}\n          />\n        </Group>\n        {typeof item.children == 'object' ? (\n          <>\n            {item.children.length > 0 ? (\n              handleRenderingChildrens(item)\n            ) : (\n                <React.Fragment key={item}>\n                  <Group>\n                    <Rect\n                      x={20}\n                      y={75}\n                      height={60}\n                      width={300}\n                      fill=\"#EEF1F4\"\n                      cornerRadius={16}\n                    />\n                    <Text\n                      text=\"No Content\"\n                      x={110}\n                      y={95}\n                      fontFamily={'Roboto'}\n                      fontSize={20}\n                      fontWeight={300}\n                      fill={'blue'}\n                    />\n                  </Group>\n                </React.Fragment>\n              )}\n          </>\n        ) : null}\n      </Group>\n    );\n  }\n  const getFlowMessage = (item, index) => {\n    return (\n      <Group\n      x={item.position?.x}\n      y={item.position?.y}\n      draggable\n      onClick={(e) => {\n        showToolbar(item.id);\n        setSelectedTrue(index);\n      }}\n      onMouseEnter={(e) => {\n        setHoverTrue(index);\n      }}\n      onMouseLeave={(e) => {\n        setHoverFalse(index);\n      }}\n      hitOnDragEnabled={true}\n      onDragMove={(e) => {\n        handleDragMessage(e, item, index)\n      }}\n      onDragEnd={() => { updateMessagePosition(item) }}\n    >\n      <Rect\n        cornerRadius={16}\n        height={200}\n        width={340}\n        fill=\"#FDFDFD\"\n        stroke={ \"#f9bf3b\"}\n        strokeWidth={1}\n        shadowColor={getShadowColor(item)}\n        shadowOpacity={1}\n        shadowBlur={7}\n      />\n      {item.isHover &&\n        <>\n          <Rect\n            width={50} height={30} x={330} y={10} />\n          <URLImage\n            onMouseOver={() => { document.body.style.cursor = 'pointer' }}\n            onMouseOut={() => { document.body.style.cursor = 'default' }}\n            onClick={() => { handleDeleteMessage(item, index) }}\n            image={TrashIcon} x={345} y={10} height={25} width={25} />\n        </>\n      }\n      <Circle x={30} y={30} radius={15} fill=\"#f9bf3b\" />\n      <Text\n        x={55}\n        y={22}\n        text={item.name}\n        fontFamily={'Roboto'}\n        fontSize={20}\n        fill={'gray'}\n        />\n        {item.children.length > 0 ? (\n          <Group>\n          <Rect\n            x={20}\n            y={75}\n            height={60}\n            width={300}\n            stroke=\"green\"\n            strokeWidth={1}\n            fill=\"#EEF1F4\"\n            cornerRadius={16}\n          />\n          <Text\n            text={item.children[0].name}\n            x={40}\n            y={95}\n            fontFamily={'Roboto'}\n            fontSize={20}\n            fontWeight={300}\n              fill={\"#f9bf3b\"}\n              align={\"center\"}\n          />\n        </Group>\n        ) : (\n            <React.Fragment key={item}>\n              <Group>\n                <Rect\n                  x={20}\n                  y={75}\n                  height={60}\n                  width={300}\n                  fill=\"#EEF1F4\"\n                  cornerRadius={16}\n                />\n                <Text\n                  text=\"Select Flow\"\n                  x={110}\n                  y={95}\n                  fontFamily={'Roboto'}\n                  fontSize={20}\n                  fontWeight={300}\n                  fill={\"#f9bf3b\"}\n                  align={\"center\"}\n                />\n              </Group>\n            </React.Fragment>\n          )}\n    </Group>\n    );\n  }\n  const getMessageBox = (item, index, messageHeight) => {\n    if (item.type == \"default\") {\n      return getDefaultMessage(item, index, messageHeight);\n    } else if (item.type == \"flow\") {\n      return getFlowMessage(item, index);\n    }\n  }\n  \n  if (isLoading) {\n    return (\n      <div className=\"loader-wrapper\">\n        <PuffLoader color={' #5850EC'} loading={isLoading} size={75} />\n      </div>\n    );\n  } else {\n    return (\n      <FlowBuilderWrapper>\n        {flow && <div className=\"header\"><p>{flow.name}</p></div>}\n        <div className=\"stage-action\">\n          <BiMessageSquareAdd\n            onClick={handleAddMessage}\n          />\n        </div>\n        {isToolbarActive && <Toolbar id={id} hideToolbar={hideToolbar} bot={flow.bot} flow={flow.id} />}\n        <Stage\n          width={getStageWidth()}\n          height={window.innerHeight - 70}\n          scaleX={state.layerScale}\n          scaleY={state.layerScale}\n          onMouseMove={handleMousePosition}\n          x={0}\n          y={0}\n          onClick={handleClickOnCanvas}>\n          <Layer name=\"layer_1\" draggable onTouchMove={onTouchPinch} onWheel={handleWheel}>\n            <Rect\n              x={-window.innerWidth}\n              y={-window.innerHeight}\n              width={window.innerWidth * 3}\n              height={window.innerHeight * 3}\n              fill=\"\"\n            />\n            {showToolOption && getToolOption()}\n            {builderState &&\n              typeof builderState == 'object' &&\n              builderState.map((item, index) => {\n                var messageHeight = calculateHeightOfMessageBox(item.children);\n                return (\n                  <React.Fragment key={item.id}>\n                    {(item.type === \"default\" && item.next) ? (\n                      <Edge\n                        height={messageHeight}\n                        node1={item.position}\n                        node2={getNextNode(item.next)}\n                      />\n                    ) : null}\n                    {getMessageBox(item, index, messageHeight)}\n                  </React.Fragment>\n                );\n              })}\n          </Layer>\n        </Stage>\n      </FlowBuilderWrapper>\n    );\n  }\n};\nconst getShadowColor = (item) => {\n  if (item.isSelected) {\n    if (item.type == \"default\") {\n      return '#1e824c';\n    } else if (item.type == \"flow\") {\n      return \"#f9ae23\";\n    }\n   \n  } else if (item.isHover) {\n    if (item.type == \"default\") {\n      return '#8078FF';\n    } else if (item.type == \"flow\") {\n      return \"#f9bf3b\";\n    }\n  } else {\n    return '#95bbdf';\n  }\n};\n\nconst getSelectedNode = (state) => {\n  return state.findIndex((obj) => obj.isSelected == true);\n};\n\nconst getMessageIndexWhichHasNextOfGivenMessageId = (state, messageId) => {\n  return state.findIndex((obj) => obj.next == messageId);\n}\n\n\nconst getHoveredNode = (state) => {\n  return state.findIndex((obj) => obj.isHover == true);\n};\n\nexport default withRouter(FlowBuilder);\n","/home/rabinson/Freelancing/ShipboardBot/frontend/src/apis/bots.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/main/Flows/index.tsx",["199","200","201","202","203"],"import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { GridWrapper } from '../../../components/common/grid';\nimport { PrimaryButton } from './../../../components/common/buttons';\nimport { HiDotsVertical } from 'react-icons/hi';\nimport { DropdownWrapper } from '../../../components/common/Dropdown/styles';\nimport { useModal } from '../../../services/Modal/ModalProvider';\nimport { getFlows } from '../../../apis/flows';\nimport {withRouter} from 'react-router-dom'\nimport FlowCreateModal from '../../../components/dashboard/Flows/CreateModal';\nimport FlowEditModal from '../../../components/dashboard/Flows/EditModal';\nimport FlowDeleteModal from '../../../components/dashboard/Flows/DeleteModal';\nimport Pagination from '../../../components/common/Pagination/index';\nimport flowCover from '../../../assets/images/flow-cover.png';\nimport { PlatformWrapper } from './styles';\nimport messengerLogo from '../../../assets/images/platforms/messenger.png';\nimport telegramLogo from '../../../assets/images/platforms/telegram.png';\nimport slackLogo from '../../../assets/images/platforms/slack.png';\nimport MessengerConfigure from '../../../components/dashboard/Bots/Configure/Messenger';\nimport TelegramConfigure from '../../../components/dashboard/Bots/Configure/Telegram';\nimport SlackConfigure from '../../../components/dashboard/Bots/Configure/Slack';\nimport PuffLoader from \"react-spinners/PuffLoader\";\nimport { getPlatformConfigurations } from '../../../apis/bots';\nimport { toast } from 'react-toastify';\n\n\ntype FlowType = {\n  id: string;\n  name: string;\n  last_modified: string;\n};\n\nconst Flows = (props) => {\n  const { showModal, hideModal } = useModal();\n  const [flows, setFlows] = useState<Array<FlowType>>();\n  const [pageNumber, setPageNumber] = useState(1);\n  const [isLoading, setIsLoading] = useState(true);\n  const [lastPage, setLastPage] = useState(1);\n  const [messengerConfigurations, setMessengerConfigurations] = useState(null);\n  const [telegramConfigurations, setTelegramConfigurations] = useState(null);\n  const [slackConfigurations, setSlackConfigurations] = useState(null);\n\n  const botId = props.match.params.id;\n\n  const getFlowsData = (bot:string, pageNumber: number) => {\n    getFlows(bot, pageNumber)\n      .then((response) => {\n        setFlows(response.data);\n        setPageNumber(response.meta.current_page);\n        setLastPage(response.meta.last_page);\n      })\n      .catch((err) => {\n        console.log(\"Something went wrong\");\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  };\n  /**\n   * Flow Operations Starts\n   */\n  const handleCreateOpen = (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ) => {\n    showModal(() => (\n      <FlowCreateModal bot={botId} hideModal={hideModal} handleCreateFlow={ handleCreateFlow } />\n    ));\n  };\n\n  const handleEditOpen = (data: FlowType) => {\n    showModal(() => (\n      <FlowEditModal hideModal={hideModal} flow={data} handleEditFlow={ handleEditFlow } />\n    ));\n  };\n\n  const handleDeleteConfirmation = (data: FlowType) => {\n    showModal(() => (\n      <FlowDeleteModal hideModal={hideModal} flow={data} handleDeleteFlow={ handleDeleteFlow }/>\n    ));\n  };\n\n  const handlePageChange = (pageNumber: number) => {\n    setPageNumber(pageNumber);\n  };\n\n  const handleCreateFlow = (newFlow: FlowType) => { \n    const newFlowList = flows.concat(newFlow);\n    setFlows(newFlowList)\n  }\n\n  const handleEditFlow = (data) => {\n    const flowId = flows.findIndex(\n      (obj) => obj.id == data.id\n    );\n    setFlows(flows.map((item, index) => {\n      if (index == flowId) {\n        item.name = data.name\n      }\n      return item;\n    }));\n  }\n\n  const handleDeleteFlow = (id) => {\n    const flowId = flows.findIndex(\n      (obj) => obj.id == id\n    );\n    flows.splice(flowId, 1);\n  }\n  /**\n   * Flow Operations Ends\n   */\n\n  /**\n   * Configure Operations Starts\n   */\n\n  const handleMessengerConfigurationUpdate = (config) => {\n    setMessengerConfigurations(config);\n  }\n\n  const handleTelegramConfigurationUpdate = (config) => {\n    setTelegramConfigurations(config);\n  }\n\n  const handleSlackConfigurationUpdate = (config) => {\n    setSlackConfigurations(config);\n  }\n\n  const openMessengerConfigure = () => {\n    showModal(() => (\n      <MessengerConfigure hideModal={hideModal} botId={botId} configuration={ messengerConfigurations } changeConfiguration={handleMessengerConfigurationUpdate} />\n    ));\n  }\n\n  const openTelegramConfigure = () => {\n    showModal(() => (\n      <TelegramConfigure hideModal={hideModal} botId={botId} configuration={ telegramConfigurations } changeConfiguration={handleTelegramConfigurationUpdate}/>\n    ));\n  }\n\n  const openSlackConfigure = () => {\n    showModal(() => (\n      <SlackConfigure hideModal={hideModal} botId={botId} configuration={ slackConfigurations} changeConfiguration={handleSlackConfigurationUpdate}/>\n    ));\n  }\n  /**\n   * Configure Operations Ends\n   */\n  \n  \n  useEffect(() => {\n    getFlowsData(botId, pageNumber);\n  }, [pageNumber, lastPage]);\n\n  useEffect(() => {\n    getPlatformConfigurations(botId)\n      .then((response) => {\n        \n        var indexOfMessengerConfig = response.data.findIndex(config => config.platform === 'messenger');\n        setMessengerConfigurations(response.data[indexOfMessengerConfig]);\n\n        var indexOfTelegramConfig = response.data.findIndex(config => config.platform === 'telegram');\n        setTelegramConfigurations(response.data[indexOfTelegramConfig]);\n\n        var indexOfSlackConfig = response.data.findIndex(config => config.platform === 'slack');\n        setSlackConfigurations(response.data[indexOfSlackConfig]);\n      })\n      .catch((err) => toast.error(\"Something went wrong\"));    \n  }, [])\n\n  if (isLoading) {\n    return (\n      <div className=\"loader-wrapper\">\n          <PuffLoader color={' #5850EC'}  size={75} />\n      </div>\n    );\n  } else {\n    return (\n      <React.Fragment>\n        <div className=\"page-header\">\n          <h1 className=\"main-heading\">Bot Details</h1>\n            <PrimaryButton onClick={handleCreateOpen}>Add Flow</PrimaryButton>\n          </div>\n          <PlatformWrapper>\n            <div className=\"platform_btn\" onClick={openMessengerConfigure}>\n              <img src={messengerLogo} alt=\"Messenger Logo\" />\n              <p>Messenger</p>\n            </div>\n            <div className=\"platform_btn\" onClick={openTelegramConfigure}>\n              <img src={telegramLogo} alt=\"Telegram Logo\" />\n              <p>Telegram</p>\n            </div>\n            <div className=\"platform_btn\" onClick={openSlackConfigure}>\n              <img src={slackLogo} alt=\"Slack Logo\" />\n              <p>Slack</p>\n            </div>\n          </PlatformWrapper>\n          <GridWrapper>\n            <div className=\"grid-row\">\n              {flows && flows.map((data: FlowType) => {\n                return (\n                  <React.Fragment key={data.id}>\n                    <Link to={'flow/' + data.id}>\n                      <div className=\"grid-item\">\n                        <div className=\"grid-item-wrapper\">\n                          <div className=\"grid-item-container\">\n                            <div className=\"image\">\n                              <img src={flowCover} alt=\"Flow Cover\" />\n                            </div>\n                            <div className=\"tag\">\n                              <p>{data.name}</p>\n                              <DropdownWrapper>\n                                <label className=\"dropbtn\">\n                                  <HiDotsVertical />\n                                </label>\n                                <div className=\"dropdown-content\">\n                                  <p\n                                    onClick={(e) => {\n                                      e.preventDefault();\n                                      handleEditOpen(data);\n                                    }}>\n                                    Edit\n                                  </p>\n                                  <p\n                                    onClick={(e) => {\n                                      e.preventDefault();\n                                      handleDeleteConfirmation(data);\n                                    }}>\n                                    Delete\n                                  </p>\n                                </div>\n                              </DropdownWrapper>\n                            </div>           \n                        </div>\n                      </div>\n                    </div>\n                    </Link>\n                  </React.Fragment>\n                );\n              })}\n          </div>\n        </GridWrapper>\n    \n        <Pagination\n          activePage={pageNumber}\n          total={lastPage}\n          onChange={handlePageChange}\n        />\n      </React.Fragment>\n    );\n  }\n};\n\nexport default withRouter(Flows);\n",["204","205"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Flows/CreateModal.tsx",["206","207"],"import React, { useState, useRef, useEffect } from 'react';\nimport { FormHeader } from '../../common/typography';\nimport { InputField } from '../../common/form';\nimport { FormButton } from '../../common/buttons';\nimport { useForm } from \"react-hook-form\";\nimport { saveFlow } from './../../../apis/flows';\nimport { toast } from 'react-toastify';\n\nconst FlowCreateModal = ({bot, hideModal, handleCreateFlow}) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const { register, handleSubmit, errors, setError } = useForm();  \n\n  const onSubmit = data => {\n    setIsLoading(true);\n    saveFlow({ name: data.name, bot: bot })\n      .then((response) => {\n        hideModal();\n        toast.success(response.message);\n        handleCreateFlow(response.data)\n      }).catch((err) => { \n        if (err.response.status === 422) {\n          if (err.response.data.errors.name) {\n            setError('name', {\n              type: 'server',\n              message: err.response.data.errors.name[0]\n            })\n          } \n        } else {\n          toast.error('Something went wrong')\n        }\n      }).finally(() => { \n        setIsLoading(false);\n      })\n  }\n\n  return (\n    <React.Fragment>\n      <div className=\"modal-body\">\n        <button className=\"modal-exit\" onClick={hideModal}></button>\n        <div className=\"modal-title\">\n          <FormHeader>Create Flow</FormHeader>\n        </div>\n        <div className=\"modal-content\">\n          <form className=\"bot-create-form\" onSubmit={handleSubmit(onSubmit)}>\n            <InputField\n              isError={!!errors.name}\n              name=\"name\"\n              placeholder=\"Enter flow name\"\n              ref={register({required: true, minLength: 3})}\n            />\n            {errors.name && errors.name.type === 'required' && (<p className=\"form-error\">This field is required</p>)}\n            {errors.name && errors.name.type === 'minLength' && (<p className=\"form-error\">This field is required min length of 3</p>)}\n            {errors.name && errors.name.type === 'server' && (<p className=\"form-error\">{ errors.name.message}</p>)}\n\n            <FormButton type=\"submit\" disabled={isLoading}>\n              {isLoading ? 'Loading...' : 'Save'}\n            </FormButton>\n          </form>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default FlowCreateModal;\n","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Flows/EditModal.tsx",["208","209"],"import React, { useState, useRef, useEffect } from 'react';\nimport { FormHeader } from '../../common/typography';\nimport { InputField } from '../../common/form';\nimport { FormButton } from '../../common/buttons';\nimport { useForm } from \"react-hook-form\";\nimport { updateFlow } from './../../../apis/flows';\nimport { toast } from 'react-toastify';\n\nconst FlowCreateModal = ({flow, hideModal, handleEditFlow}) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const { register, handleSubmit, errors, setError } = useForm();  \n\n  const onSubmit = data => {\n    updateFlow({ name: data.name }, flow.id)\n      .then((response) => {\n        hideModal();\n        toast.success(response.message);\n        handleEditFlow(response.data)\n      }).catch((err) => { \n        if (err.response.status === 422) {\n          if (err.response.data.errors.name) {\n            setError('name', {\n              type: 'server',\n              message: err.response.data.errors.name[0]\n            })\n          } \n        } else {\n          toast.error('Something went wrong')\n        }\n      }).finally(() => { \n        setIsLoading(false);\n      })\n  }\n\n  return (\n    <React.Fragment>\n      <div className=\"modal-body\">\n        <button className=\"modal-exit\" onClick={hideModal}></button>\n        <div className=\"modal-title\">\n          <FormHeader>Edit Flow</FormHeader>\n        </div>\n        <div className=\"modal-content\">\n          <form className=\"bot-create-form\" onSubmit={handleSubmit(onSubmit)}>\n            <InputField\n              isError={!!errors.name}\n              defaultValue={flow.name}\n              name=\"name\"\n              ref={register({required: true, minLength: 3})}\n            />\n            {errors.name && errors.name.type === 'required' && (<p className=\"form-error\">This field is required</p>)}\n            {errors.name && errors.name.type === 'minLength' && (<p className=\"form-error\">This field is required min length of 3</p>)}\n            {errors.name && errors.name.type === 'server' && (<p className=\"form-error\">{ errors.name.message}</p>)}\n\n            <FormButton type=\"submit\" disabled={isLoading}>\n              {isLoading ? 'Loading...' : 'Save'}\n            </FormButton>\n          </form>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default FlowCreateModal;\n","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Bots/Configure/Messenger.tsx",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Bots/Configure/Slack.tsx",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Flows/DeleteModal.tsx",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Bots/Configure/Telegram.tsx",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/index.tsx",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/services/Auth/AuthProvider.tsx",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/utils/storage.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/LandingPage.tsx",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/auth/ForgotPasswordPage.tsx",["210"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/services/Modal/ModalProvider.tsx",["211"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/common/typography.ts",["212","213"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/common/form.ts",["214"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/front/header/index.tsx",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/common/Pagination/index.tsx",["215","216","217","218"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/main/Flows/styles.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/apis/messages.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Bots/DeleteModal.tsx",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Toolbar/index.tsx",["219","220","221","222","223","224","225","226","227","228","229","230"],"import React, { useContext, useState, useRef, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { ToolbarWrapper, ToolbarMenu, ToolbarButtonGroup, BtnEditorWrapper } from './styles';\nimport { VerticalGap } from '../../../common/typography';\nimport { ToolbarButton } from '../../../common/buttons';\nimport { BuilderContext } from '../../../../services/Builder/BuilderProvider';\nimport { GiCancel } from 'react-icons/gi';\nimport FormImage from '../Form/Image/index';\nimport FormText from '../Form/Text/index';\nimport FormCard from '../Form/Card/index';\nimport { connectFlowToMessage, updateMessage } from '../../../../apis/messages';\nimport { toast } from 'react-toastify';\nimport { saveText } from '../../../../apis/texts';\nimport { saveImage } from '../../../../apis/images';\nimport { addCardGroup } from '../../../../apis/cards';\nimport { useModal } from '../../../../services/Modal/ModalProvider';\nimport ConnectFlowModal from '../Modals/ConnectFlow';\nimport BtnEditor from './BtnEditor';\n\n\nconst Toolbar = ({ id, hideToolbar, bot, flow }) => {\n  const [builderState, setBuilderState] = useContext(BuilderContext);\n  const [isChangingTitle, setIsChangingTitle] = useState(false);\n  const { register, handleSubmit, setValue } = useForm({ mode: 'onChange' });\n  const { showModal, hideModal } = useModal();\n  const [isBtnEditorOpen, setIsBtnEditorOpen] = useState(false);\n  const [editorContent, setEditorContent] = useState({\n    position: null,\n    name: null,\n    id: null,\n    messageId: null,\n    childId: null\n  });\n\n  // const titleRef = useRef<HTMLInputElement>(null);\n\n  //Find index of specific object using findIndex method.\n  const objIndex = builderState.findIndex((obj) => obj.id == id);\n\n  const onChangeTitle = (data) => {\n    updateMessage({\n      name: data.title\n    }, id).then((response) => {\n      setBuilderState(\n        builderState.map((item, ind) => {\n          if (ind == objIndex) {\n           item.name = data.title\n          }\n          return item;\n        })\n      );\n    }).catch((err) => {\n      toast.error('Something went wrong')\n    })    \n  };\n  const openConnectFlowModal = () => {\n    showModal(() => (\n      <ConnectFlowModal flow={flow} bot={bot} hideModal={hideModal} handleSelect={handleSelect}/>\n    ));\n  }\n\n  const handleSelect = (flowId, flowName) => {\n    connectFlowToMessage({\n      flow: flowId\n    }, id).catch((err) => {\n      toast.error(\"Something went wrong\")\n    })\n    setBuilderState(\n      builderState.map((item, index) => {\n        if (item.id == id) {\n          item.children.push({\n            name: flowName\n          })\n        }\n        return item;\n      })\n    );\n    hideModal();\n  }\n\n  const removeConnetedFlow = () => {\n    connectFlowToMessage({}, id).catch((err) => {\n      toast.error(\"Something went wrong\")\n    })\n    setBuilderState(\n      builderState.map((item) => {\n        if (item.id == id) {\n          item.children.splice(0, 1);\n        }\n        return item;\n      })\n    );\n  }\n  \n  React.useEffect(() => {\n    setValue(\"title\", builderState[objIndex].name, {shouldValidate: true})\n  }, [builderState[objIndex].name])\n\n  const getContents = () => {\n    if (builderState[objIndex].type === \"default\") {\n      return (\n        <ToolbarMenu>\n          <div className={isChangingTitle ? 'header active' : 'header'}>\n            <form onBlur={handleSubmit(onChangeTitle)}>\n              <input\n                maxLength={35}\n                className=\"heading-input\"\n                ref={register({required: true, minLength: 3})}\n                id=\"title\"\n                name=\"title\"\n                onBlur={() => setIsChangingTitle(false)}\n              />\n            </form>\n          </div>\n          {builderState[objIndex].children.length > 0 ? (\n            builderState[objIndex].children.map((child) => {\n              return (\n                <React.Fragment key={child.id}>\n                  <VerticalGap size=\"3\" />\n                  {getChildren(child, objIndex, showBtnEditor, handleEditorContent)}\n                </React.Fragment>\n              );\n            })\n          ) : (\n              <React.Fragment>\n                <VerticalGap size=\"3\" />\n                <p className=\"no-content-text\">No content</p>\n              </React.Fragment>\n            )}\n          <VerticalGap size=\"3\" />\n        <ToolbarButtons id={id} index={objIndex} />\n        </ToolbarMenu>\n      );\n    } else if (builderState[objIndex].type === \"flow\") {\n      return (\n        <ToolbarMenu>\n          <div className='flow-header'>\n            <h4>Connect Flow </h4>\n          </div>\n          {builderState[objIndex].children.length > 0 ? (\n            builderState[objIndex].children.map((child) => {\n              return (\n                <React.Fragment key={child.id}>\n                  <VerticalGap size=\"3\" />\n                  <div className=\"flow-content\">\n                    {child.name}\n                    <button className=\"action-btn\">\n                      <GiCancel onClick={removeConnetedFlow} />\n                  </button>\n                  </div>\n                </React.Fragment>\n              );\n            })\n          ) : (\n              <React.Fragment>\n                <VerticalGap size=\"3\" />\n                <ToolbarButton height=\"4rem\" width=\"25rem\" onClick={openConnectFlowModal}>\n                  Select Flow\n                </ToolbarButton>\n              </React.Fragment>\n            )}\n        </ToolbarMenu>\n      );\n    }\n  }\n\n  const closeBtnEditor = () => {\n    setIsBtnEditorOpen(false);\n  }\n\n  const showBtnEditor = () => {\n    setIsBtnEditorOpen(true);\n  }\n\n  const handleEditorContent = ({ position, name, id, messageId, childId}) => {\n    setEditorContent({position, name, id, messageId, childId});\n  }\n\n\n  return (\n    <React.Fragment>\n      <ToolbarWrapper>\n      {builderState[objIndex] &&\n        getContents()\n      }\n      </ToolbarWrapper>\n      {isBtnEditorOpen && <BtnEditor handleClose={closeBtnEditor} editorContent={editorContent} />}\n    </React.Fragment>\n  );\n};\n\nexport default Toolbar;\n\nconst ToolbarButtons = ({ id, index }) => {\n  const [builderState, setBuilderState] = useContext(BuilderContext);\n\n  const addText = () => {\n    var height = builderState[index].height;\n    height = height + 50;\n    const positionIndex = builderState[index].children.length + 1;\n    saveText({\n      text: 'Change text',\n      message: id,\n      position: positionIndex,\n      height: 17\n    }).then((response) => {\n      setBuilderState(\n        builderState.map((item, ind) => {\n          if (ind == index) {\n            item.height = height;\n            item.children.push(response.data);\n          }\n          return item;\n        })\n      );\n    }).catch((err) => {\n      toast.error(\"Something went wrong\");\n    })\n  };\n\n  const addCard = () => {\n    let height = builderState[index].height;\n    height = height + 150;\n    const positionIndex = builderState[index].children.length + 1;\n\n\n    addCardGroup({\n      message: id,\n      position: positionIndex,\n      height: 150\n    }).then((response) => {\n      console.log(response.data);\n      setBuilderState(\n        builderState.map((item, ind) => {\n          if (ind == index) {\n            item.height = height;\n            item.children.push(response.data);\n          }\n          return item;\n        })\n      );\n    }).catch((err) => {\n      toast.error(\"Something went wrong\");\n    });\n  };\n\n  const addImage = () => {\n    let height = builderState[index].height;\n    height = height + 150;\n    const positionIndex = builderState[index].children.length + 1;\n\n    saveImage({\n      message: id,\n      position: positionIndex\n    }).then((response) => {\n      setBuilderState(\n        builderState.map((item, ind) => {\n          if (ind == index) {\n            item.height = height;\n            item.children.push(response.data);\n          }\n          return item;\n        })\n      );\n    }).catch((err) => {\n      toast.error(\"Something went wrong\");\n    })\n  };\n\n  return (\n    <React.Fragment>\n      <ToolbarButtonGroup>\n        <ToolbarButton\n          height=\"6rem\"\n          width=\"6rem\"\n          fontSize=\"1.2rem\"\n          onClick={addText}>\n          + Text\n        </ToolbarButton>\n        <ToolbarButton\n          height=\"6rem\"\n          width=\"6rem\"\n          fontSize=\"1.2rem\"\n          onClick={addCard}>\n          + Card\n        </ToolbarButton>\n        <ToolbarButton\n          height=\"6rem\"\n          width=\"6rem\"\n          fontSize=\"1.2rem\"\n          onClick={addImage}>\n          + Image\n        </ToolbarButton>\n        {/* <ToolbarButton height=\"4rem\" width=\"25rem\">\n          Next Button\n        </ToolbarButton> */}\n      </ToolbarButtonGroup>\n    </React.Fragment>\n  );\n};\n\nconst getChildren = (children, messageIndex, showBtnEditor, handleEditorContent) => {\n  if (children.type === 'text') {\n    return <FormText messageId={messageIndex} childId={children.id} showBtnEditor={showBtnEditor} setEditorContent={handleEditorContent}/>;\n  } else if (children.type === 'image') {\n    return <FormImage messageId={messageIndex} childId={children.id} />;\n  } else if (children.type === 'card') {\n    return <FormCard messageId={messageIndex} childId={children.id} />;\n  }\n};\n",["231","232"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/common/Pagination/styles.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/front/navbar/index.tsx",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Toolbar/styles.ts",[],["233","234"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Toolbar/BtnEditor.tsx",["235","236","237","238","239","240","241","242","243","244","245"],"import React from 'react';\nimport { BtnEditorWrapper } from './styles';\nimport { useForm } from \"react-hook-form\";\nimport { InputField } from '../../../common/form';\nimport { toast } from 'react-toastify';\nimport { BuilderContext } from '../../../../services/Builder/BuilderProvider';\nimport { updateButton, deleteButton } from '../../../../apis/buttons';\n\n\nconst BtnEditor = ({ handleClose, editorContent }) => {\n  const { register, handleSubmit, errors, setError, setValue } = useForm(); \n  const [builderState, setBuilderState] = React.useContext(BuilderContext);\n\n  const onSubmit = data => {\n    updateButton({ name: data.name }, editorContent.id)\n      .then((response) => {\n        setBuilderState(\n          builderState.map((message) => {\n            if (message.id == editorContent.messageId) {\n              message.children.map((child) => {\n                if (child.id == editorContent.childId) {\n                  child.buttons.map((button) => {\n                    if (button.id == editorContent.id) {\n                      button.name = response.data.name\n                    }\n                  })\n                }\n              })\n            }\n            return message;\n          })\n        );\n      }).catch((err) => { \n        if (err.response.status === 422) {\n          if (err.response.data.errors.name) {\n            setError('name', {\n              type: 'server',\n              message: err.response.data.errors.name[0]\n            })\n          } \n        } else {\n          toast.error('Something went wrong')\n        }\n      })\n  }\n\n  const handleDelete = () => {\n    console.log('deleted')\n    setBuilderState(\n      builderState.map((message, mix) => {\n        if ( message.id == editorContent.messageId) {\n          message.children.map((child, cix) => {\n            if (child.id == editorContent.childId) {\n              const  buttonIndex = builderState[mix].children[cix].buttons.findIndex(\n                (obj) => obj.id == editorContent.id\n              );\n              child.buttons.splice(buttonIndex, 1)\n            }\n          })\n        }\n        return message;\n      })\n    );\n    deleteButton(editorContent.id)\n      .then(() => {\n      })\n      .catch((err) => {\n        toast.error(\"Something went wrong\");\n      }).finally(() => {\n        handleClose()\n      });\n  }\n\n  React.useEffect(() => {\n    setValue(\"name\", editorContent.name)\n  }, [editorContent.name])\n\n\n  return (\n    <BtnEditorWrapper position={editorContent.position}>\n      <div className=\"title\">\n        Edit Button\n      </div>\n      <hr />\n      <form className=\"content\" onBlur={handleSubmit(onSubmit)}>\n        <label>Name</label>\n        <InputField\n          name=\"name\"\n          id=\"name\"\n          ref={register({ required: true })}\n        />\n        <div className=\"bottom\">\n          <button className=\"btn btn-delete\" onClick={(e) => {\n            e.preventDefault();\n            handleDelete()\n          }\n          }>Delete</button>\n        <button className=\"btn btn-done\" onClick={handleClose}>Done</button>\n      </div>\n      </form>\n     \n    </BtnEditorWrapper>\n  );\n}\n\nexport default BtnEditor;","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Text/index.tsx",["246","247","248","249","250","251","252","253","254","255"],"import React, { useEffect, useState, useRef, useContext } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { BuilderContext } from '../../../../../services/Builder/BuilderProvider';\nimport { AddTextWrapper } from './styles';\nimport { AddTextButton, ContentButton } from '../../../../common/buttons';\nimport { BiTrash } from 'react-icons/bi';\nimport Textarea from 'react-expanding-textarea';\nimport { updateText, deleteText } from '../../../../../apis/texts';\nimport { toast } from 'react-toastify';\nimport { saveButton } from '../../../../../apis/buttons';\nimport { v4 as uuidv4 } from 'uuid';\n\n\nconst FormText = ({ messageId, childId , showBtnEditor, setEditorContent}) => {\n  const [builderState, setBuilderState] = useContext(BuilderContext);\n  const { register, handleSubmit } = useForm({ mode: 'onChange' });\n  const [isChangingBody, setIsChangingBody] = useState(false);\n\n  const textAreaRef = useRef<HTMLTextAreaElement>(null);\n  const buttonRef = useRef<HTMLButtonElement>(null);\n\n  //Find index of specific object using findIndex method.\n  const childIndex = builderState[messageId].children.findIndex(\n    (obj) => obj.id == childId\n  );\n\n  const onTextChange = (data) => {\n    var height = textAreaRef.current.scrollHeight;\n    updateText({\n      text: data.text,\n      height: height\n    }, childId).then((response) => {\n      setBuilderState(\n        builderState.map((item, index) => {\n          if (index == messageId) {\n            item.children.map((child, ind) => {\n              if (ind == childIndex) {\n                child.value = data.text;\n                child.height = height;\n              }\n            });\n          }\n          return item;\n        })\n      );\n    }).catch((err) => {\n      toast.error(\"Something went wrong\");\n    })\n  };\n\n  const handleDelete = () => {\n    var height = builderState[messageId].height - textAreaRef.current.scrollHeight;\n    deleteText(childId)\n      .then(() => {\n        setBuilderState(\n          builderState.map((item, index) => {\n            if (index == messageId) {\n              item.height = height;\n              item.children.splice(childIndex,1)\n            }\n            return item;\n          })\n        );\n      })\n      .catch((err) => {\n        toast.error(\"Something went wrong\");\n    })\n  };\n\n  const handleAddButton = () => {\n    const buttonNumber = builderState[messageId].children[childIndex].buttons.length + 1;\n    saveButton({\n      name: 'Button #' + buttonNumber,\n      parent_type: 'text',\n      parent: childId\n    }).then((response) => {\n      setBuilderState(\n        builderState.map((item, index) => {\n          if (index == messageId) {\n            item.children.map((child) => {\n              if (child.id == childId) {\n                child.buttons.push(response.data);\n              }\n            });\n          }\n          return item;\n        })\n      );\n    }).catch((err) => {\n      toast.error(\"Something went wrong\")\n    })      \n  }\n\n  useEffect(() => {\n    if (textAreaRef.current) {\n      register(textAreaRef.current, {required: true, minLength: 3});\n    }\n  }, []);\n\n  return (\n    <AddTextWrapper>\n      <button className=\"action-btn\">\n        <BiTrash onClick={handleDelete} />\n      </button>\n      <div className={isChangingBody ? 'card-body active' : 'card-body'}>\n        <form onBlur={handleSubmit(onTextChange)}>\n          <Textarea\n            maxLength={500}\n            placeholder=\"Enter your text here\"\n            onBlur={() => setIsChangingBody(false)}\n            defaultValue={builderState[messageId].children[childIndex].value}\n            id=\"text\"\n            name=\"text\"\n            ref={textAreaRef}\n            onClick={() => setIsChangingBody(true)}\n          />\n        </form>\n      </div>\n      <div className=\"card-base\">\n        {builderState[messageId].children[childIndex].buttons && builderState[messageId].children[childIndex].buttons.map((button, index) => {\n          return (\n            <React.Fragment key={button.id}>\n              <ContentButton\n                ref={buttonRef}\n                onClick={(event) => {\n                setEditorContent({\n                  position: buttonRef.current.scrollTop,\n                  name: button.name,\n                  id: button.id,\n                  messageId: builderState[messageId].id,\n                  childId: childId\n                });\n                showBtnEditor();\n            }}>{button.name}</ContentButton>\n            </React.Fragment>\n          );\n        })}\n      <AddTextButton height=\"4rem\" width=\"100%\" onClick={handleAddButton}>\n        Add Button\n      </AddTextButton>\n      </div>\n    </AddTextWrapper>\n  );\n};\n\nexport default FormText;\n","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/front/feature/styles.ts",["256"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/front/footer/styles.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Image/styles.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Card/styles.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Card/index.tsx",["257","258","259","260","261","262","263","264","265","266","267","268","269","270","271","272","273","274","275","276","277","278","279","280","281","282","283","284","285","286","287","288","289","290"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Modals/ConnectFlow.tsx",["291","292","293","294"],{"ruleId":"295","severity":1,"message":"296","line":4,"column":30,"nodeType":"297","messageId":"298","endLine":4,"endColumn":35},{"ruleId":"295","severity":1,"message":"299","line":44,"column":17,"nodeType":"297","messageId":"298","endLine":44,"endColumn":25},{"ruleId":"300","severity":1,"message":"301","line":54,"column":64,"nodeType":"302","messageId":"303","endLine":54,"endColumn":66},{"ruleId":"300","severity":1,"message":"301","line":55,"column":21,"nodeType":"302","messageId":"303","endLine":55,"endColumn":23},{"ruleId":"300","severity":1,"message":"301","line":181,"column":21,"nodeType":"302","messageId":"303","endLine":181,"endColumn":23},{"ruleId":"300","severity":1,"message":"301","line":184,"column":21,"nodeType":"302","messageId":"303","endLine":184,"endColumn":23},{"ruleId":"300","severity":1,"message":"301","line":193,"column":21,"nodeType":"302","messageId":"303","endLine":193,"endColumn":23},{"ruleId":"300","severity":1,"message":"301","line":207,"column":21,"nodeType":"302","messageId":"303","endLine":207,"endColumn":23},{"ruleId":"300","severity":1,"message":"301","line":210,"column":21,"nodeType":"302","messageId":"303","endLine":210,"endColumn":23},{"ruleId":"300","severity":1,"message":"301","line":219,"column":21,"nodeType":"302","messageId":"303","endLine":219,"endColumn":23},{"ruleId":"300","severity":1,"message":"301","line":231,"column":19,"nodeType":"302","messageId":"303","endLine":231,"endColumn":21},{"ruleId":"300","severity":1,"message":"301","line":248,"column":23,"nodeType":"302","messageId":"303","endLine":248,"endColumn":25},{"ruleId":"300","severity":1,"message":"301","line":268,"column":23,"nodeType":"302","messageId":"303","endLine":268,"endColumn":25},{"ruleId":"300","severity":1,"message":"301","line":270,"column":28,"nodeType":"302","messageId":"303","endLine":270,"endColumn":30},{"ruleId":"300","severity":1,"message":"301","line":272,"column":33,"nodeType":"302","messageId":"303","endLine":272,"endColumn":35},{"ruleId":"300","severity":1,"message":"304","line":303,"column":30,"nodeType":"302","messageId":"303","endLine":303,"endColumn":32},{"ruleId":"300","severity":1,"message":"301","line":310,"column":31,"nodeType":"302","messageId":"303","endLine":310,"endColumn":33},{"ruleId":"300","severity":1,"message":"301","line":327,"column":31,"nodeType":"302","messageId":"303","endLine":327,"endColumn":33},{"ruleId":"305","severity":1,"message":"306","line":328,"column":47,"nodeType":"307","messageId":"308","endLine":328,"endColumn":49},{"ruleId":"300","severity":1,"message":"301","line":329,"column":36,"nodeType":"302","messageId":"303","endLine":329,"endColumn":38},{"ruleId":"305","severity":1,"message":"306","line":330,"column":52,"nodeType":"307","messageId":"308","endLine":330,"endColumn":54},{"ruleId":"300","severity":1,"message":"301","line":331,"column":41,"nodeType":"302","messageId":"303","endLine":331,"endColumn":43},{"ruleId":"300","severity":1,"message":"301","line":381,"column":26,"nodeType":"302","messageId":"303","endLine":381,"endColumn":28},{"ruleId":"305","severity":1,"message":"306","line":384,"column":38,"nodeType":"307","messageId":"308","endLine":384,"endColumn":40},{"ruleId":"300","severity":1,"message":"301","line":385,"column":26,"nodeType":"302","messageId":"303","endLine":385,"endColumn":28},{"ruleId":"305","severity":1,"message":"306","line":386,"column":40,"nodeType":"307","messageId":"308","endLine":386,"endColumn":42},{"ruleId":"300","severity":1,"message":"301","line":387,"column":31,"nodeType":"302","messageId":"303","endLine":387,"endColumn":33},{"ruleId":"300","severity":1,"message":"301","line":418,"column":17,"nodeType":"302","messageId":"303","endLine":418,"endColumn":19},{"ruleId":"300","severity":1,"message":"301","line":452,"column":27,"nodeType":"302","messageId":"303","endLine":452,"endColumn":29},{"ruleId":"300","severity":1,"message":"301","line":469,"column":27,"nodeType":"302","messageId":"303","endLine":469,"endColumn":29},{"ruleId":"300","severity":1,"message":"301","line":471,"column":32,"nodeType":"302","messageId":"303","endLine":471,"endColumn":34},{"ruleId":"300","severity":1,"message":"301","line":473,"column":37,"nodeType":"302","messageId":"303","endLine":473,"endColumn":39},{"ruleId":"300","severity":1,"message":"301","line":511,"column":25,"nodeType":"302","messageId":"303","endLine":511,"endColumn":27},{"ruleId":"300","severity":1,"message":"301","line":529,"column":27,"nodeType":"302","messageId":"303","endLine":529,"endColumn":29},{"ruleId":"300","severity":1,"message":"301","line":531,"column":32,"nodeType":"302","messageId":"303","endLine":531,"endColumn":34},{"ruleId":"300","severity":1,"message":"301","line":533,"column":37,"nodeType":"302","messageId":"303","endLine":533,"endColumn":39},{"ruleId":"300","severity":1,"message":"301","line":562,"column":23,"nodeType":"302","messageId":"303","endLine":562,"endColumn":25},{"ruleId":"300","severity":1,"message":"301","line":572,"column":25,"nodeType":"302","messageId":"303","endLine":572,"endColumn":27},{"ruleId":"300","severity":1,"message":"301","line":574,"column":30,"nodeType":"302","messageId":"303","endLine":574,"endColumn":32},{"ruleId":"300","severity":1,"message":"301","line":576,"column":35,"nodeType":"302","messageId":"303","endLine":576,"endColumn":37},{"ruleId":"309","severity":1,"message":"310","line":611,"column":6,"nodeType":"311","endLine":611,"endColumn":8,"suggestions":"312"},{"ruleId":"300","severity":1,"message":"301","line":910,"column":19,"nodeType":"302","messageId":"303","endLine":910,"endColumn":21},{"ruleId":"300","severity":1,"message":"301","line":912,"column":26,"nodeType":"302","messageId":"303","endLine":912,"endColumn":28},{"ruleId":"300","severity":1,"message":"301","line":976,"column":19,"nodeType":"302","messageId":"303","endLine":976,"endColumn":21},{"ruleId":"300","severity":1,"message":"301","line":978,"column":26,"nodeType":"302","messageId":"303","endLine":978,"endColumn":28},{"ruleId":"300","severity":1,"message":"301","line":983,"column":19,"nodeType":"302","messageId":"303","endLine":983,"endColumn":21},{"ruleId":"300","severity":1,"message":"301","line":985,"column":26,"nodeType":"302","messageId":"303","endLine":985,"endColumn":28},{"ruleId":"300","severity":1,"message":"301","line":994,"column":50,"nodeType":"302","messageId":"303","endLine":994,"endColumn":52},{"ruleId":"295","severity":1,"message":"313","line":997,"column":7,"nodeType":"297","messageId":"298","endLine":997,"endColumn":50},{"ruleId":"300","severity":1,"message":"301","line":998,"column":44,"nodeType":"302","messageId":"303","endLine":998,"endColumn":46},{"ruleId":"300","severity":1,"message":"301","line":1003,"column":47,"nodeType":"302","messageId":"303","endLine":1003,"endColumn":49},{"ruleId":"300","severity":1,"message":"301","line":93,"column":23,"nodeType":"302","messageId":"303","endLine":93,"endColumn":25},{"ruleId":"300","severity":1,"message":"301","line":96,"column":17,"nodeType":"302","messageId":"303","endLine":96,"endColumn":19},{"ruleId":"300","severity":1,"message":"301","line":105,"column":23,"nodeType":"302","messageId":"303","endLine":105,"endColumn":25},{"ruleId":"309","severity":1,"message":"314","line":153,"column":6,"nodeType":"311","endLine":153,"endColumn":28,"suggestions":"315"},{"ruleId":"309","severity":1,"message":"314","line":169,"column":6,"nodeType":"311","endLine":169,"endColumn":8,"suggestions":"316"},{"ruleId":"317","replacedBy":"318"},{"ruleId":"319","replacedBy":"320"},{"ruleId":"295","severity":1,"message":"321","line":1,"column":27,"nodeType":"297","messageId":"298","endLine":1,"endColumn":33},{"ruleId":"295","severity":1,"message":"322","line":1,"column":35,"nodeType":"297","messageId":"298","endLine":1,"endColumn":44},{"ruleId":"295","severity":1,"message":"321","line":1,"column":27,"nodeType":"297","messageId":"298","endLine":1,"endColumn":33},{"ruleId":"295","severity":1,"message":"322","line":1,"column":35,"nodeType":"297","messageId":"298","endLine":1,"endColumn":44},{"ruleId":"295","severity":1,"message":"323","line":5,"column":22,"nodeType":"297","messageId":"298","endLine":5,"endColumn":30},{"ruleId":"295","severity":1,"message":"324","line":28,"column":25,"nodeType":"297","messageId":"298","endLine":28,"endColumn":39},{"ruleId":"295","severity":1,"message":"325","line":2,"column":10,"nodeType":"297","messageId":"298","endLine":2,"endColumn":20},{"ruleId":"295","severity":1,"message":"326","line":3,"column":10,"nodeType":"297","messageId":"298","endLine":3,"endColumn":15},{"ruleId":"295","severity":1,"message":"327","line":2,"column":10,"nodeType":"297","messageId":"298","endLine":2,"endColumn":14},{"ruleId":"295","severity":1,"message":"328","line":1,"column":17,"nodeType":"297","messageId":"298","endLine":1,"endColumn":25},{"ruleId":"295","severity":1,"message":"322","line":1,"column":27,"nodeType":"297","messageId":"298","endLine":1,"endColumn":36},{"ruleId":"300","severity":1,"message":"304","line":20,"column":34,"nodeType":"302","messageId":"303","endLine":20,"endColumn":36},{"ruleId":"300","severity":1,"message":"304","line":47,"column":34,"nodeType":"302","messageId":"303","endLine":47,"endColumn":36},{"ruleId":"295","severity":1,"message":"321","line":1,"column":39,"nodeType":"297","messageId":"298","endLine":1,"endColumn":45},{"ruleId":"295","severity":1,"message":"322","line":1,"column":47,"nodeType":"297","messageId":"298","endLine":1,"endColumn":56},{"ruleId":"295","severity":1,"message":"329","line":3,"column":59,"nodeType":"297","messageId":"298","endLine":3,"endColumn":75},{"ruleId":"300","severity":1,"message":"301","line":38,"column":59,"nodeType":"302","messageId":"303","endLine":38,"endColumn":61},{"ruleId":"300","severity":1,"message":"301","line":46,"column":19,"nodeType":"302","messageId":"303","endLine":46,"endColumn":21},{"ruleId":"300","severity":1,"message":"301","line":70,"column":21,"nodeType":"302","messageId":"303","endLine":70,"endColumn":23},{"ruleId":"300","severity":1,"message":"301","line":87,"column":21,"nodeType":"302","messageId":"303","endLine":87,"endColumn":23},{"ruleId":"309","severity":1,"message":"330","line":97,"column":6,"nodeType":"311","endLine":97,"endColumn":35,"suggestions":"331"},{"ruleId":"309","severity":1,"message":"332","line":97,"column":7,"nodeType":"333","endLine":97,"endColumn":34},{"ruleId":"300","severity":1,"message":"301","line":209,"column":19,"nodeType":"302","messageId":"303","endLine":209,"endColumn":21},{"ruleId":"300","severity":1,"message":"301","line":235,"column":19,"nodeType":"302","messageId":"303","endLine":235,"endColumn":21},{"ruleId":"300","severity":1,"message":"301","line":258,"column":19,"nodeType":"302","messageId":"303","endLine":258,"endColumn":21},{"ruleId":"317","replacedBy":"334"},{"ruleId":"319","replacedBy":"335"},{"ruleId":"317","replacedBy":"336"},{"ruleId":"319","replacedBy":"337"},{"ruleId":"295","severity":1,"message":"338","line":11,"column":35,"nodeType":"297","messageId":"298","endLine":11,"endColumn":41},{"ruleId":"300","severity":1,"message":"301","line":19,"column":28,"nodeType":"302","messageId":"303","endLine":19,"endColumn":30},{"ruleId":"305","severity":1,"message":"306","line":20,"column":44,"nodeType":"307","messageId":"308","endLine":20,"endColumn":46},{"ruleId":"300","severity":1,"message":"301","line":21,"column":30,"nodeType":"302","messageId":"303","endLine":21,"endColumn":32},{"ruleId":"305","severity":1,"message":"306","line":22,"column":46,"nodeType":"307","messageId":"308","endLine":22,"endColumn":48},{"ruleId":"300","severity":1,"message":"301","line":23,"column":35,"nodeType":"302","messageId":"303","endLine":23,"endColumn":37},{"ruleId":"300","severity":1,"message":"301","line":51,"column":25,"nodeType":"302","messageId":"303","endLine":51,"endColumn":27},{"ruleId":"305","severity":1,"message":"306","line":52,"column":45,"nodeType":"307","messageId":"308","endLine":52,"endColumn":47},{"ruleId":"300","severity":1,"message":"301","line":53,"column":26,"nodeType":"302","messageId":"303","endLine":53,"endColumn":28},{"ruleId":"300","severity":1,"message":"301","line":55,"column":33,"nodeType":"302","messageId":"303","endLine":55,"endColumn":35},{"ruleId":"309","severity":1,"message":"339","line":76,"column":6,"nodeType":"311","endLine":76,"endColumn":26,"suggestions":"340"},{"ruleId":"295","severity":1,"message":"341","line":11,"column":16,"nodeType":"297","messageId":"298","endLine":11,"endColumn":22},{"ruleId":"300","severity":1,"message":"301","line":24,"column":21,"nodeType":"302","messageId":"303","endLine":24,"endColumn":23},{"ruleId":"300","severity":1,"message":"301","line":35,"column":21,"nodeType":"302","messageId":"303","endLine":35,"endColumn":23},{"ruleId":"305","severity":1,"message":"306","line":36,"column":44,"nodeType":"307","messageId":"308","endLine":36,"endColumn":46},{"ruleId":"300","severity":1,"message":"301","line":37,"column":23,"nodeType":"302","messageId":"303","endLine":37,"endColumn":25},{"ruleId":"300","severity":1,"message":"301","line":57,"column":23,"nodeType":"302","messageId":"303","endLine":57,"endColumn":25},{"ruleId":"300","severity":1,"message":"301","line":79,"column":21,"nodeType":"302","messageId":"303","endLine":79,"endColumn":23},{"ruleId":"305","severity":1,"message":"306","line":80,"column":39,"nodeType":"307","messageId":"308","endLine":80,"endColumn":41},{"ruleId":"300","severity":1,"message":"301","line":81,"column":28,"nodeType":"302","messageId":"303","endLine":81,"endColumn":30},{"ruleId":"309","severity":1,"message":"342","line":98,"column":6,"nodeType":"311","endLine":98,"endColumn":8,"suggestions":"343"},{"ruleId":"295","severity":1,"message":"325","line":2,"column":10,"nodeType":"297","messageId":"298","endLine":2,"endColumn":20},{"ruleId":"295","severity":1,"message":"322","line":1,"column":27,"nodeType":"297","messageId":"298","endLine":1,"endColumn":36},{"ruleId":"295","severity":1,"message":"344","line":5,"column":10,"nodeType":"297","messageId":"298","endLine":5,"endColumn":23},{"ruleId":"295","severity":1,"message":"341","line":7,"column":16,"nodeType":"297","messageId":"298","endLine":7,"endColumn":22},{"ruleId":"295","severity":1,"message":"345","line":25,"column":9,"nodeType":"297","messageId":"298","endLine":25,"endColumn":19},{"ruleId":"295","severity":1,"message":"346","line":26,"column":9,"nodeType":"297","messageId":"298","endLine":26,"endColumn":21},{"ruleId":"300","severity":1,"message":"301","line":31,"column":21,"nodeType":"302","messageId":"303","endLine":31,"endColumn":23},{"ruleId":"300","severity":1,"message":"301","line":40,"column":25,"nodeType":"302","messageId":"303","endLine":40,"endColumn":27},{"ruleId":"300","severity":1,"message":"304","line":50,"column":25,"nodeType":"302","messageId":"303","endLine":50,"endColumn":27},{"ruleId":"300","severity":1,"message":"301","line":65,"column":23,"nodeType":"302","messageId":"303","endLine":65,"endColumn":25},{"ruleId":"305","severity":1,"message":"306","line":66,"column":49,"nodeType":"307","messageId":"308","endLine":66,"endColumn":51},{"ruleId":"300","severity":1,"message":"301","line":67,"column":25,"nodeType":"302","messageId":"303","endLine":67,"endColumn":27},{"ruleId":"300","severity":1,"message":"301","line":71,"column":27,"nodeType":"302","messageId":"303","endLine":71,"endColumn":29},{"ruleId":"300","severity":1,"message":"301","line":91,"column":21,"nodeType":"302","messageId":"303","endLine":91,"endColumn":23},{"ruleId":"300","severity":1,"message":"301","line":93,"column":23,"nodeType":"302","messageId":"303","endLine":93,"endColumn":25},{"ruleId":"300","severity":1,"message":"301","line":95,"column":27,"nodeType":"302","messageId":"303","endLine":95,"endColumn":29},{"ruleId":"300","severity":1,"message":"301","line":98,"column":27,"nodeType":"302","messageId":"303","endLine":98,"endColumn":29},{"ruleId":"300","severity":1,"message":"301","line":114,"column":48,"nodeType":"302","messageId":"303","endLine":114,"endColumn":50},{"ruleId":"300","severity":1,"message":"301","line":127,"column":28,"nodeType":"302","messageId":"303","endLine":127,"endColumn":30},{"ruleId":"300","severity":1,"message":"301","line":143,"column":23,"nodeType":"302","messageId":"303","endLine":143,"endColumn":25},{"ruleId":"300","severity":1,"message":"301","line":145,"column":25,"nodeType":"302","messageId":"303","endLine":145,"endColumn":27},{"ruleId":"300","severity":1,"message":"301","line":147,"column":27,"nodeType":"302","messageId":"303","endLine":147,"endColumn":29},{"ruleId":"300","severity":1,"message":"301","line":178,"column":21,"nodeType":"302","messageId":"303","endLine":178,"endColumn":23},{"ruleId":"305","severity":1,"message":"306","line":179,"column":44,"nodeType":"307","messageId":"308","endLine":179,"endColumn":46},{"ruleId":"300","severity":1,"message":"301","line":180,"column":23,"nodeType":"302","messageId":"303","endLine":180,"endColumn":25},{"ruleId":"305","severity":1,"message":"306","line":181,"column":43,"nodeType":"307","messageId":"308","endLine":181,"endColumn":45},{"ruleId":"300","severity":1,"message":"301","line":182,"column":25,"nodeType":"302","messageId":"303","endLine":182,"endColumn":27},{"ruleId":"300","severity":1,"message":"301","line":208,"column":21,"nodeType":"302","messageId":"303","endLine":208,"endColumn":23},{"ruleId":"305","severity":1,"message":"306","line":209,"column":44,"nodeType":"307","messageId":"308","endLine":209,"endColumn":46},{"ruleId":"300","severity":1,"message":"301","line":210,"column":23,"nodeType":"302","messageId":"303","endLine":210,"endColumn":25},{"ruleId":"305","severity":1,"message":"306","line":211,"column":43,"nodeType":"307","messageId":"308","endLine":211,"endColumn":45},{"ruleId":"300","severity":1,"message":"301","line":212,"column":25,"nodeType":"302","messageId":"303","endLine":212,"endColumn":27},{"ruleId":"300","severity":1,"message":"301","line":232,"column":21,"nodeType":"302","messageId":"303","endLine":232,"endColumn":23},{"ruleId":"305","severity":1,"message":"347","line":255,"column":70,"nodeType":"307","messageId":"348","endLine":255,"endColumn":72},{"ruleId":"349","severity":1,"message":"350","line":263,"column":23,"nodeType":"351","endLine":263,"endColumn":74},{"ruleId":"295","severity":1,"message":"352","line":2,"column":10,"nodeType":"297","messageId":"298","endLine":2,"endColumn":15},{"ruleId":"295","severity":1,"message":"353","line":18,"column":10,"nodeType":"297","messageId":"298","endLine":18,"endColumn":19},{"ruleId":"300","severity":1,"message":"304","line":24,"column":77,"nodeType":"302","messageId":"303","endLine":24,"endColumn":79},{"ruleId":"309","severity":1,"message":"354","line":44,"column":6,"nodeType":"311","endLine":44,"endColumn":28,"suggestions":"355"},"@typescript-eslint/no-unused-vars","'Image' is defined but never used.","Identifier","unusedVar","'setState' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'props.match.params.id' and 'setBuilderState'. Either include them or remove the dependency array.","ArrayExpression",["356"],"'getMessageIndexWhichHasNextOfGivenMessageId' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'botId'. Either include it or remove the dependency array.",["357"],["358"],"no-native-reassign",["359"],"no-negated-in-lhs",["360"],"'useRef' is defined but never used.","'useEffect' is defined but never used.","'FormLink' is defined but never used.","'onRequestClose' is assigned a value but never used.","'darkerGrey' is defined but never used.","'media' is defined but never used.","'grey' is defined but never used.","'useState' is defined but never used.","'BtnEditorWrapper' is defined but never used.","React Hook React.useEffect has missing dependencies: 'builderState', 'objIndex', and 'setValue'. Either include them or remove the dependency array.",["361"],"React Hook React.useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","MemberExpression",["359"],["360"],["359"],["360"],"'errors' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'setValue'. Either include it or remove the dependency array.",["362"],"'uuidv4' is defined but never used.","React Hook useEffect has a missing dependency: 'register'. Either include it or remove the dependency array.",["363"],"'AddTextButton' is defined but never used.","'headingRef' is assigned a value but never used.","'paragraphRef' is assigned a value but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'toast' is defined but never used.","'isLoading' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'bot' and 'getFlowsData'. Either include them or remove the dependency array.",["364"],{"desc":"365","fix":"366"},{"desc":"367","fix":"368"},{"desc":"369","fix":"370"},"no-global-assign","no-unsafe-negation",{"desc":"371","fix":"372"},{"desc":"373","fix":"374"},{"desc":"375","fix":"376"},{"desc":"377","fix":"378"},"Update the dependencies array to be: [props.match.params.id, setBuilderState]",{"range":"379","text":"380"},"Update the dependencies array to be: [pageNumber, lastPage, botId]",{"range":"381","text":"382"},"Update the dependencies array to be: [botId]",{"range":"383","text":"384"},"Update the dependencies array to be: [builderState, objIndex, setValue]",{"range":"385","text":"386"},"Update the dependencies array to be: [editorContent.name, setValue]",{"range":"387","text":"388"},"Update the dependencies array to be: [register]",{"range":"389","text":"390"},"Update the dependencies array to be: [pageNumber, lastPage, getFlowsData, bot]",{"range":"391","text":"392"},[18582,18584],"[props.match.params.id, setBuilderState]",[5033,5055],"[pageNumber, lastPage, botId]",[5753,5755],"[botId]",[3102,3131],"[builderState, objIndex, setValue]",[2393,2413],"[editorContent.name, setValue]",[3089,3091],"[register]",[1398,1420],"[pageNumber, lastPage, getFlowsData, bot]"]