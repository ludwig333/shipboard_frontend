[{"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Toolbar/index.tsx":"1","/home/rabinson/Freelancing/ShipboardBot/frontend/src/apis/messages.ts":"2","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Modals/ConnectFlow.tsx":"3","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Card/index.tsx":"4","/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/main/Flows/builder.tsx":"5","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Text/index.tsx":"6","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Image/index.tsx":"7","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Text/styles.ts":"8","/home/rabinson/Freelancing/ShipboardBot/frontend/src/index.tsx":"9","/home/rabinson/Freelancing/ShipboardBot/frontend/src/routes/ProtectedRoute.tsx":"10","/home/rabinson/Freelancing/ShipboardBot/frontend/src/services/Modal/ModalProvider.tsx":"11","/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/main/Templates/index.tsx":"12","/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/main/Bots/index.tsx":"13","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/common/form.ts":"14","/home/rabinson/Freelancing/ShipboardBot/frontend/src/apis/bots.ts":"15","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/common/Dropdown/styles.ts":"16","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/layout/AuthLayout.tsx":"17","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Bots/DeleteModal.tsx":"18","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Bots/EditModal.tsx":"19","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Flows/EditModal.tsx":"20","/home/rabinson/Freelancing/ShipboardBot/frontend/src/constants/urls.ts":"21","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/front/feature/index.tsx":"22","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/front/navbar/index.tsx":"23","/home/rabinson/Freelancing/ShipboardBot/frontend/src/apis/cards.ts":"24","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/front/info/styles.ts":"25","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/front/feature/styles.ts":"26","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/front/navbar/styles.ts":"27","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Image/styles.ts":"28","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Sidebar/styles.ts":"29","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Card/styles.ts":"30","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/common/buttons.ts":"31","/home/rabinson/Freelancing/ShipboardBot/frontend/src/apis/buttons.ts":"32","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Modals/styles.ts":"33","/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/main/Flows/helper.tsx":"34","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Toolbar/styles.ts":"35","/home/rabinson/Freelancing/ShipboardBot/frontend/src/styles/global.ts":"36","/home/rabinson/Freelancing/ShipboardBot/frontend/src/styles/mediaQueries.ts":"37","/home/rabinson/Freelancing/ShipboardBot/frontend/src/utils/storage.ts":"38","/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/auth/LoginPage.tsx":"39","/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/main/Dashboard/index.tsx":"40","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/common/typography.ts":"41","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/common/table.ts":"42","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/layout/AppLayout.tsx":"43","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Bots/CreateModal.tsx":"44","/home/rabinson/Freelancing/ShipboardBot/frontend/src/services/Builder/BuilderProvider.tsx":"45","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/front/header/styles.ts":"46","/home/rabinson/Freelancing/ShipboardBot/frontend/src/utils/pagination.ts":"47","/home/rabinson/Freelancing/ShipboardBot/frontend/src/apis/texts.ts":"48","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Sidebar/index.tsx":"49","/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/main/Flows/index.tsx":"50","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/common/grid.ts":"51"},{"size":8252,"mtime":1612622034756,"results":"52","hashOfConfig":"53"},{"size":1279,"mtime":1612604464688,"results":"54","hashOfConfig":"53"},{"size":2919,"mtime":1612667262267,"results":"55","hashOfConfig":"53"},{"size":10853,"mtime":1612614227019,"results":"56","hashOfConfig":"53"},{"size":23809,"mtime":1612665151160,"results":"57","hashOfConfig":"53"},{"size":4192,"mtime":1612622112765,"results":"58","hashOfConfig":"53"},{"size":3108,"mtime":1612614260275,"results":"59","hashOfConfig":"53"},{"size":1226,"mtime":1612623245742,"results":"60","hashOfConfig":"53"},{"size":515,"mtime":1607764359769,"results":"61","hashOfConfig":"53"},{"size":944,"mtime":1611287624293,"results":"62","hashOfConfig":"53"},{"size":3582,"mtime":1612584637978,"results":"63","hashOfConfig":"53"},{"size":210,"mtime":1610158645219,"results":"64","hashOfConfig":"53"},{"size":5182,"mtime":1612664029247,"results":"65","hashOfConfig":"53"},{"size":945,"mtime":1608217208422,"results":"66","hashOfConfig":"53"},{"size":939,"mtime":1611505690538,"results":"67","hashOfConfig":"53"},{"size":603,"mtime":1611407912500,"results":"68","hashOfConfig":"53"},{"size":3062,"mtime":1607357777066,"results":"69","hashOfConfig":"53"},{"size":1475,"mtime":1611506512498,"results":"70","hashOfConfig":"53"},{"size":2326,"mtime":1611505989860,"results":"71","hashOfConfig":"53"},{"size":2316,"mtime":1611505901411,"results":"72","hashOfConfig":"53"},{"size":671,"mtime":1612612337869,"results":"73","hashOfConfig":"53"},{"size":2469,"mtime":1607354234054,"results":"74","hashOfConfig":"53"},{"size":717,"mtime":1607357496043,"results":"75","hashOfConfig":"53"},{"size":1341,"mtime":1612234206822,"results":"76","hashOfConfig":"53"},{"size":1251,"mtime":1607358308147,"results":"77","hashOfConfig":"53"},{"size":707,"mtime":1606842094420,"results":"78","hashOfConfig":"53"},{"size":596,"mtime":1607358244451,"results":"79","hashOfConfig":"53"},{"size":1691,"mtime":1612625185277,"results":"80","hashOfConfig":"53"},{"size":2446,"mtime":1612319962325,"results":"81","hashOfConfig":"53"},{"size":2734,"mtime":1610160143779,"results":"82","hashOfConfig":"53"},{"size":2591,"mtime":1612611015356,"results":"83","hashOfConfig":"53"},{"size":679,"mtime":1612612888789,"results":"84","hashOfConfig":"53"},{"size":386,"mtime":1612599018149,"results":"85","hashOfConfig":"53"},{"size":5663,"mtime":1612626066190,"results":"86","hashOfConfig":"53"},{"size":2865,"mtime":1612600468451,"results":"87","hashOfConfig":"53"},{"size":1061,"mtime":1610853751719,"results":"88","hashOfConfig":"53"},{"size":437,"mtime":1607357171179,"results":"89","hashOfConfig":"53"},{"size":330,"mtime":1606965896953,"results":"90","hashOfConfig":"53"},{"size":3083,"mtime":1608089518101,"results":"91","hashOfConfig":"53"},{"size":159,"mtime":1607998049825,"results":"92","hashOfConfig":"53"},{"size":1320,"mtime":1609667047505,"results":"93","hashOfConfig":"53"},{"size":1454,"mtime":1611403637931,"results":"94","hashOfConfig":"53"},{"size":1207,"mtime":1611403304542,"results":"95","hashOfConfig":"53"},{"size":2305,"mtime":1611506040626,"results":"96","hashOfConfig":"53"},{"size":1239,"mtime":1611592415760,"results":"97","hashOfConfig":"53"},{"size":2194,"mtime":1607358477789,"results":"98","hashOfConfig":"53"},{"size":570,"mtime":1607912715680,"results":"99","hashOfConfig":"53"},{"size":670,"mtime":1611717938172,"results":"100","hashOfConfig":"53"},{"size":3424,"mtime":1612664150234,"results":"101","hashOfConfig":"53"},{"size":5157,"mtime":1612666892908,"results":"102","hashOfConfig":"53"},{"size":2292,"mtime":1612667221062,"results":"103","hashOfConfig":"53"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"107"},"v8ty68",{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":34,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"117"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":37,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"124"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"117"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"138","messages":"139","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"110"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"153","messages":"154","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"110"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"177","messages":"178","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"110"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"199","messages":"200","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"203","messages":"204","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"207","messages":"208","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"211","messages":"212","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"215","messages":"216","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Toolbar/index.tsx",["222","223","224","225","226","227","228","229","230"],"import React, { useContext, useState, useRef, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { ToolbarWrapper, ToolbarMenu, ToolbarButtonGroup } from './styles';\nimport { VerticalGap } from '../../../common/typography';\nimport { ToolbarButton } from '../../../common/buttons';\nimport { BuilderContext } from '../../../../services/Builder/BuilderProvider';\nimport { GiCancel } from 'react-icons/gi';\nimport FormImage from '../Form/Image/index';\nimport FormText from '../Form/Text/index';\nimport FormCard from '../Form/Card/index';\nimport { connectFlowToMessage, updateMessage } from '../../../../apis/messages';\nimport { toast } from 'react-toastify';\nimport { saveText } from '../../../../apis/texts';\nimport { saveImage } from '../../../../apis/images';\nimport { addCardGroup } from '../../../../apis/cards';\nimport { useModal } from '../../../../services/Modal/ModalProvider';\nimport ConnectFlowModal from '../Modals/ConnectFlow';\n\n\nconst Toolbar = ({ id, hideToolbar, bot, flow }) => {\n  const [builderState, setBuilderState] = useContext(BuilderContext);\n  const [isChangingTitle, setIsChangingTitle] = useState(false);\n  const { register, handleSubmit } = useForm({ mode: 'onChange' });\n  const { showModal, hideModal } = useModal();\n\n  // const titleRef = useRef<HTMLInputElement>(null);\n\n  //Find index of specific object using findIndex method.\n  const objIndex = builderState.findIndex((obj) => obj.id == id);\n\n  const onChangeTitle = (data) => {\n    updateMessage({\n      name: data.title\n    }, id).then((response) => {\n      setBuilderState(\n        builderState.map((item, ind) => {\n          if (ind == objIndex) {\n           item.name = data.title\n          }\n          return item;\n        })\n      );\n    }).catch((err) => {\n      toast.error('Something went wrong')\n    })    \n  };\n  const openConnectFlowModal = () => {\n    showModal(() => (\n      <ConnectFlowModal flow={flow} bot={bot} hideModal={hideModal} handleSelect={handleSelect}/>\n    ));\n  }\n\n  const handleSelect = (flowId, flowName) => {\n    connectFlowToMessage({\n      flow: flowId\n    }, id).catch((err) => {\n      toast.error(\"Something went wrong\")\n    })\n    setBuilderState(\n      builderState.map((item, index) => {\n        if (item.id == id) {\n          item.children.push({\n            name: flowName\n          })\n        }\n        return item;\n      })\n    );\n    hideModal();\n  }\n\n  const removeConnetedFlow = () => {\n    connectFlowToMessage({}, id).catch((err) => {\n      toast.error(\"Something went wrong\")\n    })\n    setBuilderState(\n      builderState.map((item) => {\n        if (item.id == id) {\n          item.children.splice(0, 1);\n        }\n        return item;\n      })\n    );\n  }\n  \n\n  const getContents = () => {\n    if (builderState[objIndex].type === \"default\") {\n      return (\n        <ToolbarMenu>\n          <div className={isChangingTitle ? 'header active' : 'header'}>\n            <form onBlur={handleSubmit(onChangeTitle)}>\n              <input\n                maxLength={35}\n                className=\"heading-input\"\n                ref={register({required: true, minLength: 3})}\n                id=\"title\"\n                name=\"title\"\n                defaultValue={builderState[objIndex].name}\n                onBlur={() => setIsChangingTitle(false)}\n              />\n            </form>\n          </div>\n          {builderState[objIndex].children.length > 0 ? (\n            builderState[objIndex].children.map((child) => {\n              return (\n                <React.Fragment key={child.id}>\n                  <VerticalGap size=\"3\" />\n                  {getChildren(child, objIndex)}\n                </React.Fragment>\n              );\n            })\n          ) : (\n              <React.Fragment>\n                <VerticalGap size=\"3\" />\n                <p className=\"no-content-text\">No content</p>\n              </React.Fragment>\n            )}\n          <VerticalGap size=\"3\" />\n        <ToolbarButtons id={id} index={objIndex} />\n        </ToolbarMenu>\n      );\n    } else if (builderState[objIndex].type === \"flow\") {\n      return (\n        <ToolbarMenu>\n          <div className='flow-header'>\n            <h4>Connect Flow </h4>\n          </div>\n          {builderState[objIndex].children.length > 0 ? (\n            builderState[objIndex].children.map((child) => {\n              return (\n                <React.Fragment key={child.id}>\n                  <VerticalGap size=\"3\" />\n                  <div className=\"flow-content\">\n                    {child.name}\n                    <button className=\"action-btn\">\n                      <GiCancel onClick={removeConnetedFlow} />\n                  </button>\n                  </div>\n                </React.Fragment>\n              );\n            })\n          ) : (\n              <React.Fragment>\n                <VerticalGap size=\"3\" />\n                <ToolbarButton height=\"4rem\" width=\"25rem\" onClick={openConnectFlowModal}>\n                  Select Flow\n                </ToolbarButton>\n              </React.Fragment>\n            )}\n        </ToolbarMenu>\n      );\n    }\n  }\n\n  return (\n    <ToolbarWrapper>\n      {builderState[objIndex] &&\n        getContents()\n      }\n    </ToolbarWrapper>\n  );\n};\n\nexport default Toolbar;\n\nconst ToolbarButtons = ({ id, index }) => {\n  const [builderState, setBuilderState] = useContext(BuilderContext);\n\n  const addText = () => {\n    var height = builderState[index].height;\n    height = height + 50;\n    const positionIndex = builderState[index].children.length + 1;\n    saveText({\n      text: 'Change text',\n      message: id,\n      position: positionIndex,\n      height: 17\n    }).then((response) => {\n      setBuilderState(\n        builderState.map((item, ind) => {\n          if (ind == index) {\n            item.height = height;\n            item.children.push(response.data);\n          }\n          return item;\n        })\n      );\n    }).catch((err) => {\n      toast.error(\"Something went wrong\");\n    })\n  };\n\n  const addCard = () => {\n    let height = builderState[index].height;\n    height = height + 150;\n    const positionIndex = builderState[index].children.length + 1;\n\n\n    addCardGroup({\n      message: id,\n      position: positionIndex\n    }).then((response) => {\n      console.log(response.data);\n      setBuilderState(\n        builderState.map((item, ind) => {\n          if (ind == index) {\n            item.height = height;\n            item.children.push(response.data);\n          }\n          return item;\n        })\n      );\n    }).catch((err) => {\n      toast.error(\"Something went wrong\");\n    });\n  };\n\n  const addImage = () => {\n    let height = builderState[index].height;\n    height = height + 150;\n    const positionIndex = builderState[index].children.length + 1;\n\n    saveImage({\n      message: id,\n      position: positionIndex\n    }).then((response) => {\n      setBuilderState(\n        builderState.map((item, ind) => {\n          if (ind == index) {\n            item.height = height;\n            item.children.push(response.data);\n          }\n          return item;\n        })\n      );\n    }).catch((err) => {\n      toast.error(\"Something went wrong\");\n    })\n  };\n\n  return (\n    <React.Fragment>\n      <ToolbarButtonGroup>\n        <ToolbarButton\n          height=\"6rem\"\n          width=\"6rem\"\n          fontSize=\"1.2rem\"\n          onClick={addText}>\n          + Text\n        </ToolbarButton>\n        <ToolbarButton\n          height=\"6rem\"\n          width=\"6rem\"\n          fontSize=\"1.2rem\"\n          onClick={addCard}>\n          + Card\n        </ToolbarButton>\n        <ToolbarButton\n          height=\"6rem\"\n          width=\"6rem\"\n          fontSize=\"1.2rem\"\n          onClick={addImage}>\n          + Image\n        </ToolbarButton>\n        {/* <ToolbarButton height=\"4rem\" width=\"25rem\">\n          Next Button\n        </ToolbarButton> */}\n      </ToolbarButtonGroup>\n    </React.Fragment>\n  );\n};\n\nconst getChildren = (children, messageId) => {\n  if (children.type === 'text') {\n    return <FormText messageId={messageId} childId={children.id} />;\n  } else if (children.type === 'image') {\n    return <FormImage messageId={messageId} childId={children.id} />;\n  } else if (children.type === 'card') {\n    return <FormCard messageId={messageId} childId={children.id} />;\n  }\n};\n",["231","232"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/apis/messages.ts",[],["233","234"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Modals/ConnectFlow.tsx",["235","236","237","238"],"import React, { useEffect, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { getFlows } from '../../../../apis/flows';\nimport { GridWrapper } from '../../../common/grid';\nimport { ConnectFlowWrapper } from './styles';\nimport Pagination from '../../../common/Pagination/index';\nimport flowCover from '../../../../assets/images/flow-cover.png';\n\ntype FlowType = {\n  id: string;\n  name: string;\n  message_count: string\n};\n\nconst ConnectFlowModal = ({bot, flow, hideModal, handleSelect}) => {\n  const [flows, setFlows] = useState<Array<FlowType>>();\n  const [pageNumber, setPageNumber] = useState(1);\n  const [isLoading, setIsLoading] = useState(true);\n  const [lastPage, setLastPage] = useState(1);\n\n  const getFlowsData = (bot:string, pageNumber: number) => {\n    getFlows(bot, pageNumber)\n      .then((response) => {\n        var otherFlowsThanOneInside = response.data.filter(item => (item.id != flow) && item.message_count > 0)\n        setFlows(otherFlowsThanOneInside);\n        setPageNumber(response.meta.current_page);\n        setLastPage(response.meta.last_page);\n      })\n      .catch((err) => {\n        console.log(\"Something went wrong\");\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  };\n\n\n  const handlePageChange = (pageNumber: number) => {\n    setPageNumber(pageNumber);\n  };\n\n  useEffect(() => {\n    getFlowsData(bot, pageNumber);\n  }, [pageNumber, lastPage]);\n\n  const getFlowGrid = () => {\n    if (flows.length > 0) {\n      return flows.map((data: FlowType) => {\n        return (\n          <React.Fragment key={data.id}>\n              <div className=\"grid-item\" onClick={ () => handleSelect(data.id, data.name)}>\n                <div className=\"grid-item-wrapper\">\n                <div className=\"grid-item-container\">\n                  <div className=\"image\">\n                  <img src={flowCover} alt=\"Flow Cover\" />\n                  </div>\n                  <div className=\"tag\">\n                    <p>{data.name}</p>\n                  </div>           \n                </div>\n              </div>\n            </div>\n          </React.Fragment>\n        );\n      })\n    } else {\n     return  (<p>There are no other flows or they don't have messages</p>);\n    }\n  }\n\n  return (\n    <ConnectFlowWrapper>\n      <div className=\"modal-body\">\n        <button className=\"modal-exit\" onClick={hideModal}></button>\n        <div className=\"modal-title\">\n         Connect Modal\n        </div>\n        <div className=\"modal-content\">\n          <GridWrapper>\n            <div className=\"grid-row\">\n              {flows && getFlowGrid()}\n            </div>\n          </GridWrapper>\n          {(flows && flows.length > 0) && \n            <Pagination\n            activePage={pageNumber}\n            total={lastPage}\n            onChange={handlePageChange}\n          />}\n        </div>\n      </div>\n    </ConnectFlowWrapper>\n  );\n};\n\nexport default ConnectFlowModal;\n","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Card/index.tsx",["239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268","269","270","271","272"],"import React, { useState, useEffect, useRef, useContext } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { CardSlider, CardWrapper } from './styles';\nimport { BuilderContext } from '../../../../../services/Builder/BuilderProvider';\nimport { AddTextButton } from '../../../../common/buttons';\nimport { ImageWrapper } from '../Image/styles';\nimport { v4 as uuidv4 } from 'uuid';\nimport Textarea from 'react-expanding-textarea';\nimport {\n  BiImageAdd,\n  BiTrash,\n  BiChevronRight,\n  BiChevronLeft,\n  BiPlus,\n} from 'react-icons/bi';\nimport { addCard, deleteCardGroup, updateCard, uploadImage } from '../../../../../apis/cards';\nimport { toast } from 'react-toastify';\n\nconst FormCard = ({ messageId, childId }) => {\n  const [builderState, setBuilderState] = useContext(BuilderContext);\n  const { register, handleSubmit } = useForm({ mode: 'onChange' });\n  const [isChangingHeading, setIsChangingHeading] = useState(false);\n  const [isChangingBody, setIsChangingBody] = useState(false);\n\n  const headingRef = useRef<HTMLInputElement>(null);\n  const paragraphRef = useRef<HTMLTextAreaElement>(null);\n  const cardRef = useRef<HTMLDivElement>(null);\n\n  //Find index of specific object using findIndex method.\n  const childIndex = builderState[messageId].children.findIndex(\n    (obj) => obj.id == childId\n  );\n\n  //Card Navigation functions\n  const handleNextButton = (id) => {\n    const cards = builderState[messageId].children[childIndex].cards;\n    const length = cards.length - 1;\n    const activeCardIndex = getActiveCardIndex(cards);\n\n    if (activeCardIndex == length) {\n      makeCardActive(activeCardIndex + 1, activeCardIndex, length + 2, true);\n    } else {\n      makeCardActive(activeCardIndex + 1, activeCardIndex);\n    }\n  };\n\n  const handlePreviousButton = () => {\n    const cards = builderState[messageId].children[childIndex].cards;\n    const activeCardIndex = getActiveCardIndex(cards);\n    if (activeCardIndex != 0) {\n      makeCardActive(activeCardIndex - 1, activeCardIndex);\n    }\n  };\n\n  const makeCardActive = (\n    cardIndex,\n    activeCardIndex,\n    length = 0,\n    addNew = false\n  ) => {\n    if (addNew) {\n      addCard(childId).then((response) => {\n        setBuilderState(\n          builderState.map((message, index) => { \n            if (index == messageId) { \n              message.children.map((child, ind) => { \n                if (ind == childIndex) {\n                  //First set active card to inactive\n                  child.cards.map((card, inx) => {\n                    console.log(activeCardIndex);\n                  if (inx == activeCardIndex) {\n                    card.active = false\n                  }\n                    return card;\n                })\n                //Then push a new card with active true;\n                  child.cards.push(response.data)\n                }\n              })\n            }\n            return message;\n          })\n        );\n      }).catch((err) => {\n        console.log(err);\n        toast.error(\"Something went wrong\");\n      });\n    } else {\n      setBuilderState(\n        builderState.map((message, index) => { \n          if (index == messageId) { \n            message.children.map((child, ind) => { \n              if (ind == childIndex) {\n                child.cards.map((card, inx) => { \n                  if (inx == cardIndex) { \n                    card.active = true\n                  }\n                  if (inx == activeCardIndex) { \n                    card.active = false\n                  }\n                  return card;\n                })\n              }\n              return child;\n            })\n          }\n          return message;\n        })\n      );\n    }\n  };\n\n  const getActiveCardIndex = (cards) => {\n    return cards.findIndex((obj) => obj.active == true);\n  };\n\n  const getCardIndex = (id) => {\n    return builderState[messageId].children[childIndex].cards.findIndex(\n      (obj) => obj.id === id\n    );\n  };\n\n  const isLastCard = () => {\n    const cards = builderState[messageId].children[childIndex].cards;\n    const length = cards.length - 1;\n    const activeCardIndex = getActiveCardIndex(cards);\n    return activeCardIndex == length;\n  };\n\n  //Form input submit methods\n  const onUploadImage = (data, id) => {\n    let cardIndex = getCardIndex(id);\n    let reader = new FileReader();\n    const formData = new FormData();\n    formData.append('image', data.image[0]);\n    formData.append('name', data.image[0].name);\n\n    reader.onloadend = () => {\n      var height = cardRef.current.scrollHeight;\n      uploadImage(formData, id).then((response) => {\n        setBuilderState(\n          builderState.map((item, index) => {\n            if (index == messageId) {\n              item.children.map((child, ind) => {\n                if (ind == childIndex) {\n                  child.cards.map((card, s) => {\n                    if (s == cardIndex) {\n                      card.selectedImage = data.image[0];\n                      card.imagePreviewUrl = reader.result;\n                      card.height = height;\n                    }\n                    return card;\n                  });\n                }\n                return child;\n              });\n            }\n            return item;\n          })\n        );\n      }).catch((err) => {\n        toast.error(\"Something went wrong\");\n      })\n    };\n\n    reader.readAsDataURL(data.image[0]);\n  };\n\n  const onHeadingChange = (data, id) => {\n    let cardIndex = getCardIndex(id);\n    var height = cardRef.current.scrollHeight;\n    updateCard({\n      heading: data.heading,\n    }, id).then((response) => {\n      setBuilderState(\n        builderState.map((item, index) => {\n          if (index == messageId) {\n            item.children.map((child, ind) => {\n              if (ind == childIndex) {\n                child.cards.map((card, s) => {\n                  if (s == cardIndex) {\n                    card.heading = data.heading;\n                    card.height = height;\n                  }\n                });\n              }\n            });\n          }\n          return item;\n        })\n      );\n    }).catch((err) => {\n      toast.error(\"Something went wrong\");\n    })\n  };\n\n  const onParagraphChange = (data, id) => {\n    let cardIndex = getCardIndex(id);\n    var height = cardRef.current.scrollHeight;\n\n    updateCard({\n      body: data.body,\n    }, id).then((response) => {\n      setBuilderState(\n        builderState.map((item, index) => {\n          if (index == messageId) {\n            item.children.map((child, ind) => {\n              if (ind == childIndex) {\n                child.cards.map((card, s) => {\n                  if (s == cardIndex) {\n                    card.body = data.body;\n                    card.height = height;\n                  }\n                });\n              }\n            });\n          }\n          return item;\n        })\n      );\n    }).catch((err) => {\n      toast.error(\"Something went wrong\");\n    })\n  };\n\n  const handleDelete = () => {\n    deleteCardGroup(childId).then((response) => {\n      setBuilderState(\n        builderState.map((item, index) => {\n          if (index == messageId) {\n            item.height -= 250;\n            item.children.splice(childIndex, 1);\n          }\n          return item;\n        })\n      );\n    }).catch((err) => {\n      toast.error(\"Something went wrong\");\n    })\n  };\n\n  return (\n    <CardSlider>\n      <div className=\"navigation_btn previous\" onClick={handlePreviousButton}>\n        <BiChevronLeft />\n      </div>\n      <div className=\"navigation_btn next\" onClick={handleNextButton}>\n        {isLastCard() ? <BiPlus /> : <BiChevronRight />}\n      </div>\n      <button className=\"action-btn\" onClick={handleDelete}>\n        <BiTrash />\n      </button>\n      {builderState[messageId].children[childIndex].cards.map((card) => {\n        if (card.active) {\n          return (\n            <CardWrapper ref={cardRef}>\n              <div className=\"card-image\">\n                <ImageWrapper>\n                  {card.imagePreviewUrl ? (\n                    <div>\n                      <img src={card.imagePreviewUrl} alt=\"card-image\" />\n                    </div>\n                  ) : (\n                    <form\n                      onChange={handleSubmit((data) =>\n                        onUploadImage(data, card.id)\n                      )}>\n                      <input\n                        ref={register}\n                        type=\"file\"\n                        id={'card_image' + getCardIndex(card.id)}\n                        name=\"image\"\n                        accept=\"image/*\"\n                      />\n                      <label htmlFor={'card_image' + getCardIndex(card.id)}>\n                        <BiImageAdd />\n                        <p>Upload image</p>\n                      </label>\n                    </form>\n                  )}\n                </ImageWrapper>\n              </div>\n              <div className=\"card-text\">\n                <div\n                  className={\n                    isChangingHeading ? 'card-heading active' : 'card-heading'\n                  }>\n                  <form\n                    onBlur={handleSubmit((data) =>\n                      onHeadingChange(data, card.id)\n                    )}>\n                    <input\n                      className=\"card-title\"\n                      ref={register({required: true, minLength: 3 })}\n                      maxLength={27}\n                      id=\"heading\"\n                      name=\"heading\"\n                      defaultValue={card.heading}\n                      onBlur={() => setIsChangingHeading(false)}\n                      onClick={() => {\n                        setIsChangingBody(false);\n                        setIsChangingHeading(true);\n                      }}\n                    />\n                  </form>\n                </div>\n                <div\n                  className={isChangingBody ? 'card-body active' : 'card-body'}>\n                  <form\n                    onBlur={handleSubmit((data) =>\n                      onParagraphChange(data, card.id)\n                    )}>\n                    <Textarea\n                      className=\"card-paragraph\"\n                      maxLength={200}\n                      placeholder=\"Enter your text here\"\n                      onBlur={() => setIsChangingBody(false)}\n                      defaultValue={card.body}\n                      id=\"body\"\n                      name=\"body\"\n                      ref={register({required: true, minLength: 3})}\n                      onClick={() => {\n                        setIsChangingHeading(false);\n                        setIsChangingBody(true);\n                      }}\n                    />\n                  </form>\n                </div>\n              </div>\n            </CardWrapper>\n          );\n        }\n      })}\n    </CardSlider>\n  );\n};\n\nexport default FormCard;\n",["273","274"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/main/Flows/builder.tsx",["275","276","277","278","279","280","281","282","283","284","285","286","287","288","289","290","291","292","293","294","295","296","297","298","299","300","301","302","303","304","305","306","307","308","309","310","311"],"import React, { useState } from 'react';\nimport {withRouter} from 'react-router-dom'\nimport { FlowBuilderWrapper } from './styles';\nimport { Stage, Layer, Rect, Image, Text, Group, Circle } from 'react-konva';\nimport Toolbar from '../../../components/dashboard/builder/Toolbar/index';\nimport {\n  handleRenderingCards,\n  getImage,\n  calculateHeightOfMessageBox,\n  handleWheel,\n  Edge,\n  URLImage,\n} from './helper';\nimport {\n  useBuilder,\n} from '../../../services/Builder/BuilderProvider';\nimport { BiMessageSquareAdd } from 'react-icons/bi';\nimport { saveMessage, getMessages, updateMessage, deleteMessage, createAndConnectMessage } from '../../../apis/messages';\nimport { toast } from 'react-toastify';\nimport { getFlow } from '../../../apis/flows';\n\nconst FlowBuilder = (props) => {\n  const [isToolbarActive, setIsToolbarActive] = useState(null);\n  const [builderState, setBuilderState, sidebar] = useBuilder();\n  const [flow, setFlow] = useState(null);\n  const [id, setId] = useState(null);\n  const [mousePosition, setMousePosition] = useState({\n    x: 0,\n    y: 0,\n  });\n  const [isEdging, setIsSetting] = useState(false);\n  const [isSecondClick, setIsSecondClick] = useState(false);\n  const [showToolOption, setShowToolOption] = useState(false);\n  const [edgingMessageId, setEdgingMessageId] = useState(null);\n  const [edgingButtonId, setEdgingButtonId] = useState(null);\n\n\n  const [state, setState] = useState({\n    layerScale: 1,\n    layerX: 0,\n    layerY: 0,\n  });\n\n  const TrashIcon = \"data:image/svg+xml;base64,\" + window.btoa('<svg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" viewBox=\"0 0 24 24\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"none\" d=\"M17.004 20L17.003 8h-1-8-1v12H17.004zM13.003 10h2v8h-2V10zM9.003 10h2v8h-2V10zM9.003 4H15.003V6H9.003z\"></path><path d=\"M5.003,20c0,1.103,0.897,2,2,2h10c1.103,0,2-0.897,2-2V8h2V6h-3h-1V4c0-1.103-0.897-2-2-2h-6c-1.103,0-2,0.897-2,2v2h-1h-3 v2h2V20z M9.003,4h6v2h-6V4z M8.003,8h8h1l0.001,12H7.003V8H8.003z\"></path><path d=\"M9.003 10H11.003V18H9.003zM13.003 10H15.003V18H13.003z\"></path></svg>');\n\n  const getNextNode = (id) => {\n    if (id) {\n      const nextIndex = builderState.findIndex((obj) => obj.id == id);\n      if (nextIndex == -1) {\n        return mousePosition;\n      }\n      return builderState[nextIndex].position;\n    }\n  };\n\n  const hideToolbar = () => {\n    setIsToolbarActive(false);\n    setId(0);\n  };\n\n  const showToolbar = (id) => {\n    setId(id);\n    setIsToolbarActive(true);\n  };\n\n \nconst handleRenderingChildrens = (message) => {\n  var lastPosition = 70;\n  return message.children.map(function (child) {\n    var yposition = lastPosition;\n    if (child.type === 'card') {\n      lastPosition = lastPosition + child.cards[0].height;\n    } else if (child.type === 'text') {\n      const buttons = child.buttons.length;\n      lastPosition = lastPosition + child.height + (buttons * 40) + 40;\n    } else if (child.type === 'image') {\n      lastPosition = lastPosition + child.height + 20;\n    }\n    return getChildren(message, child, yposition);\n  });\n};\n  \nconst getChildren = (message, child, lastPosition) => {\n  if (child.type === 'text') {\n    var textButtons = child.buttons;\n    var boxHeight = (child.height * 1.05) + (textButtons.length * 40) + 10;\n    return (\n      <Group x={20} y={lastPosition}>\n        <Rect\n          fill=\"#F0F4F7\"\n          cornerRadius={5}\n          height={boxHeight}\n          width={300}\n          stroke=\"lightGrey\"\n          strokeWidth={1}\n          shadowColor=\"#95bbdf\"\n          shadowOpacity={0.5}\n          shadowBlur={7}\n        />\n        <Text\n          x={15}\n          y={7}\n          text={child.value}\n          fontSize={15}\n          lineHeight={1.2}\n          width={280}\n        />\n        {child.buttons.map((button, index) => {\n          var y = (child.height * 1.05) + (40 * index) + 10;\n          return (\n            <Group>\n              { button.next &&\n                    <Edge\n                      height={0}\n                      node1={{ x: message.position.x , y: message.position.y }}\n                      node2={getNextNode(button.next)}\n                    />\n                  }\n              <Rect\n                x={25}\n                y={y}\n                fill=\"#FFFFFF\"\n                cornerRadius={5}\n                height={30}\n                width={250}\n                shadowOpacity={0.5}\n                shadowBlur={7}\n                align={\"center\"}\n              />\n              <Text\n                x={10}\n                y={y + 3}\n                text={button.name}\n                fontSize={15}\n                width={280}\n                lineHeight={1.5}\n                align={\"center\"}\n              />\n              <Circle x={260} y={y + 14} radius={9} fill=\"#8392AB\" strokeWidth={1}\n                onMouseOver={() => { document.body.style.cursor = 'pointer' }}\n                onMouseOut={() => { document.body.style.cursor = 'default' }}\n                onClick={(e) => {\n                  e.cancelBubble = true;\n                  connectButtonEdge(message.id, child.id, button.id)\n                }}\n             />\n            </Group>\n          );\n         })}\n      </Group>\n    );\n  } else if (child.type === 'image') {\n    return getImage(child, lastPosition);\n  } else if (child.type === 'card') {\n    return (\n      <Group x={20} y={lastPosition}>\n        {handleRenderingCards(child)}\n      </Group>\n    );\n  }\n};\n\n\n  const getStageWidth = () => {\n    return sidebar ? window.innerWidth - 280 : window.innerWidth - 90;\n  };\n\n  const setSelectedTrue = (messageId) => {\n    var previousSelected = getSelectedNode(builderState);\n    if (previousSelected >= 0) {\n      setBuilderState(\n        builderState.map((item, index) => {\n          if (index == messageId) {\n            item.isSelected = true;\n          }\n          if (index == previousSelected) {\n            item.isSelected = false;\n          }\n          return item;\n        })\n      );\n    } else {\n      setBuilderState(\n        builderState.map((item, index) => {\n          if (index == messageId) {\n            item.isSelected = true;\n          }\n          return item;\n        })\n      );\n    }\n  };\n\n  const setHoverTrue = (messageId) => {\n    var previousHover = getHoveredNode(builderState);\n    if (previousHover >= 0) {\n      setBuilderState(\n        builderState.map((item, index) => {\n          if (index == messageId) {\n            item.isHover = true;\n          }\n          if (index == previousHover) {\n            item.isHover = false;\n          }\n          return item;\n        })\n      );\n    } else {\n      setBuilderState(\n        builderState.map((item, index) => {\n          if (index == messageId) {\n            item.isHover = true;\n          }\n          return item;\n        })\n      );\n    }\n  };\n\n  const setHoverFalse = (messageId) => {\n    setBuilderState(\n      builderState.map((item, index) => {\n        if (index == messageId) {\n          item.isHover = false;\n        }\n        return item;\n      })\n    );\n  };\n\n  const connectEdge = (messageId) => {\n    if (!showToolOption) {\n      setIsSetting(true);\n      setEdgingMessageId(messageId);\n      setBuilderState(\n        builderState.map((item) => {\n          if (item.id == messageId) {\n            item.next = 'dummy';\n          }\n          return item;\n        })\n      );\n    }\n  };\n\n  const connectButtonEdge = (messageId, childId, buttonId) => {\n    if (!showToolOption) {\n      setIsSetting(true);\n      setEdgingButtonId(buttonId);\n      setBuilderState(\n        builderState.map((item) => {\n          if (item.id == messageId) {\n            item.children.map((child) => {\n              if (child.id == childId) {\n                child.buttons.map((button) => {\n                  if (button.id == buttonId) {\n                    button.next = \"dummy\"\n                  }\n                })\n              }\n            })\n          }\n          return item;\n        })\n      );\n    }\n  }\n\n  const handleMousePosition = (event) => {\n    if (isEdging && !showToolOption) {\n      var point = event.target.getStage().getPointerPosition();\n      setMousePosition({\n        x: point.x,\n        y: point.y,\n      });\n    }\n  };\n\n  const handleClickOnCanvas = () => {\n    if (isEdging) {\n      var hoveredIndex = getHoveredNode(builderState);\n      if (hoveredIndex > 0) {\n        //If the edging is hovered over another message and connect that message\n        var messageIdOfHover = builderState[hoveredIndex].id\n        if (messageIdOfHover != edgingMessageId) {\n          updateMessage({\n            next: messageIdOfHover\n          }, edgingMessageId).then((response) => { \n            setBuilderState(\n              builderState.map((item, index) => {\n                if (item.id == edgingMessageId) {\n                  item.next = messageIdOfHover\n                }\n                return item;\n              })\n            );\n          }).catch((err) => {\n            toast.error(\"Something went wrong\");\n          })\n        }\n      } else {\n        setShowToolOption(true);\n      }\n    }\n  };\n\n  const handleAddMessage = () => {\n    let number = builderState.length + 1;\n    saveMessage({\n      name: 'Send Message #' + number,\n      type: 'default',\n      position_x: 1200,\n      position_y: 60,\n      flow: props.match.params.id\n    }).then((response) => {\n       setBuilderState([...builderState, response.data]);\n\n    }).catch((err) => {\n      toast.error(\"Something went wrong\")\n    })\n  }\n\n  const handleDeleteMessage = (item, index) => {\n    if (index > 0) {\n      //Delete the message\n    builderState.splice(index, 1);\n    //Delete the edging where this message belongs to\n    const messageIndexHavingNextOfDeleteMessage = getMessageIndexWhichHasNextOfGivenMessageId(builderState, item.id);\n    setBuilderState(\n      builderState.map((item, index) => {\n        if (index == messageIndexHavingNextOfDeleteMessage) {\n          item.next = \"\"\n        }\n        return item;\n      })\n    );\n    deleteMessage(item.id).then(() => {\n      setShowToolOption(false);\n      setEdgingMessageId(null);\n      setIsSetting(false);\n    }).catch((err) => {\n        toast.error(\"Something went wrong\");\n      })\n    } else {\n      toast.info(\"You cannot delete the start message\")\n    }\n  }\n\n  const handleDragMessage = (e, item, index) =>  {\n    var updatedPosition = {\n      x: e.target.x(),\n      y: e.target.y(),\n    };\n\n    setBuilderState(\n      builderState.map((item, ind) => {\n        if (ind == index) {\n          item.position = updatedPosition;\n        }\n        return item;\n      })\n    );\n  }\n\n  const updateMessagePosition = (item) => {\n    updateMessage({\n      position_x: item.position.x,\n      position_y: item.position.y\n    }, item.id).catch((err) => {\n      toast.error('Something went wrong')\n    })    \n  }\n\n  const handleToolOptionNewMessageAction = () => {\n    setIsSetting(false);\n    setShowToolOption(false);\n\n    let number = builderState.length + 1;\n    createAndConnectMessage({\n      name: 'Send Message #' + number,\n      type: 'default',\n      position_x: mousePosition.x,\n      position_y: mousePosition.y,\n      flow: props.match.params.id\n    }, edgingMessageId).then((response) => {\n      setBuilderState(\n        builderState.map((item) => {\n          if (item.id == edgingMessageId) {\n            item.next = response.data.id;\n          }\n          return item;\n        })\n      );\n      setBuilderState([...builderState, response.data]);\n\n    }).catch((err) => {\n      toast.error(\"Something went wrong\")\n    })\n  }\n\n  const handleToolOptionConnectFlow = () => {\n    setIsSetting(false);\n    setShowToolOption(false);\n\n    let number = builderState.length + 1;\n    createAndConnectMessage({\n      name: 'Connect Flow #' + number,\n      type: 'flow',\n      position_x: mousePosition.x,\n      position_y: mousePosition.y,\n      flow: props.match.params.id\n    }, edgingMessageId).then((response) => {\n      setBuilderState(\n        builderState.map((item) => {\n          if (item.id == edgingMessageId) {\n            item.next = response.data.id;\n          }\n          return item;\n        })\n      );\n      setBuilderState([...builderState, response.data]);\n\n    }).catch((err) => {\n      toast.error(\"Something went wrong\")\n    })\n  }\n  \n  React.useEffect(() => {\n    getMessages(props.match.params.id)\n      .then((response) => {\n        setBuilderState(response.data)\n      })\n      .catch((err) => {\n        toast.error(\"Something went wrong\")\n      })\n    getFlow(props.match.params.id)\n      .then((response) => {  \n        setFlow(response.data);\n    }).catch((err) => {\n      toast.error(\"Something went wrong\")\n    })\n  }, []);\n\n  const getToolOption = () => {\n    return (\n      <Group  x={mousePosition.x} y={mousePosition.y} zIndex={200}\n        onMouseOver={() => { document.body.style.cursor = 'pointer' }}\n        onMouseOut={() => { document.body.style.cursor = 'default' }}\n      >\n        <Group onClick={handleToolOptionNewMessageAction}>\n          <Rect\n            width={200}\n            height={50}\n            fill=\"#FDFDFD\"\n            strokeWidth={2}\n            shadowColor=\"gray\"\n            shadowOpacity={0.7}\n            shadowBlur={2}\n            onMouseDown={(e) => {\n              e.target.setAttr('fill', ' #eef1f4');\n            }}\n          />\n          <Text\n            x={15}\n            y={15}\n            text=\"+ New Message\"\n            fontFamily={'Roboto'}\n            fontSize={20}\n            fill={'#5850eb'}\n          />\n        </Group>\n        <Group y={50} onClick={handleToolOptionConnectFlow}>\n          <Rect\n            width={200}\n            height={50}\n            fill=\"#FDFDFD\"\n            strokeWidth={2}\n            shadowColor=\"gray\"\n            shadowOpacity={0.7}\n            shadowBlur={2}\n            onMouseDown={(e) => {\n              e.target.setAttr('fill', ' #eef1f4');\n            }}\n          />\n          <Text\n            x={15}\n            y={15}\n            text=\"+ Connect Flow\"\n            fontFamily={'Roboto'}\n            fontSize={20}\n            fill={'#5850eb'}\n          />\n        </Group>\n        <Group y={100}  onClick={() => {\n          setShowToolOption(false);\n          setIsSetting(false);\n          setBuilderState(\n            builderState.map((item) => {\n              if (item.id == edgingMessageId) {\n                item.next = \"\"\n              }\n              return item;\n            })\n          );\n        }}>\n          <Rect\n            width={200}\n            height={50}\n            fill=\"#FDFDFD\"\n            strokeWidth={2}\n            shadowColor=\"gray\"\n            shadowOpacity={0.7}\n            shadowBlur={2}\n            onMouseDown={(e) => {\n              e.target.setAttr('fill', ' #eef1f4');\n            }}\n          />\n          <Text\n            x={15}\n            y={15}\n            text=\"- Cancel\"\n            fontFamily={'Roboto'}\n            fontSize={20}\n            fill={'#5850eb'}\n          />\n        </Group>\n      </Group>\n    );\n  }\n  const getDefaultMessage = (item, index, messageHeight) => {\n    return (\n      <Group\n        x={item.position?.x}\n        y={item.position?.y}\n        draggable\n        onClick={(e) => {\n          showToolbar(item.id);\n          setSelectedTrue(index);\n        }}\n        onMouseEnter={(e) => {\n          setHoverTrue(index);\n        }}\n        onMouseLeave={(e) => {\n          setHoverFalse(index);\n        }}\n        hitOnDragEnabled={true}\n        onDragMove={(e) => {\n          handleDragMessage(e, item, index)\n        }}\n        onDragEnd={() => { updateMessagePosition(item) }}\n      >\n        {index === 0 &&\n          <Group x={10} y={-40}>\n            <Rect cornerRadius={7} stroke={\"green\"} strokeWidth={2} fill=\"#FDFDFD\" width={60} height={30} />\n            <Text\n              x={13}\n              y={8}\n              text={\"Start\"}\n              fontFamily={'Roboto'}\n              fontSize={15}\n              fill={'green'}\n            />\n          </Group>\n        }\n        <Rect\n          cornerRadius={16}\n          height={messageHeight}\n          width={340}\n          fill=\"#FDFDFD\"\n          strokeWidth={1}\n          stroke={ \"#5850EB\"}\n          shadowColor={getShadowColor(item)}\n          shadowOpacity={1}\n          shadowBlur={7}\n        />\n        {item.isHover &&\n          <>\n            <Rect\n              width={50} height={30} x={330} y={10} />\n            <URLImage\n              onMouseOver={() => { document.body.style.cursor = 'pointer' }}\n              onMouseOut={() => { document.body.style.cursor = 'default' }}\n              onClick={() => { handleDeleteMessage(item, index) }}\n              image={TrashIcon} x={345} y={10} height={25} width={25} />\n          </>\n        }\n        <Circle x={30} y={30} radius={15} fill=\"#5850EB\" />\n        <Text\n          x={55}\n          y={22}\n          text={item.name}\n          fontFamily={'Roboto'}\n          fontSize={20}\n          fill={'gray'}\n        />\n        <Group\n          x={340}\n          y={messageHeight - 20}\n          onMouseOver={() => { document.body.style.cursor = 'pointer' }}\n          onMouseOut={() => { document.body.style.cursor = 'default' }}\n          onClick={(e) => {\n            e.cancelBubble = true;\n            connectEdge(item.id)\n          }}>\n          <Circle radius={9} fill=\"#8392AB\" strokeWidth={1} />\n          <Text\n            x={-80}\n            y={-8}\n            text=\"Next Step\"\n            fontFamily={'Roboto'}\n            fontSize={15}\n            fontWeight={300}\n            fill={'gray'}\n          />\n        </Group>\n        {typeof item.children == 'object' ? (\n          <>\n            {item.children.length > 0 ? (\n              handleRenderingChildrens(item)\n            ) : (\n                <React.Fragment key={item}>\n                  <Group>\n                    <Rect\n                      x={20}\n                      y={75}\n                      height={60}\n                      width={300}\n                      fill=\"#EEF1F4\"\n                      cornerRadius={16}\n                    />\n                    <Text\n                      text=\"No Content\"\n                      x={110}\n                      y={95}\n                      fontFamily={'Roboto'}\n                      fontSize={20}\n                      fontWeight={300}\n                      fill={'blue'}\n                    />\n                  </Group>\n                </React.Fragment>\n              )}\n          </>\n        ) : null}\n      </Group>\n    );\n  }\n  const getFlowMessage = (item, index) => {\n    return (\n      <Group\n      x={item.position?.x}\n      y={item.position?.y}\n      draggable\n      onClick={(e) => {\n        showToolbar(item.id);\n        setSelectedTrue(index);\n      }}\n      onMouseEnter={(e) => {\n        setHoverTrue(index);\n      }}\n      onMouseLeave={(e) => {\n        setHoverFalse(index);\n      }}\n      hitOnDragEnabled={true}\n      onDragMove={(e) => {\n        handleDragMessage(e, item, index)\n      }}\n      onDragEnd={() => { updateMessagePosition(item) }}\n    >\n      <Rect\n        cornerRadius={16}\n        height={200}\n        width={340}\n        fill=\"#FDFDFD\"\n        stroke={ \"#f9bf3b\"}\n        strokeWidth={1}\n        shadowColor={getShadowColor(item)}\n        shadowOpacity={1}\n        shadowBlur={7}\n      />\n      {item.isHover &&\n        <>\n          <Rect\n            width={50} height={30} x={330} y={10} />\n          <URLImage\n            onMouseOver={() => { document.body.style.cursor = 'pointer' }}\n            onMouseOut={() => { document.body.style.cursor = 'default' }}\n            onClick={() => { handleDeleteMessage(item, index) }}\n            image={TrashIcon} x={345} y={10} height={25} width={25} />\n        </>\n      }\n      <Circle x={30} y={30} radius={15} fill=\"#f9bf3b\" />\n      <Text\n        x={55}\n        y={22}\n        text={item.name}\n        fontFamily={'Roboto'}\n        fontSize={20}\n        fill={'gray'}\n        />\n        {item.children.length > 0 ? (\n          <Group>\n          <Rect\n            x={20}\n            y={75}\n            height={60}\n            width={300}\n            stroke=\"green\"\n            strokeWidth={1}\n            fill=\"#EEF1F4\"\n            cornerRadius={16}\n          />\n          <Text\n            text={item.children[0].name}\n            x={40}\n            y={95}\n            fontFamily={'Roboto'}\n            fontSize={20}\n            fontWeight={300}\n              fill={\"#f9bf3b\"}\n              align={\"center\"}\n          />\n        </Group>\n        ) : (\n            <React.Fragment key={item}>\n              <Group>\n                <Rect\n                  x={20}\n                  y={75}\n                  height={60}\n                  width={300}\n                  fill=\"#EEF1F4\"\n                  cornerRadius={16}\n                />\n                <Text\n                  text=\"Select Flow\"\n                  x={110}\n                  y={95}\n                  fontFamily={'Roboto'}\n                  fontSize={20}\n                  fontWeight={300}\n                  fill={\"#f9bf3b\"}\n                  align={\"center\"}\n                />\n              </Group>\n            </React.Fragment>\n          )}\n    </Group>\n    );\n  }\n  const getMessageBox = (item, index, messageHeight) => {\n    if (item.type == \"default\") {\n      return getDefaultMessage(item, index, messageHeight);\n    } else if (item.type == \"flow\") {\n      return getFlowMessage(item, index);\n    }\n  }\n  \n\n  return (\n    <FlowBuilderWrapper>\n      {flow && <div className=\"header\">{flow.name}</div>}\n      <div className=\"stage-action\">\n        <BiMessageSquareAdd\n          onClick={handleAddMessage}\n        />\n      </div>\n      {isToolbarActive && <Toolbar id={id} hideToolbar={hideToolbar} bot={flow.bot} flow={flow.id} />}\n      <Stage\n        width={getStageWidth()}\n        height={window.innerHeight - 70}\n        scaleX={state.layerScale}\n        scaleY={state.layerScale}\n        onMouseMove={handleMousePosition}\n        x={0}\n        y={0}\n        onClick={handleClickOnCanvas}>\n        <Layer name=\"layer_1\" draggable onWheel={handleWheel}>\n          <Rect\n            x={-window.innerWidth}\n            y={-window.innerHeight}\n            width={window.innerWidth * 3}\n            height={window.innerHeight * 3}\n            fill=\"\"\n          />\n          {showToolOption && getToolOption()}\n          {builderState &&\n            typeof builderState == 'object' &&\n            builderState.map((item, index) => {\n              var messageHeight = calculateHeightOfMessageBox(item.children);\n              return (\n                <React.Fragment key={item.id}>\n                  {(item.type===\"default\" && item.next) ? (\n                    <Edge\n                      height={messageHeight}\n                      node1={item.position}\n                      node2={getNextNode(item.next)}\n                    />\n                  ) : null}\n                  {getMessageBox(item, index, messageHeight)}\n                  </React.Fragment>\n              );\n            })}\n        </Layer>\n      </Stage>\n    </FlowBuilderWrapper>\n  );\n};\nconst getShadowColor = (item) => {\n  if (item.isSelected) {\n    if (item.type == \"default\") {\n      return '#1e824c';\n    } else if (item.type == \"flow\") {\n      return \"#f9ae23\";\n    }\n   \n  } else if (item.isHover) {\n    if (item.type == \"default\") {\n      return '#8078FF';\n    } else if (item.type == \"flow\") {\n      return \"#f9bf3b\";\n    }\n  } else {\n    return '#95bbdf';\n  }\n};\n\nconst getSelectedNode = (state) => {\n  return state.findIndex((obj) => obj.isSelected == true);\n};\n\nconst getMessageIndexWhichHasNextOfGivenMessageId = (state, messageId) => {\n  return state.findIndex((obj) => obj.next == messageId);\n}\n\nconst getHoveredNode = (state) => {\n  return state.findIndex((obj) => obj.isHover == true);\n};\n\nexport default withRouter(FlowBuilder);\n","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Text/index.tsx",["312","313","314","315","316","317","318","319","320","321"],"import React, { useEffect, useState, useRef, useContext } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { BuilderContext } from '../../../../../services/Builder/BuilderProvider';\nimport { AddTextWrapper } from './styles';\nimport { AddTextButton, ContentButton } from '../../../../common/buttons';\nimport { BiTrash } from 'react-icons/bi';\nimport Textarea from 'react-expanding-textarea';\nimport { updateText, deleteText } from '../../../../../apis/texts';\nimport { toast } from 'react-toastify';\nimport { saveButton } from '../../../../../apis/buttons';\nimport { v4 as uuidv4 } from 'uuid';\n\n\nconst FormText = ({ messageId, childId }) => {\n  const [builderState, setBuilderState] = useContext(BuilderContext);\n  const { register, handleSubmit } = useForm({ mode: 'onChange' });\n  const [isChangingBody, setIsChangingBody] = useState(false);\n\n  const textAreaRef = useRef<HTMLTextAreaElement>(null);\n\n  //Find index of specific object using findIndex method.\n  const childIndex = builderState[messageId].children.findIndex(\n    (obj) => obj.id == childId\n  );\n\n  const onTextChange = (data) => {\n    var height = textAreaRef.current.scrollHeight;\n    updateText({\n      text: data.text,\n      height: height\n    }, childId).then((response) => {\n      setBuilderState(\n        builderState.map((item, index) => {\n          if (index == messageId) {\n            item.children.map((child, ind) => {\n              if (ind == childIndex) {\n                child.value = data.text;\n                child.height = height;\n              }\n            });\n          }\n          return item;\n        })\n      );\n    }).catch((err) => {\n      toast.error(\"Something went wrong\");\n    })\n  };\n\n  const handleDelete = () => {\n    var height = builderState[messageId].height - textAreaRef.current.scrollHeight;\n    deleteText(childId)\n      .then(() => {\n        setBuilderState(\n          builderState.map((item, index) => {\n            if (index == messageId) {\n              item.height = height;\n              item.children.splice(childIndex,1)\n            }\n            return item;\n          })\n        );\n      })\n      .catch((err) => {\n        toast.error(\"Something went wrong\");\n    })\n  };\n\n  const handleAddButton = () => {\n    const buttonNumber = builderState[messageId].children[childIndex].buttons.length + 1;\n    saveButton({\n      name: 'Button #' + buttonNumber,\n      parent_type: 'text',\n      parent: childId\n    }).then((response) => {\n      setBuilderState(\n        builderState.map((item, index) => {\n          if (index == messageId) {\n            item.children.map((child) => {\n              if (child.id == childId) {\n                child.buttons.push(response.data);\n              }\n            });\n          }\n          return item;\n        })\n      );\n    }).catch((err) => {\n      toast.error(\"Something went wrong\")\n    })      \n  }\n\n  useEffect(() => {\n    if (textAreaRef.current) {\n      register(textAreaRef.current, {required: true, minLength: 3});\n    }\n  }, []);\n\n  return (\n    <AddTextWrapper>\n      <button className=\"action-btn\">\n        <BiTrash onClick={handleDelete} />\n      </button>\n      <div className={isChangingBody ? 'card-body active' : 'card-body'}>\n        <form onBlur={handleSubmit(onTextChange)}>\n          <Textarea\n            maxLength={500}\n            placeholder=\"Enter your text here\"\n            onBlur={() => setIsChangingBody(false)}\n            defaultValue={builderState[messageId].children[childIndex].value}\n            id=\"text\"\n            name=\"text\"\n            ref={textAreaRef}\n            onClick={() => setIsChangingBody(true)}\n          />\n        </form>\n      </div>\n      <div className=\"card-base\">\n        {builderState[messageId].children[childIndex].buttons && builderState[messageId].children[childIndex].buttons.map((button) => {\n          return (\n            <React.Fragment key={button.id}>\n              <ContentButton>{button.name}</ContentButton>\n            </React.Fragment>\n          );\n        })}\n      <AddTextButton height=\"4rem\" width=\"100%\" onClick={handleAddButton}>\n        Add Button\n      </AddTextButton>\n      </div>\n    </AddTextWrapper>\n  );\n};\n\nexport default FormText;\n",["322","323"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Image/index.tsx",["324","325","326","327","328","329","330"],"import React, { useEffect, useRef, useContext } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { ImageWrapper } from './styles';\nimport { BuilderContext } from '../../../../../services/Builder/BuilderProvider';\nimport { AddTextButton } from '../../../../common/buttons';\nimport { BiImageAdd, BiTrash } from 'react-icons/bi';\nimport { uploadImage, deleteImage } from '../../../../../apis/images';\nimport { toast } from 'react-toastify';\n\nconst FormImage = ({ messageId, childId }) => {\n  const [builderState, setBuilderState] = useContext(BuilderContext);\n  const { register, handleSubmit } = useForm({ mode: 'onChange' });\n\n  const imageRef = useRef<HTMLInputElement>(null);\n\n  //Find index of specific object using findIndex method.\n  const childIndex = builderState[messageId].children.findIndex(\n    (obj) => obj.id == childId\n  );\n\n  const image = builderState[messageId].children[childIndex];\n\n  const onSubmit = (data) => {\n    let reader = new FileReader();\n    const formData = new FormData();\n\n    formData.append('image', data.image[0]);\n    formData.append('name', data.image[0].name);\n    \n    reader.onloadend = () => {\n      var height = 180;\n      uploadImage(formData, childId).then((response) => {\n        setBuilderState(\n          builderState.map((item, index) => {\n            if (index == messageId) {\n              item.children.map((child, ind) => {\n                if (ind == childIndex) {\n                  child.selectedImage = data.image[0];\n                  child.imagePreviewUrl = reader.result;\n                  child.height = height;\n                }\n              });\n            }\n            return item;\n          })\n        );\n      }).catch((err) => {\n        toast.error(\"Something went wrong\")\n      })\n    };\n\n    reader.readAsDataURL(data.image[0]);\n  };\n\n  const handleDelete = () => {\n    deleteImage(childId).then((response) => {\n      setBuilderState(\n        builderState.map((item, index) => {\n          if (index == messageId) {\n            item.height -= 150;\n            item.children.splice(childIndex,1)\n          }\n          return item;\n        })\n      );\n    }).catch((err) => {\n      toast.error(\"Something went wrong\");\n    })\n   \n  };\n\n  useEffect(() => {\n    if (imageRef.current) {\n      register(imageRef.current);\n    }\n  });\n\n  return (\n    <ImageWrapper>\n      {image.imagePreviewUrl ? (\n        <div>\n          <img src={image.imagePreviewUrl} alt=\"image\" />\n          {/* <AddTextButton height=\"4rem\" width=\"100%\">\n            Add Button\n          </AddTextButton> */}\n        </div>\n      ) : (\n        <form onChange={handleSubmit(onSubmit)}>\n          <input\n            ref={imageRef}\n            type=\"file\"\n            id={'file' + childIndex}\n            name=\"image\"\n            accept=\"image/*\"\n          />\n          <label htmlFor={'file' + childIndex}>\n            <BiImageAdd />\n            <p>Upload image</p>\n          </label>\n        </form>\n      )}\n      <button className=\"action-btn\">\n        <BiTrash onClick={handleDelete} />\n      </button>\n    </ImageWrapper>\n  );\n};\n\nexport default FormImage;\n","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Text/styles.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/index.tsx",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/routes/ProtectedRoute.tsx",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/services/Modal/ModalProvider.tsx",["331"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/main/Templates/index.tsx",["332"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/main/Bots/index.tsx",["333","334","335","336","337","338","339"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/common/form.ts",["340"],"import styled from 'styled-components'\nimport { grey } from '../../styles/theme';\n\nexport const InputField = styled.input<{isError?: boolean}>`\n  background: ${props => props.isError ? '#FFE4E4' : '#F7F7F7'};\n  border-radius: 7px;\n  border: 1px solid rgba(0, 0, 0, 0.1);\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.1);\n  box-sizing: border-box;\n  min-height: 3.8rem;\n  min-width: 30rem;\n  padding: .8rem;\n  outline: none;\n  font-family: Roboto, sans-serif;\n  font-style: normal;\n  font-weight: 400;\n  font-size: 1.4rem;\n  color: #000;\n  width: 100%;\n\n\n  &:focus {\n    font-weight: 400;\n    box-shadow: 0 0 0 3px rgba(164, 202, 254, 0.45);\n    border-color: #5850EC;\n  }\n\n  &::placeholder {\n    color: #d7d7d7;\n    font-size: 1.2rem;\n  }\n`;\n\nexport const FormLink = styled.a`\n  text-decoration: none;\n  font-size: 1.2rem;\n  font-family: Roboto, sans-serif;\n  color: #565252;\n\n  &:hover{\n    text-decoration-line: underline;\n    color: #000;\n  }\n`;\n","/home/rabinson/Freelancing/ShipboardBot/frontend/src/apis/bots.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/common/Dropdown/styles.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/layout/AuthLayout.tsx",["341"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Bots/DeleteModal.tsx",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Bots/EditModal.tsx",["342","343"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Flows/EditModal.tsx",["344","345"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/constants/urls.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/front/feature/index.tsx",["346"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/front/navbar/index.tsx",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/apis/cards.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/front/info/styles.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/front/feature/styles.ts",["347"],"import styled from 'styled-components';\nimport { darkerGrey } from '../../../styles/theme';\n\nexport const FeatureWrapper = styled.section`\n  margin: auto;\n  max-width: 120rem;\n  margin-top: 3rem;\n  \n  .heading {\n    text-align: center;\n    margin-top: 2rem;\n  }\n`;\n\nexport const FeatureGrid = styled.div`\nmargin-top:1rem;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  text-align: none;\n\n  .feature {\n    background-color: ${props => props.theme.white};\n    border-radius: 20px;\n    box-shadow: 0px 4px 24px rgba(0, 0, 0, 0.25);    height: 24rem;\n    margin: 2rem;\n    padding: 2rem;\n    width: 35rem;\n\n    img {\n      width: 4rem;\n      height: auto;\n      margin-top: 1rem;\n    }\n  }\n`;\n","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/front/navbar/styles.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Image/styles.ts",[],["348","349"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Sidebar/styles.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Card/styles.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/common/buttons.ts",["350"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/apis/buttons.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Modals/styles.ts",[],["351","352"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/main/Flows/helper.tsx",["353","354"],"import React from 'react';\nimport { Rect, Image, Text, Group, Shape, Circle } from 'react-konva';\nimport useImage from 'use-image';\n\nexport const Edge = ({ height, node1, node2 }) => {\n  node1 = {\n    x: node1.x + 350,\n    y: node1.y + height - 20\n  }\n  node2 = {\n    x: node2.x,\n    y: node2.y + 20\n  }\n  const p1 = { x: (node1.x + node2.x) / 2, y: node1.y };\n  const p2 = { x: (node1.x + node2.x) / 2, y: node2.y };\n  return (\n    <Shape\n      sceneFunc={(context, shape) => {\n        context.beginPath();\n        context.moveTo(node1.x, node1.y);\n        context.bezierCurveTo(p1.x, p1.y, p2.x, p2.y, node2.x, node2.y);\n        // (!) Konva specific method, it is very important\n        context.fillStrokeShape(shape);\n      }}\n      stroke=\"black\"\n      strokeWidth={2}\n    />\n  );\n};\n\nexport const calculateHeightOfMessageBox = (message) => {\n  var height = 110;\n\n  if (typeof message == 'object') {\n    if (message.length > 0) {\n      message.forEach((item) => {\n        if (item.type === 'card') {\n          var activeCard = getActiveCard(item.cards);\n          height +=item.cards[activeCard].height + 20;\n        } else if (item.type === 'text') { \n          const buttons = item.buttons.length;\n          height += (item.height * 1.05) + (buttons * 40) + 20;\n        } else {\n          height += item.height + 20;\n        }\n      });\n    } else {\n      height += 90;\n    }\n  }\n  return height;\n};\nexport const getImage = (children, lastPosition) => {\n  if (children.imagePreviewUrl) {\n    return (\n      <URLImage\n        x={25}\n        y={lastPosition}\n        image={children.imagePreviewUrl}\n        height={180}\n        width={300}\n      />\n    );\n  } else {\n    return (\n      <Group>\n        <Rect\n          x={20}\n          y={lastPosition}\n          cornerRadius={5}\n          height={children.height}\n          width={300}\n          fill=\"#E1E5EA\"\n          stroke=\"#8392AB\"\n          dash={[10, 5]}\n          strokeWidth={1}\n          shadowColor=\"#95bbdf\"\n          shadowOpacity={0.5}\n          shadowBlur={7}\n        />\n        <Text\n          x={120}\n          y={lastPosition + 65}\n          text={'Upload Image'}\n          fontSize={16}\n        />\n      </Group>\n    );\n  }\n};\n\nexport const handleRenderingCards = (children) => {\n  var activeCard = getActiveCard(children.cards);\n\n  return (\n    <React.Fragment>\n      <Rect\n        x={0}\n        y={0}\n        cornerRadius={5}\n        fill=\"#F2F5F7\"\n        height={children.cards[activeCard].height - 30}\n        width={300}\n        stroke=\"lightGrey\"\n        strokeWidth={1}\n        shadowColor=\"#95bbdf\"\n        shadowOpacity={0.5}\n        shadowBlur={7}\n      />\n      {getCardImage(children.cards[activeCard])}\n      <Text\n        x={10}\n        width={260}\n        y={185}\n        text={children.cards[activeCard].heading}\n        fontFamily={'Roboto'}\n        fontSize={16}\n        fontStyle={'bold'}\n        fill={'black'}\n      />\n      <Text\n        x={10}\n        y={210}\n        width={280}\n        text={children.cards[activeCard].body}\n        fontFamily={'Roboto'}\n        fontSize={15}\n        fill={'black'}\n        lineHeight={1.5}\n      />\n    </React.Fragment>\n  );\n};\nconst getCardImage = (children) => {\n  if (children.imagePreviewUrl) {\n    return (\n      <URLImage\n        x={0}\n        y={0}\n        image={children.imagePreviewUrl}\n        height={160}\n        width={300}\n      />\n    );\n  } else {\n    return (\n      <Group>\n        <Rect\n          x={20}\n          y={20}\n          fill=\"#E1E5EA\"\n          stroke=\"#8392AB\"\n          cornerRadius={5}\n          height={150}\n          width={260}\n          dash={[10, 5]}\n          strokeWidth={1}\n          shadowColor=\"#95bbdf\"\n          shadowOpacity={0.5}\n          shadowBlur={7}\n        />\n        <Text x={100} y={85} text={'Upload Image'} fontSize={16} />\n      </Group>\n    );\n  }\n};\n\ntype URLImageType = {\n  x: any,\n  y: any,\n  image: any,\n  height: any,\n  width: any,\n  onMouseOver?: any,\n  onMouseOut?: any,\n  onClick?: any\n}\nexport const URLImage = (props:URLImageType) => {\n  const [img] = useImage(props.image);\n  return <Image image={img} x={props.x} y={props.y} height={props.height} width={props.width} onMouseOver={props.onMouseOver} onMouseOut={props.onMouseOut} onClick={props.onClick}/>;\n};\n\nexport const getActiveCard = (cards) => {\n  var activeCard = cards.findIndex((obj) => obj.active == true);\n  return activeCard;\n};\n\nexport const handleWheel = (e) => {\n  e.evt.preventDefault();\n\n  const scaleBy = 0.9;\n  const stage = e.target.getStage();\n  const layer = stage.find('.layer_1')[0];\n\n  const oldScale = layer.scaleX();\n  const newScale = e.evt.deltaY > 0 ? oldScale * scaleBy : oldScale / scaleBy;\n  layer.scale({ x: newScale, y: newScale });\n\n  const layerPointerPosition = getRelativePointerPosition(layer);\n  const correctedLayerPointerPosition = {\n    x: layer.x() + layerPointerPosition.x * newScale,\n    y: layer.y() + layerPointerPosition.y * newScale,\n  };\n\n  const mousePointTo = {\n    x: correctedLayerPointerPosition.x / oldScale - layer.x() / oldScale,\n    y: correctedLayerPointerPosition.y / oldScale - layer.y() / oldScale,\n  };\n\n  const newLayerPos = {\n    x:\n      -(mousePointTo.x - correctedLayerPointerPosition.x / newScale) * newScale,\n    y:\n      -(mousePointTo.y - correctedLayerPointerPosition.y / newScale) * newScale,\n  };\n\n  layer.position(newLayerPos);\n  stage.draw();\n};\n\nexport const getRelativePointerPosition = (node) => {\n  // returns mouse pointer position relative to the input node\n  var transform = node.getAbsoluteTransform().copy();\n  transform.invert();\n  var pos = node.getStage().getPointerPosition();\n  return transform.point(pos);\n};\n","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Toolbar/styles.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/styles/global.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/styles/mediaQueries.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/utils/storage.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/auth/LoginPage.tsx",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/main/Dashboard/index.tsx",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/common/typography.ts",["355","356"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/common/table.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/layout/AppLayout.tsx",["357","358"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Bots/CreateModal.tsx",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/services/Builder/BuilderProvider.tsx",["359","360"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/front/header/styles.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/utils/pagination.ts",["361"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/apis/texts.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Sidebar/index.tsx",["362","363","364","365","366"],"import React, { useEffect, useRef, Ref } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport logo from '../../../assets/images/logo-light.png';\nimport shortLogo from '../../../assets/images/logo-short.png';\nimport avatar from '../../../assets/images/avatar.jpg';\nimport { AiOutlineDashboard, AiOutlineRobot } from 'react-icons/ai';\nimport { TiFlowMerge } from 'react-icons/ti';\nimport { HiTemplate } from 'react-icons/hi';\nimport { IoSettingsSharp, IoLogOut } from 'react-icons/io5';\nimport { getAuthUser, logOut } from '../../../apis/auth';\nimport { useAuthDispatch } from '../../../services/Auth/AuthProvider';\nimport {\n  SidebarWrapper,\n  SidebarMenu,\n  LogoWrapper,\n  UserInfoWrapper,\n  MenuItem,\n  ToggleBar,\n} from './styles';\nimport { BiChevronsLeft, BiChevronsRight } from 'react-icons/bi';\n\ninterface SidebarProps {\n  handleSidebarState: (isOpen: boolean) => void;\n}\n\nconst Sidebar: React.FC<SidebarProps> = ({ handleSidebarState }) => {\n  const [isOpen, setIsOpen] = React.useState(true);\n  const nameRef = useRef<HTMLHeadingElement>(null);\n  const history = useHistory();\n  const authDispatch = useAuthDispatch();\n\n  useEffect(() => {\n    getAuthUser().then((response) => {\n      var x = document.getElementById('username');\n      if (x) {\n        x.innerHTML = response.data.name;\n      }\n    });\n\n    handleSidebarState(isOpen);\n  }, [isOpen]);\n\n  const handleLogOut = (event: any) => {\n    event.preventDefault();\n    logOut().then((response) => {\n      authDispatch({\n        type: 'LOGOUT',\n      });\n      history.push('/');\n    });\n  };\n\n  return (\n    <SidebarWrapper>\n      <SidebarMenu isOpen={isOpen}>\n        <LogoWrapper>\n          <img src={isOpen ? logo : shortLogo} alt=\"Logo\" />\n        </LogoWrapper>\n        <UserInfoWrapper isOpen={isOpen}>\n          <img src={avatar} alt=\"Avatar\" />\n          <div className=\"user-info\">\n            <h2 ref={nameRef} id=\"username\"></h2>\n            {/* <p>Profile Setting</p> */}\n          </div>\n        </UserInfoWrapper>\n        <div className=\"menu_list\">\n          <div className=\"menu_list-top\">\n            <Link to=\"/app\">\n              <MenuItem isActive isOpen={isOpen}>\n                <AiOutlineDashboard className=\"menu-icon\" />\n                <p>Dashboard</p>\n              </MenuItem>\n            </Link>\n            <Link to=\"/bots\">\n              <MenuItem isOpen={isOpen}>\n                <AiOutlineRobot className=\"menu-icon\" />\n                <p>Bots</p>\n              </MenuItem>\n            </Link>\n            <Link to=\"/templates\">\n              <MenuItem isOpen={isOpen}>\n                <HiTemplate className=\"menu-icon\" />\n                <p>Templates</p>\n              </MenuItem>\n            </Link>\n          </div>\n          <div className=\"menu_list-bottom\">\n            {/* <Link to=\"/settings\">\n              <MenuItem isOpen={isOpen}>\n                <IoSettingsSharp className=\"menu-icon\" />\n                <p>Settings</p>\n              </MenuItem>\n            </Link> */}\n            <MenuItem isOpen={isOpen} onClick={handleLogOut}>\n              <IoLogOut className=\"menu-icon\" />\n              <p>Logout</p>\n            </MenuItem>\n          </div>\n        </div>\n      </SidebarMenu>\n      <ToggleBar onClick={() => setIsOpen(!isOpen)}>\n        {isOpen && <BiChevronsLeft />}\n        {!isOpen && <BiChevronsRight />}\n      </ToggleBar>\n    </SidebarWrapper>\n  );\n};\n\nexport default Sidebar;\n","/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/main/Flows/index.tsx",["367","368","369","370","371"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/common/grid.ts",[],{"ruleId":"372","severity":1,"message":"373","line":1,"column":39,"nodeType":"374","messageId":"375","endLine":1,"endColumn":45},{"ruleId":"372","severity":1,"message":"376","line":1,"column":47,"nodeType":"374","messageId":"375","endLine":1,"endColumn":56},{"ruleId":"377","severity":1,"message":"378","line":29,"column":59,"nodeType":"379","messageId":"380","endLine":29,"endColumn":61},{"ruleId":"377","severity":1,"message":"378","line":37,"column":19,"nodeType":"379","messageId":"380","endLine":37,"endColumn":21},{"ruleId":"377","severity":1,"message":"378","line":61,"column":21,"nodeType":"379","messageId":"380","endLine":61,"endColumn":23},{"ruleId":"377","severity":1,"message":"378","line":78,"column":21,"nodeType":"379","messageId":"380","endLine":78,"endColumn":23},{"ruleId":"377","severity":1,"message":"378","line":182,"column":19,"nodeType":"379","messageId":"380","endLine":182,"endColumn":21},{"ruleId":"377","severity":1,"message":"378","line":207,"column":19,"nodeType":"379","messageId":"380","endLine":207,"endColumn":21},{"ruleId":"377","severity":1,"message":"378","line":230,"column":19,"nodeType":"379","messageId":"380","endLine":230,"endColumn":21},{"ruleId":"381","replacedBy":"382"},{"ruleId":"383","replacedBy":"384"},{"ruleId":"381","replacedBy":"385"},{"ruleId":"383","replacedBy":"386"},{"ruleId":"372","severity":1,"message":"387","line":2,"column":10,"nodeType":"374","messageId":"375","endLine":2,"endColumn":15},{"ruleId":"372","severity":1,"message":"388","line":18,"column":10,"nodeType":"374","messageId":"375","endLine":18,"endColumn":19},{"ruleId":"377","severity":1,"message":"389","line":24,"column":77,"nodeType":"379","messageId":"380","endLine":24,"endColumn":79},{"ruleId":"390","severity":1,"message":"391","line":44,"column":6,"nodeType":"392","endLine":44,"endColumn":28,"suggestions":"393"},{"ruleId":"372","severity":1,"message":"376","line":1,"column":27,"nodeType":"374","messageId":"375","endLine":1,"endColumn":36},{"ruleId":"372","severity":1,"message":"394","line":5,"column":10,"nodeType":"374","messageId":"375","endLine":5,"endColumn":23},{"ruleId":"372","severity":1,"message":"395","line":7,"column":16,"nodeType":"374","messageId":"375","endLine":7,"endColumn":22},{"ruleId":"372","severity":1,"message":"396","line":25,"column":9,"nodeType":"374","messageId":"375","endLine":25,"endColumn":19},{"ruleId":"372","severity":1,"message":"397","line":26,"column":9,"nodeType":"374","messageId":"375","endLine":26,"endColumn":21},{"ruleId":"377","severity":1,"message":"378","line":31,"column":21,"nodeType":"379","messageId":"380","endLine":31,"endColumn":23},{"ruleId":"377","severity":1,"message":"378","line":40,"column":25,"nodeType":"379","messageId":"380","endLine":40,"endColumn":27},{"ruleId":"377","severity":1,"message":"389","line":50,"column":25,"nodeType":"379","messageId":"380","endLine":50,"endColumn":27},{"ruleId":"377","severity":1,"message":"378","line":65,"column":23,"nodeType":"379","messageId":"380","endLine":65,"endColumn":25},{"ruleId":"398","severity":1,"message":"399","line":66,"column":49,"nodeType":"400","messageId":"401","endLine":66,"endColumn":51},{"ruleId":"377","severity":1,"message":"378","line":67,"column":25,"nodeType":"379","messageId":"380","endLine":67,"endColumn":27},{"ruleId":"377","severity":1,"message":"378","line":71,"column":27,"nodeType":"379","messageId":"380","endLine":71,"endColumn":29},{"ruleId":"377","severity":1,"message":"378","line":91,"column":21,"nodeType":"379","messageId":"380","endLine":91,"endColumn":23},{"ruleId":"377","severity":1,"message":"378","line":93,"column":23,"nodeType":"379","messageId":"380","endLine":93,"endColumn":25},{"ruleId":"377","severity":1,"message":"378","line":95,"column":27,"nodeType":"379","messageId":"380","endLine":95,"endColumn":29},{"ruleId":"377","severity":1,"message":"378","line":98,"column":27,"nodeType":"379","messageId":"380","endLine":98,"endColumn":29},{"ruleId":"377","severity":1,"message":"378","line":114,"column":48,"nodeType":"379","messageId":"380","endLine":114,"endColumn":50},{"ruleId":"377","severity":1,"message":"378","line":127,"column":28,"nodeType":"379","messageId":"380","endLine":127,"endColumn":30},{"ruleId":"377","severity":1,"message":"378","line":143,"column":23,"nodeType":"379","messageId":"380","endLine":143,"endColumn":25},{"ruleId":"377","severity":1,"message":"378","line":145,"column":25,"nodeType":"379","messageId":"380","endLine":145,"endColumn":27},{"ruleId":"377","severity":1,"message":"378","line":147,"column":27,"nodeType":"379","messageId":"380","endLine":147,"endColumn":29},{"ruleId":"377","severity":1,"message":"378","line":177,"column":21,"nodeType":"379","messageId":"380","endLine":177,"endColumn":23},{"ruleId":"398","severity":1,"message":"399","line":178,"column":44,"nodeType":"400","messageId":"401","endLine":178,"endColumn":46},{"ruleId":"377","severity":1,"message":"378","line":179,"column":23,"nodeType":"379","messageId":"380","endLine":179,"endColumn":25},{"ruleId":"398","severity":1,"message":"399","line":180,"column":43,"nodeType":"400","messageId":"401","endLine":180,"endColumn":45},{"ruleId":"377","severity":1,"message":"378","line":181,"column":25,"nodeType":"379","messageId":"380","endLine":181,"endColumn":27},{"ruleId":"377","severity":1,"message":"378","line":206,"column":21,"nodeType":"379","messageId":"380","endLine":206,"endColumn":23},{"ruleId":"398","severity":1,"message":"399","line":207,"column":44,"nodeType":"400","messageId":"401","endLine":207,"endColumn":46},{"ruleId":"377","severity":1,"message":"378","line":208,"column":23,"nodeType":"379","messageId":"380","endLine":208,"endColumn":25},{"ruleId":"398","severity":1,"message":"399","line":209,"column":43,"nodeType":"400","messageId":"401","endLine":209,"endColumn":45},{"ruleId":"377","severity":1,"message":"378","line":210,"column":25,"nodeType":"379","messageId":"380","endLine":210,"endColumn":27},{"ruleId":"377","severity":1,"message":"378","line":230,"column":21,"nodeType":"379","messageId":"380","endLine":230,"endColumn":23},{"ruleId":"398","severity":1,"message":"402","line":253,"column":70,"nodeType":"400","messageId":"403","endLine":253,"endColumn":72},{"ruleId":"404","severity":1,"message":"405","line":261,"column":23,"nodeType":"406","endLine":261,"endColumn":74},{"ruleId":"381","replacedBy":"407"},{"ruleId":"383","replacedBy":"408"},{"ruleId":"372","severity":1,"message":"409","line":4,"column":30,"nodeType":"374","messageId":"375","endLine":4,"endColumn":35},{"ruleId":"372","severity":1,"message":"410","line":32,"column":10,"nodeType":"374","messageId":"375","endLine":32,"endColumn":23},{"ruleId":"372","severity":1,"message":"411","line":32,"column":25,"nodeType":"374","messageId":"375","endLine":32,"endColumn":41},{"ruleId":"372","severity":1,"message":"412","line":35,"column":10,"nodeType":"374","messageId":"375","endLine":35,"endColumn":24},{"ruleId":"372","severity":1,"message":"413","line":38,"column":17,"nodeType":"374","messageId":"375","endLine":38,"endColumn":25},{"ruleId":"377","severity":1,"message":"378","line":48,"column":64,"nodeType":"379","messageId":"380","endLine":48,"endColumn":66},{"ruleId":"377","severity":1,"message":"378","line":49,"column":21,"nodeType":"379","messageId":"380","endLine":49,"endColumn":23},{"ruleId":"377","severity":1,"message":"378","line":173,"column":21,"nodeType":"379","messageId":"380","endLine":173,"endColumn":23},{"ruleId":"377","severity":1,"message":"378","line":176,"column":21,"nodeType":"379","messageId":"380","endLine":176,"endColumn":23},{"ruleId":"377","severity":1,"message":"378","line":185,"column":21,"nodeType":"379","messageId":"380","endLine":185,"endColumn":23},{"ruleId":"377","severity":1,"message":"378","line":199,"column":21,"nodeType":"379","messageId":"380","endLine":199,"endColumn":23},{"ruleId":"377","severity":1,"message":"378","line":202,"column":21,"nodeType":"379","messageId":"380","endLine":202,"endColumn":23},{"ruleId":"377","severity":1,"message":"378","line":211,"column":21,"nodeType":"379","messageId":"380","endLine":211,"endColumn":23},{"ruleId":"377","severity":1,"message":"378","line":223,"column":19,"nodeType":"379","messageId":"380","endLine":223,"endColumn":21},{"ruleId":"377","severity":1,"message":"378","line":237,"column":23,"nodeType":"379","messageId":"380","endLine":237,"endColumn":25},{"ruleId":"377","severity":1,"message":"378","line":252,"column":23,"nodeType":"379","messageId":"380","endLine":252,"endColumn":25},{"ruleId":"398","severity":1,"message":"399","line":253,"column":39,"nodeType":"400","messageId":"401","endLine":253,"endColumn":41},{"ruleId":"377","severity":1,"message":"378","line":254,"column":28,"nodeType":"379","messageId":"380","endLine":254,"endColumn":30},{"ruleId":"398","severity":1,"message":"399","line":255,"column":44,"nodeType":"400","messageId":"401","endLine":255,"endColumn":46},{"ruleId":"377","severity":1,"message":"378","line":256,"column":33,"nodeType":"379","messageId":"380","endLine":256,"endColumn":35},{"ruleId":"377","severity":1,"message":"389","line":285,"column":30,"nodeType":"379","messageId":"380","endLine":285,"endColumn":32},{"ruleId":"377","severity":1,"message":"378","line":291,"column":29,"nodeType":"379","messageId":"380","endLine":291,"endColumn":31},{"ruleId":"377","severity":1,"message":"378","line":331,"column":19,"nodeType":"379","messageId":"380","endLine":331,"endColumn":21},{"ruleId":"377","severity":1,"message":"378","line":357,"column":17,"nodeType":"379","messageId":"380","endLine":357,"endColumn":19},{"ruleId":"377","severity":1,"message":"378","line":388,"column":23,"nodeType":"379","messageId":"380","endLine":388,"endColumn":25},{"ruleId":"377","severity":1,"message":"378","line":415,"column":23,"nodeType":"379","messageId":"380","endLine":415,"endColumn":25},{"ruleId":"390","severity":1,"message":"414","line":442,"column":6,"nodeType":"392","endLine":442,"endColumn":8,"suggestions":"415"},{"ruleId":"377","severity":1,"message":"378","line":499,"column":27,"nodeType":"379","messageId":"380","endLine":499,"endColumn":29},{"ruleId":"377","severity":1,"message":"378","line":752,"column":19,"nodeType":"379","messageId":"380","endLine":752,"endColumn":21},{"ruleId":"377","severity":1,"message":"378","line":754,"column":26,"nodeType":"379","messageId":"380","endLine":754,"endColumn":28},{"ruleId":"377","severity":1,"message":"378","line":811,"column":19,"nodeType":"379","messageId":"380","endLine":811,"endColumn":21},{"ruleId":"377","severity":1,"message":"378","line":813,"column":26,"nodeType":"379","messageId":"380","endLine":813,"endColumn":28},{"ruleId":"377","severity":1,"message":"378","line":818,"column":19,"nodeType":"379","messageId":"380","endLine":818,"endColumn":21},{"ruleId":"377","severity":1,"message":"378","line":820,"column":26,"nodeType":"379","messageId":"380","endLine":820,"endColumn":28},{"ruleId":"377","severity":1,"message":"378","line":829,"column":50,"nodeType":"379","messageId":"380","endLine":829,"endColumn":52},{"ruleId":"377","severity":1,"message":"378","line":833,"column":44,"nodeType":"379","messageId":"380","endLine":833,"endColumn":46},{"ruleId":"377","severity":1,"message":"378","line":837,"column":47,"nodeType":"379","messageId":"380","endLine":837,"endColumn":49},{"ruleId":"372","severity":1,"message":"395","line":11,"column":16,"nodeType":"374","messageId":"375","endLine":11,"endColumn":22},{"ruleId":"377","severity":1,"message":"378","line":23,"column":21,"nodeType":"379","messageId":"380","endLine":23,"endColumn":23},{"ruleId":"377","severity":1,"message":"378","line":34,"column":21,"nodeType":"379","messageId":"380","endLine":34,"endColumn":23},{"ruleId":"398","severity":1,"message":"399","line":35,"column":44,"nodeType":"400","messageId":"401","endLine":35,"endColumn":46},{"ruleId":"377","severity":1,"message":"378","line":36,"column":23,"nodeType":"379","messageId":"380","endLine":36,"endColumn":25},{"ruleId":"377","severity":1,"message":"378","line":56,"column":23,"nodeType":"379","messageId":"380","endLine":56,"endColumn":25},{"ruleId":"377","severity":1,"message":"378","line":78,"column":21,"nodeType":"379","messageId":"380","endLine":78,"endColumn":23},{"ruleId":"398","severity":1,"message":"399","line":79,"column":39,"nodeType":"400","messageId":"401","endLine":79,"endColumn":41},{"ruleId":"377","severity":1,"message":"378","line":80,"column":28,"nodeType":"379","messageId":"380","endLine":80,"endColumn":30},{"ruleId":"390","severity":1,"message":"416","line":97,"column":6,"nodeType":"392","endLine":97,"endColumn":8,"suggestions":"417"},{"ruleId":"381","replacedBy":"418"},{"ruleId":"383","replacedBy":"419"},{"ruleId":"372","severity":1,"message":"394","line":5,"column":10,"nodeType":"374","messageId":"375","endLine":5,"endColumn":23},{"ruleId":"377","severity":1,"message":"378","line":18,"column":21,"nodeType":"379","messageId":"380","endLine":18,"endColumn":23},{"ruleId":"377","severity":1,"message":"378","line":35,"column":23,"nodeType":"379","messageId":"380","endLine":35,"endColumn":25},{"ruleId":"398","severity":1,"message":"399","line":36,"column":46,"nodeType":"400","messageId":"401","endLine":36,"endColumn":48},{"ruleId":"377","severity":1,"message":"378","line":37,"column":25,"nodeType":"379","messageId":"380","endLine":37,"endColumn":27},{"ruleId":"377","severity":1,"message":"378","line":59,"column":21,"nodeType":"379","messageId":"380","endLine":59,"endColumn":23},{"ruleId":"404","severity":1,"message":"405","line":82,"column":11,"nodeType":"406","endLine":82,"endColumn":58},{"ruleId":"372","severity":1,"message":"420","line":28,"column":25,"nodeType":"374","messageId":"375","endLine":28,"endColumn":39},{"ruleId":"372","severity":1,"message":"421","line":2,"column":8,"nodeType":"374","messageId":"375","endLine":2,"endColumn":17},{"ruleId":"372","severity":1,"message":"422","line":2,"column":27,"nodeType":"374","messageId":"375","endLine":2,"endColumn":33},{"ruleId":"372","severity":1,"message":"423","line":2,"column":41,"nodeType":"374","messageId":"375","endLine":2,"endColumn":46},{"ruleId":"372","severity":1,"message":"424","line":2,"column":48,"nodeType":"374","messageId":"375","endLine":2,"endColumn":54},{"ruleId":"372","severity":1,"message":"388","line":25,"column":10,"nodeType":"374","messageId":"375","endLine":25,"endColumn":19},{"ruleId":"377","severity":1,"message":"378","line":80,"column":23,"nodeType":"379","messageId":"380","endLine":80,"endColumn":25},{"ruleId":"377","severity":1,"message":"378","line":83,"column":17,"nodeType":"379","messageId":"380","endLine":83,"endColumn":19},{"ruleId":"377","severity":1,"message":"378","line":92,"column":23,"nodeType":"379","messageId":"380","endLine":92,"endColumn":25},{"ruleId":"372","severity":1,"message":"425","line":2,"column":10,"nodeType":"374","messageId":"375","endLine":2,"endColumn":14},{"ruleId":"372","severity":1,"message":"426","line":5,"column":10,"nodeType":"374","messageId":"375","endLine":5,"endColumn":20},{"ruleId":"372","severity":1,"message":"373","line":1,"column":27,"nodeType":"374","messageId":"375","endLine":1,"endColumn":33},{"ruleId":"372","severity":1,"message":"376","line":1,"column":35,"nodeType":"374","messageId":"375","endLine":1,"endColumn":44},{"ruleId":"372","severity":1,"message":"373","line":1,"column":27,"nodeType":"374","messageId":"375","endLine":1,"endColumn":33},{"ruleId":"372","severity":1,"message":"376","line":1,"column":35,"nodeType":"374","messageId":"375","endLine":1,"endColumn":44},{"ruleId":"372","severity":1,"message":"427","line":10,"column":8,"nodeType":"374","messageId":"375","endLine":10,"endColumn":16},{"ruleId":"372","severity":1,"message":"428","line":2,"column":10,"nodeType":"374","messageId":"375","endLine":2,"endColumn":20},{"ruleId":"381","replacedBy":"429"},{"ruleId":"383","replacedBy":"430"},{"ruleId":"372","severity":1,"message":"431","line":2,"column":8,"nodeType":"374","messageId":"375","endLine":2,"endColumn":15},{"ruleId":"381","replacedBy":"432"},{"ruleId":"383","replacedBy":"433"},{"ruleId":"372","severity":1,"message":"434","line":2,"column":43,"nodeType":"374","messageId":"375","endLine":2,"endColumn":49},{"ruleId":"377","severity":1,"message":"378","line":184,"column":56,"nodeType":"379","messageId":"380","endLine":184,"endColumn":58},{"ruleId":"372","severity":1,"message":"428","line":2,"column":10,"nodeType":"374","messageId":"375","endLine":2,"endColumn":20},{"ruleId":"372","severity":1,"message":"435","line":3,"column":10,"nodeType":"374","messageId":"375","endLine":3,"endColumn":15},{"ruleId":"372","severity":1,"message":"436","line":4,"column":8,"nodeType":"374","messageId":"375","endLine":4,"endColumn":18},{"ruleId":"372","severity":1,"message":"437","line":13,"column":9,"nodeType":"374","messageId":"375","endLine":13,"endColumn":21},{"ruleId":"372","severity":1,"message":"438","line":2,"column":10,"nodeType":"374","messageId":"375","endLine":2,"endColumn":23},{"ruleId":"372","severity":1,"message":"395","line":3,"column":16,"nodeType":"374","messageId":"375","endLine":3,"endColumn":22},{"ruleId":"439","severity":1,"message":"440","line":1,"column":1,"nodeType":"441","endLine":30,"endColumn":2},{"ruleId":"372","severity":1,"message":"442","line":1,"column":36,"nodeType":"374","messageId":"375","endLine":1,"endColumn":39},{"ruleId":"372","severity":1,"message":"443","line":7,"column":10,"nodeType":"374","messageId":"375","endLine":7,"endColumn":21},{"ruleId":"372","severity":1,"message":"444","line":9,"column":10,"nodeType":"374","messageId":"375","endLine":9,"endColumn":25},{"ruleId":"390","severity":1,"message":"445","line":41,"column":6,"nodeType":"392","endLine":41,"endColumn":14,"suggestions":"446"},{"ruleId":"447","severity":1,"message":"448","line":62,"column":13,"nodeType":"406","endLine":62,"endColumn":45},{"ruleId":"372","severity":1,"message":"388","line":28,"column":10,"nodeType":"374","messageId":"375","endLine":28,"endColumn":19},{"ruleId":"390","severity":1,"message":"449","line":50,"column":6,"nodeType":"392","endLine":50,"endColumn":28,"suggestions":"450"},{"ruleId":"377","severity":1,"message":"378","line":84,"column":23,"nodeType":"379","messageId":"380","endLine":84,"endColumn":25},{"ruleId":"377","severity":1,"message":"378","line":87,"column":17,"nodeType":"379","messageId":"380","endLine":87,"endColumn":19},{"ruleId":"377","severity":1,"message":"378","line":96,"column":23,"nodeType":"379","messageId":"380","endLine":96,"endColumn":25},"@typescript-eslint/no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-native-reassign",["451"],"no-negated-in-lhs",["452"],["451"],["452"],"'toast' is defined but never used.","'isLoading' is assigned a value but never used.","Expected '!==' and instead saw '!='.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'bot' and 'getFlowsData'. Either include them or remove the dependency array.","ArrayExpression",["453"],"'AddTextButton' is defined but never used.","'uuidv4' is defined but never used.","'headingRef' is assigned a value but never used.","'paragraphRef' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement",["451"],["452"],"'Image' is defined but never used.","'isSecondClick' is assigned a value but never used.","'setIsSecondClick' is assigned a value but never used.","'edgingButtonId' is assigned a value but never used.","'setState' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'props.match.params.id' and 'setBuilderState'. Either include them or remove the dependency array.",["454"],"React Hook useEffect has a missing dependency: 'register'. Either include it or remove the dependency array.",["455"],["451"],["452"],"'onRequestClose' is assigned a value but never used.","'AppLayout' is defined but never used.","'Router' is defined but never used.","'Route' is defined but never used.","'Switch' is defined but never used.","'grey' is defined but never used.","'AuthButton' is defined but never used.","'feature2' is defined but never used.","'darkerGrey' is defined but never used.",["451"],["452"],"'Toolbar' is defined but never used.",["451"],["452"],"'Circle' is defined but never used.","'media' is defined but never used.","'Breadcrumb' is defined but never used.","'sidebarState' is assigned a value but never used.","'FlowStateType' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'Ref' is defined but never used.","'TiFlowMerge' is defined but never used.","'IoSettingsSharp' is defined but never used.","React Hook useEffect has a missing dependency: 'handleSidebarState'. Either include it or remove the dependency array. If 'handleSidebarState' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["456"],"jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","React Hook useEffect has a missing dependency: 'botId'. Either include it or remove the dependency array.",["457"],"no-global-assign","no-unsafe-negation",{"desc":"458","fix":"459"},{"desc":"460","fix":"461"},{"desc":"462","fix":"463"},{"desc":"464","fix":"465"},{"desc":"466","fix":"467"},"Update the dependencies array to be: [pageNumber, lastPage, getFlowsData, bot]",{"range":"468","text":"469"},"Update the dependencies array to be: [props.match.params.id, setBuilderState]",{"range":"470","text":"471"},"Update the dependencies array to be: [register]",{"range":"472","text":"473"},"Update the dependencies array to be: [handleSidebarState, isOpen]",{"range":"474","text":"475"},"Update the dependencies array to be: [pageNumber, lastPage, botId]",{"range":"476","text":"477"},[1398,1420],"[pageNumber, lastPage, getFlowsData, bot]",[12651,12653],"[props.match.params.id, setBuilderState]",[3003,3005],"[register]",[1369,1377],"[handleSidebarState, isOpen]",[1745,1767],"[pageNumber, lastPage, botId]"]