[{"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Toolbar/index.tsx":"1","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Text/index.tsx":"2"},{"size":5988,"mtime":1611681055564,"results":"3","hashOfConfig":"4"},{"size":2581,"mtime":1611490944297,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"8"},"v8ty68",{"filePath":"9","messages":"10","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Toolbar/index.tsx",["11","12","13","14","15","16","17","18"],"import React, { useContext, useState, useRef, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { ToolbarWrapper, ToolbarMenu, ToolbarButtonGroup } from './styles';\nimport { VerticalGap } from '../../../common/typography';\nimport { ToolbarButton } from '../../../common/buttons';\nimport { BuilderContext } from '../../../../services/Builder/BuilderProvider';\nimport { v4 as uuidv4 } from 'uuid';\nimport FormImage from '../Form/Image/index';\nimport FormText from '../Form/Text/index';\nimport FormCard from '../Form/Card/index';\nimport { updateMessage } from '../../../../apis/messages';\nimport { toast } from 'react-toastify';\nimport { saveText } from '../../../../apis/texts';\n\n\nconst Toolbar = ({ id, hideToolbar }) => {\n  const [builderState, setBuilderState] = useContext(BuilderContext);\n  const [isChangingTitle, setIsChangingTitle] = useState(false);\n  const { register, handleSubmit } = useForm({ mode: 'onChange' });\n\n  // const titleRef = useRef<HTMLInputElement>(null);\n\n  //Find index of specific object using findIndex method.\n  const objIndex = builderState.findIndex((obj) => obj.id == id);\n\n  const onChangeTitle = (data) => {\n    updateMessage({\n      name: data.title\n    }, id).then((response) => {\n      setBuilderState(\n        builderState.map((item, ind) => {\n          if (ind == objIndex) {\n           item.name = data.title\n          }\n          return item;\n        })\n      );\n    }).catch((err) => {\n      toast.error('Something went wrong')\n    })    \n  };\n\n  // //UseEffects\n  // useEffect(() => {\n  //   if (titleRef.current) {\n  //     register(titleRef.current);\n  //     titleRef.current.focus();\n  //   }\n  // }, [isChangingTitle]);\n\n  return (\n    <ToolbarWrapper>\n      {builderState[objIndex] &&\n        <ToolbarMenu>\n          <div className={isChangingTitle ? 'header active' : 'header'}>\n            <form onBlur={handleSubmit(onChangeTitle)}>\n              <input\n                maxLength={35}\n                className=\"heading-input\"\n                ref={register({required: true, minLength: 3})}\n                id=\"title\"\n                name=\"title\"\n                defaultValue={builderState[objIndex].name}\n                onBlur={() => setIsChangingTitle(false)}\n              />\n            </form>\n          </div>\n          {builderState[objIndex].children.length > 0 ? (\n            builderState[objIndex].children.map((child) => {\n              return (\n                <React.Fragment>\n                  <VerticalGap size=\"3\" />\n                  {getChildren(child, objIndex)}\n                </React.Fragment>\n              );\n            })\n          ) : (\n              <React.Fragment>\n                <VerticalGap size=\"3\" />\n                <p className=\"no-content-text\">No content</p>\n              </React.Fragment>\n            )}\n          <VerticalGap size=\"3\" />\n        <ToolbarButtons id={id} index={objIndex} />\n        </ToolbarMenu>\n      }\n    </ToolbarWrapper>\n  );\n};\n\nexport default Toolbar;\n\nconst ToolbarButtons = ({ id, index }) => {\n  const [builderState, setBuilderState] = useContext(BuilderContext);\n\n  const addText = () => {\n    var height = builderState[index].height;\n    height = height + 50;\n    const positionIndex = builderState[index].children.length + 1;\n    saveText({\n      body: 'Change text',\n      message: id,\n      index: 1\n    }).then((response) => {\n      console.log(response.data);\n      setBuilderState(\n        builderState.map((item, ind) => {\n          if (ind == index) {\n            item.height = height;\n            item.children.push(response.data);\n          }\n          return item;\n        })\n      );\n    }).catch((err) => {\n      toast.error(\"Something went wrong\");\n    })\n  };\n\n  const addCard = () => {\n    let height = builderState[index].height;\n    height = height + 150;\n\n    setBuilderState(\n      builderState.map((item, ind) => {\n        if (ind == index) {\n          item.height = height;\n          item.children.push({\n            id: uuidv4(),\n            type: 'card',\n            cards: [\n              {\n                id: uuidv4(),\n                active: true,\n                selectedImage: null,\n                imagePreviewUrl: '',\n                heading: 'subtitle #11',\n                body: 'This is the body paragraph',\n                height: 150,\n              },\n            ],\n          });\n        }\n        return item;\n      })\n    );\n  };\n\n  const addImage = () => {\n    let height = builderState[index].height;\n    height = height + 150;\n    setBuilderState(\n      builderState.map((item, ind) => {\n        if (ind == index) {\n          item.height = height;\n          item.children.push({\n            id: uuidv4(),\n            type: 'image',\n            height: 150,\n            imagePreviewUrl: '',\n            selectedImage: null,\n          });\n        }\n        return item;\n      })\n    );\n  };\n\n  return (\n    <React.Fragment>\n      <ToolbarButtonGroup>\n        <ToolbarButton\n          height=\"6rem\"\n          width=\"6rem\"\n          fontSize=\"1.2rem\"\n          onClick={addText}>\n          + Text\n        </ToolbarButton>\n        <ToolbarButton\n          height=\"6rem\"\n          width=\"6rem\"\n          fontSize=\"1.2rem\"\n          onClick={addCard}>\n          + Card\n        </ToolbarButton>\n        <ToolbarButton\n          height=\"6rem\"\n          width=\"6rem\"\n          fontSize=\"1.2rem\"\n          onClick={addImage}>\n          + Image\n        </ToolbarButton>\n        <ToolbarButton height=\"4rem\" width=\"25rem\">\n          Next Button\n        </ToolbarButton>\n      </ToolbarButtonGroup>\n    </React.Fragment>\n  );\n};\n\nconst getChildren = (children, messageId) => {\n  if (children.type === 'text') {\n    return <FormText messageId={messageId} childId={children.id} />;\n  } else if (children.type === 'image') {\n    return <FormImage messageId={messageId} childId={children.id} />;\n  } else if (children.type === 'card') {\n    return <FormCard messageId={messageId} childId={children.id} />;\n  }\n};\n","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Text/index.tsx",["19","20","21","22","23","24"],{"ruleId":"25","severity":1,"message":"26","line":1,"column":39,"nodeType":"27","messageId":"28","endLine":1,"endColumn":45},{"ruleId":"25","severity":1,"message":"29","line":1,"column":47,"nodeType":"27","messageId":"28","endLine":1,"endColumn":56},{"ruleId":"30","severity":1,"message":"31","line":24,"column":59,"nodeType":"32","messageId":"33","endLine":24,"endColumn":61},{"ruleId":"30","severity":1,"message":"31","line":32,"column":19,"nodeType":"32","messageId":"33","endLine":32,"endColumn":21},{"ruleId":"25","severity":1,"message":"34","line":99,"column":11,"nodeType":"27","messageId":"28","endLine":99,"endColumn":24},{"ruleId":"30","severity":1,"message":"31","line":108,"column":19,"nodeType":"32","messageId":"33","endLine":108,"endColumn":21},{"ruleId":"30","severity":1,"message":"31","line":126,"column":17,"nodeType":"32","messageId":"33","endLine":126,"endColumn":19},{"ruleId":"30","severity":1,"message":"31","line":154,"column":17,"nodeType":"32","messageId":"33","endLine":154,"endColumn":19},{"ruleId":"30","severity":1,"message":"31","line":18,"column":21,"nodeType":"32","messageId":"33","endLine":18,"endColumn":23},{"ruleId":"30","severity":1,"message":"31","line":25,"column":19,"nodeType":"32","messageId":"33","endLine":25,"endColumn":21},{"ruleId":"35","severity":1,"message":"36","line":26,"column":42,"nodeType":"37","messageId":"38","endLine":26,"endColumn":44},{"ruleId":"30","severity":1,"message":"31","line":27,"column":21,"nodeType":"32","messageId":"33","endLine":27,"endColumn":23},{"ruleId":"30","severity":1,"message":"31","line":43,"column":19,"nodeType":"32","messageId":"33","endLine":43,"endColumn":21},{"ruleId":"39","severity":1,"message":"40","line":57,"column":6,"nodeType":"41","endLine":57,"endColumn":22,"suggestions":"42"},"@typescript-eslint/no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'positionIndex' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'register'. Either include it or remove the dependency array.","ArrayExpression",["43"],{"desc":"44","fix":"45"},"Update the dependencies array to be: [isChangingBody, register]",{"range":"46","text":"47"},[1764,1780],"[isChangingBody, register]"]