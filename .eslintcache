[{"/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/main/Flows/builder.tsx":"1","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Toolbar/index.tsx":"2","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Text/index.tsx":"3","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Card/index.tsx":"4","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Toolbar/styles.ts":"5","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Toolbar/BtnEditor.tsx":"6","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Image/index.tsx":"7"},{"size":37917,"mtime":1615257907123,"results":"8","hashOfConfig":"9"},{"size":9692,"mtime":1613585463275,"results":"10","hashOfConfig":"9"},{"size":4730,"mtime":1613586450030,"results":"11","hashOfConfig":"9"},{"size":13422,"mtime":1613586467397,"results":"12","hashOfConfig":"9"},{"size":5490,"mtime":1613586889904,"results":"13","hashOfConfig":"9"},{"size":9134,"mtime":1613618936538,"results":"14","hashOfConfig":"9"},{"size":3108,"mtime":1612614260275,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":84,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},"v8ty68",{"filePath":"19","messages":"20","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":37,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":41,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/main/Flows/builder.tsx",["34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117"],"import React, { useState } from 'react';\nimport {withRouter} from 'react-router-dom'\nimport { FlowBuilderWrapper } from './styles';\nimport { Stage, Layer, Rect, Image, Text, Group, Circle } from 'react-konva';\nimport Toolbar from '../../../components/dashboard/builder/Toolbar/index';\nimport PuffLoader from \"react-spinners/PuffLoader\";\n\nimport {\n  getImage,\n  calculateHeightOfMessageBox,\n  handleWheel,\n  onTouchPinch,\n  Edge,\n  URLImage,\n  getActiveCard,\n  getRelativePointerPosition\n} from './helper';\nimport {\n  useBuilder,\n} from '../../../services/Builder/BuilderProvider';\nimport { BiMessageSquareAdd } from 'react-icons/bi';\nimport { saveMessage, getMessages, updateMessage, deleteMessage, createAndConnectMessage } from '../../../apis/messages';\nimport { toast } from 'react-toastify';\nimport { getFlow, publishFlow } from '../../../apis/flows';\nimport { createAndConnectWithButton, updateButton } from '../../../apis/buttons';\nimport Konva from 'konva';\nimport { PrimaryButton } from '../../../components/common/buttons';\n\nconst FlowBuilder = (props) => {\n  const [isToolbarActive, setIsToolbarActive] = useState(null);\n  const [builderState, setBuilderState, sidebar] = useBuilder();\n  const [flow, setFlow] = useState(null);\n  const [id, setId] = useState(null);\n  const [mousePosition, setMousePosition] = useState({\n    x: 0,\n    y: 0,\n  });\n  const [isEdging, setIsSetting] = useState(false);\n  const [showToolOption, setShowToolOption] = useState(false);\n  const [edgingMessageId, setEdgingMessageId] = useState(null);\n  const [edgingButtonId, setEdgingButtonId] = useState(null);\n  const [edgingButtonMessageId, setEdgingButtonMessageId] = useState(null);\n  const [edgingButtonChildId, setEdgingButtonChildId] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isPublishing, setIsPublishing] = useState(false);\n  const [isCreating, setIsCreating] = useState(false);\n\n  const [state, setState] = useState({\n    layerScale: 1,\n    layerX: 0,\n    layerY: 0,\n  });\n\n  const TrashIcon = \"data:image/svg+xml;base64,\" + window.btoa('<svg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" viewBox=\"0 0 24 24\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"none\" d=\"M17.004 20L17.003 8h-1-8-1v12H17.004zM13.003 10h2v8h-2V10zM9.003 10h2v8h-2V10zM9.003 4H15.003V6H9.003z\"></path><path d=\"M5.003,20c0,1.103,0.897,2,2,2h10c1.103,0,2-0.897,2-2V8h2V6h-3h-1V4c0-1.103-0.897-2-2-2h-6c-1.103,0-2,0.897-2,2v2h-1h-3 v2h2V20z M9.003,4h6v2h-6V4z M8.003,8h8h1l0.001,12H7.003V8H8.003z\"></path><path d=\"M9.003 10H11.003V18H9.003zM13.003 10H15.003V18H13.003z\"></path></svg>');\n\n  const getNextNode = (id) => {\n    if (id) {\n      const nextIndex = builderState.findIndex((obj) => obj.id == id);\n      if (nextIndex == -1) {\n        return mousePosition;\n      }\n      return builderState[nextIndex].position;\n    }\n  };\n\n  const hideToolbar = () => {\n    setIsToolbarActive(false);\n    setId(0);\n  };\n\n  const showToolbar = (id) => {\n    setId(id);\n    setIsToolbarActive(true);\n  };\n\n \nconst handleRenderingChildrens = (message) => {\n  var lastPosition = 70;\n  return message.children.map(function (child) {\n    var yposition = lastPosition;\n    if (child.type === 'card') {\n      var activeCard = getActiveCard(child.cards);\n      // lastPosition = lastPosition + child.cards[0].height;\n      const buttons = child.cards[activeCard].buttons.length;\n      lastPosition = lastPosition + child.cards[activeCard].height + (buttons * 40) + 40;\n    } else if (child.type === 'text') {\n      const buttons = child.buttons.length;\n      lastPosition = lastPosition + child.height + (buttons * 40) + 40;\n    } else if (child.type === 'image') {\n      lastPosition = lastPosition + child.height + 20;\n    }\n    return getChildren(message, child, yposition);\n  });\n};\n  \n  const getChildren = (message, child, lastPosition) => {\n    // var messageHeight = calculateHeightOfMessageBox(message.children);\n  if (child.type === 'text') {\n    var textButtons = child.buttons;\n    var boxHeight = (child.height * 1.05) + (textButtons.length * 40) + 10;\n    return (\n      <Group x={20} y={lastPosition}>\n        <Rect\n          fill=\"#F0F4F7\"\n          cornerRadius={5}\n          height={boxHeight}\n          width={300}\n          stroke=\"lightGrey\"\n          strokeWidth={1}\n          shadowColor=\"#95bbdf\"\n          shadowOpacity={0.5}\n          shadowBlur={7}\n        />\n        <Text\n          x={15}\n          y={7}\n          text={child.value}\n          fontSize={15}\n          lineHeight={1.2}\n          width={280}\n        />\n        {child.buttons.map((button, index) => {\n          var y = (child.height * 1.05) + (40 * index) + 10;\n          var node2 = getNextNode(button.next);\n          return (\n            <Group key={button.id}>\n              { button.next &&\n                <Edge\n                  state={state}\n                  height={boxHeight}\n                  node1={{ x: -60, y: - boxHeight + 30 + (y) }}\n                  node2={{ x: node2.x - message.position.x - 20, y: node2.y - message.position.y - lastPosition }}\n                  width={20}\n                />\n              }\n              <Rect\n                x={25}\n                y={y}\n                fill=\"#FFFFFF\"\n                cornerRadius={5}\n                height={30}\n                width={250}\n                shadowOpacity={0.5}\n                shadowBlur={7}\n                align={\"center\"}\n              />\n              <Text\n                x={10}\n                y={y + 3}\n                text={button.name}\n                fontSize={15}\n                width={280}\n                lineHeight={1.5}\n                align={\"center\"}\n              />\n              {!button.url && <Circle x={260} y={y + 14} radius={9} fill=\"#8392AB\" strokeWidth={1}\n                onMouseOver={() => { document.body.style.cursor = 'pointer' }}\n                onMouseOut={() => { document.body.style.cursor = 'default' }}\n                onClick={(e) => {\n                  e.cancelBubble = true;\n                  connectButtonEdge(message.id, child.id, button.id, 'text')\n                }}\n              />}\n            </Group> \n          );\n         })}\n      </Group>\n    );\n  } else if (child.type === 'image') {\n    return getImage(child, lastPosition);\n  } else if (child.type === 'card') {\n    return (\n      <Group x={20} y={lastPosition}>\n        {handleRenderingCards(message, child, lastPosition)}\n      </Group>\n    );\n  }\n  };\n  \n   const handleRenderingCards = (message, children, lastPosition) => {\n     var activeCard = getActiveCard(children.cards);\n     var cardButtons = children.cards[activeCard].buttons;\n    var boxHeight = (children.cards[activeCard].height) + (cardButtons.length * 40) + 20;\n\n    return (\n      <React.Fragment>\n        <Rect\n          x={0}\n          y={0}\n          cornerRadius={5}\n          fill=\"#F2F5F7\"\n          height={boxHeight}\n          width={300}\n          stroke=\"lightGrey\"\n          strokeWidth={1}\n          shadowColor=\"#95bbdf\"\n          shadowOpacity={0.5}\n          shadowBlur={7}\n        />\n        {getCardImage(children.cards[activeCard])}\n        <Text\n          x={10}\n          width={260}\n          y={185}\n          text={children.cards[activeCard].heading}\n          fontFamily={'Roboto'}\n          fontSize={16}\n          fontStyle={'bold'}\n          fill={'black'}\n        />\n        <Text\n          x={10}\n          y={210}\n          width={280}\n          text={children.cards[activeCard].body}\n          fontFamily={'Roboto'}\n          fontSize={15}\n          fill={'black'}\n          lineHeight={1.2}\n        />\n        {children.cards[activeCard].buttons.map((button, index) => {\n            var y = (children.cards[activeCard].height) + (40 * index) + 20;\n          var node2 = getNextNode(button.next);\n            return (\n              <Group key={button.id}>\n                { button.next &&\n                  <Edge\n                      state={state}\n                      height={boxHeight}\n                      node1={{ x: -60, y: - boxHeight + 30 + (y)}}\n                      node2={{ x: node2.x - message.position.x -20, y: node2.y - message.position.y - lastPosition}}\n                      width={20}\n                    />\n                }\n                <Rect\n                  x={25}\n                  y={y}\n                  fill=\"#FFFFFF\"\n                  cornerRadius={5}\n                  height={30}\n                  width={250}\n                  shadowOpacity={0.5}\n                  shadowBlur={7}\n                  align={\"center\"}\n                />\n                <Text\n                  x={10}\n                  y={y + 3}\n                  text={button.name}\n                  fontSize={15}\n                  width={280}\n                  lineHeight={1.5}\n                  align={\"center\"}\n                />\n                {!button.url && <Circle x={260} y={y + 14} radius={9} fill=\"#8392AB\" strokeWidth={1}\n                  onMouseOver={() => { document.body.style.cursor = 'pointer' }}\n                  onMouseOut={() => { document.body.style.cursor = 'default' }}\n                  onClick={(e) => {\n                    e.cancelBubble = true;\n                    connectButtonEdge(message.id, children.id, button.id, 'card')\n                  }}\n               />}\n              </Group>\n            );\n           })}\n      </React.Fragment>\n    );\n  };\n  const getCardImage = (children) => {\n    if (children.imagePreviewUrl) {\n      return (\n        <URLImage\n          x={0}\n          y={0}\n          image={children.imagePreviewUrl}\n          height={160}\n          width={300}\n        />\n      );\n    } else {\n      return (\n        <Group>\n          <Rect\n            x={20}\n            y={20}\n            fill=\"#E1E5EA\"\n            stroke=\"#8392AB\"\n            cornerRadius={5}\n            height={150}\n            width={260}\n            dash={[10, 5]}\n            strokeWidth={1}\n            shadowColor=\"#95bbdf\"\n            shadowOpacity={0.5}\n            shadowBlur={7}\n          />\n          <Text x={100} y={85} text={'Upload Image'} fontSize={16} />\n        </Group>\n      );\n    }\n  };\n\n  const getStageWidth = () => {\n    return sidebar ? window.innerWidth - 280 : window.innerWidth - 90;\n  };\n\n  const setSelectedTrue = (messageId) => {\n    var previousSelected = getSelectedNode(builderState);\n    if (previousSelected >= 0) {\n      setBuilderState(\n        builderState.map((item, index) => {\n          if (index == messageId) {\n            item.isSelected = true;\n          }\n          if (index == previousSelected) {\n            item.isSelected = false;\n          }\n          return item;\n        })\n      );\n    } else {\n      setBuilderState(\n        builderState.map((item, index) => {\n          if (index == messageId) {\n            item.isSelected = true;\n          }\n          return item;\n        })\n      );\n    }\n  };\n\n  const setHoverTrue = (messageId) => {\n    var previousHover = getHoveredNode(builderState);\n    if (previousHover >= 0) {\n      setBuilderState(\n        builderState.map((item, index) => {\n          if (index == messageId) {\n            item.isHover = true;\n          }\n          if (index == previousHover) {\n            item.isHover = false;\n          }\n          return item;\n        })\n      );\n    } else {\n      setBuilderState(\n        builderState.map((item, index) => {\n          if (index == messageId) {\n            item.isHover = true;\n          }\n          return item;\n        })\n      );\n    }\n  };\n\n  const setHoverFalse = (messageId) => {\n    setBuilderState(\n      builderState.map((item, index) => {\n        if (index == messageId) {\n          item.isHover = false;\n        }\n        return item;\n      })\n    );\n  };\n\n  const connectEdge = (messageId) => {\n    setEdgingButtonId(null);\n    setEdgingMessageId(null);\n\n    if (!showToolOption) {\n      setIsSetting(true);\n      setEdgingMessageId(messageId);\n      setBuilderState(\n        builderState.map((item) => {\n          if (item.id == messageId) {\n            item.next = 'dummy';\n          }\n          return item;\n        })\n      );\n    }\n  };\n\n  const connectButtonEdge = (messageId, childId, buttonId, type) => {\n    setEdgingButtonId(null);\n    setEdgingMessageId(null);\n    if (!showToolOption) {\n      setIsSetting(true);\n      setEdgingButtonId(buttonId);\n      setEdgingButtonMessageId(messageId);\n      setEdgingButtonChildId(childId);\n\n      setBuilderState(\n        builderState.map((item) => {\n          if (item.id == messageId) {\n            if (type == 'text') {\n              item.children.map((child) => {\n                if (child.id == childId) {\n                  child.buttons.map((button) => {\n                    if (button.id == buttonId) {\n                      button.next = \"dummy\"\n                    }\n                    return button;\n                  })\n                }\n              })\n            } else if (type == 'card') {\n              item.children.map((child) => {\n                if (child.id == childId) {\n                  var activeCardIndex = getActiveCard(child.cards);\n                  child.cards.map((card, inx) => {\n                    if (inx == activeCardIndex) {\n                      card.buttons.map((button) => {\n                        if (button.id == buttonId) {\n                          button.next = \"dummy\";\n                         }\n                       })\n                     }\n                  })\n                }\n              })\n            }\n          }\n          return item;\n        })\n      );\n    }\n  }\n\n  const handleMousePosition = (event) => {\n    if (!showToolOption && !isCreating) {\n    //   var point = event.target.getStage().getPointerPosition();\n    //   const scaleBy = 0.9;\n    const stage = event.target.getStage();\n    const layer = stage.find('.layer_1')[0];\n\n    const oldScale = layer.scaleX();\n    // const newScale = event.evt.deltaY > 0 ? oldScale * scaleBy : oldScale / scaleBy;\n    // layer.scale({ x: newScale, y: newScale });\n\n    const layerPointerPosition = getRelativePointerPosition(layer);\n    const correctedLayerPointerPosition = {\n      x: layer.x() + layerPointerPosition.x ,\n      y: layer.y() + layerPointerPosition.y ,\n    };\n\n    const mousePointTo = {\n      x: correctedLayerPointerPosition.x - layer.x(),\n      y: correctedLayerPointerPosition.y  - layer.y() ,\n    };\n      setMousePosition(mousePointTo);\n    }\n  };\n\n  const handleClickOnCanvas = () => {\n    if (isEdging) {\n      var hoveredIndex = getHoveredNode(builderState);\n      if (hoveredIndex > 0) {\n        //If the edging is hovered over another message and connect that message\n        var messageIdOfHover = builderState[hoveredIndex].id\n        if (messageIdOfHover != edgingMessageId) {\n          if (edgingMessageId) {\n            updateMessage({\n              next: messageIdOfHover\n            }, edgingMessageId).then((response) => { \n              setBuilderState(\n                builderState.map((item, index) => {\n                  if (item.id == edgingMessageId) {\n                    item.next = messageIdOfHover\n                  }\n                  return item;\n                })\n              );\n            }).catch((err) => {\n              toast.error(\"Something went wrong\");\n            }).finally(() => {\n              setEdgingMessageId(null);\n            })\n           } else if (edgingButtonId) {\n            updateButton({\n              next: messageIdOfHover\n            }, edgingButtonId).then((response) => {\n              setBuilderState(\n                builderState.map((item, index) => {\n                  if (item.id == edgingButtonMessageId) {\n                    item.children.map((child) => {\n                      if (child.id == edgingButtonChildId) {\n                        child.buttons.map((button) => {\n                          if (button.id == edgingButtonId) {\n                            button.next = messageIdOfHover\n                          }\n                        })\n                      }\n                    })\n                  }  \n                  return item;\n                })\n              );\n            }).catch((err) => {\n              toast.error(\"Something went wrong\")\n            }).finally(() => {\n              setEdgingButtonId(null);\n            })\n          }\n        } \n      } else {\n        setShowToolOption(true);\n      }\n    }\n  };\n\n  const handleAddMessage = () => {\n    let number = builderState.length + 1;\n    saveMessage({\n      name: 'Send Message #' + number,\n      type: 'default',\n      position_x: 1200,\n      position_y: 60,\n      flow: props.match.params.id\n    }).then((response) => {\n       setBuilderState([...builderState, response.data]);\n\n    }).catch((err) => {\n      toast.error(\"Something went wrong\")\n    })\n  }\n\n  const handleDeleteMessage = (item, index) => {\n    setIsToolbarActive(false);\n    if (index > 0) {\n      \n      //Delete the message\n    builderState.splice(index, 1);\n    //Delete the edging where this message belongs to\n      // const messageIndexHavingNextOfDeleteMessage = getMessageIndexWhichHasNextOfGivenMessageId(builderState, item.id);\n      //Remove the edging to the button when message deleted.\n    setBuilderState(\n      builderState.map((message) => {\n        if (message.next == item.id) {\n          message.next = null\n        }\n        message.children.map((child) => {\n          if (child.type == 'text') {\n            child.buttons.map((button) => {\n              if (button.next == item.id) {\n                button.next = null\n              }\n            })\n          } else if (child.type == 'card') {\n            child.cards.map((card) => {\n              card.buttons.map((button) => {\n                if (button.next == item.id) {\n                  button.next = null;\n                }\n              })\n            })\n          }\n        })\n        return message;\n      })\n    );\n      \n    deleteMessage(item.id).then(() => {\n      setShowToolOption(false);\n      setEdgingMessageId(null);\n      setEdgingButtonId(null);\n      setIsSetting(false);\n    }).catch((err) => {\n        toast.error(\"Something went wrong\");\n      })\n    } else {\n      toast.info(\"You cannot delete the start message\")\n    }\n  }\n\n  const handleDragMessage = (e, item, index) =>  {\n    var updatedPosition = {\n      x: e.target.x(),\n      y: e.target.y(),\n    };\n\n    setBuilderState(\n      builderState.map((item, ind) => {\n        if (ind == index) {\n          item.position = updatedPosition;\n        }\n        return item;\n      })\n    );\n  }\n\n  const updateMessagePosition = (item) => {\n    updateMessage({\n      position_x: item.position.x,\n      position_y: item.position.y\n    }, item.id).catch((err) => {\n      toast.error('Something went wrong')\n    })    \n  }\n\n  const handleToolOptionNewMessageAction = () => {\n    setIsSetting(false);\n    setShowToolOption(false);\n    let number = builderState.length + 1;\n    var newMessage = {\n      name: 'Send Message #' + number,\n      type: 'default',\n      position_x: mousePosition.x,\n      position_y: mousePosition.y,\n      flow: props.match.params.id\n    }\n\n    if (edgingMessageId) {\n      setIsCreating(true);\n      createAndConnectMessage(newMessage, edgingMessageId)\n        .then((response) => {\n          setBuilderState(\n            builderState.map((item) => {\n              if (item.id == edgingMessageId) {\n                item.next = response.data.id;\n              }\n              return item;\n            })\n          );\n          setBuilderState([...builderState, response.data]);\n        }).catch((err) => {\n          toast.error(\"Something went wrong\")\n        }).finally(() => {\n          setIsCreating(false);\n          setEdgingMessageId(null);\n        })\n    } else if (edgingButtonId) {\n      setIsCreating(true);\n      createAndConnectWithButton(newMessage, edgingButtonId)\n        .then((response) => {\n          setBuilderState(\n            builderState.map((item) => {\n              if (item.id == edgingButtonMessageId) {\n                item.children.map((child) => {\n                  if (child.id == edgingButtonChildId) {\n                    if(child.type == 'text') {\n                      child.buttons.map((button) => {\n                        if (button.id == edgingButtonId) {\n                          button.next = response.data.id\n                        }\n                        return button;\n                      })\n                    } else if (child.type == 'card') {\n                      var activeCardIndex = getActiveCard(child.cards);\n                      child.cards.map((card, inx) => {\n                        if (inx == activeCardIndex) {\n                          card.buttons.map((button) => {\n                            if (button.id == edgingButtonId) {\n                                button.next = response.data.id\n                              }\n                            })\n                          }\n                      })\n                    }\n                  }\n                  return child;\n                })\n              }\n              return item;\n            })\n          );\n          setBuilderState([...builderState, response.data]);\n        }).catch((err) => {\n          toast.error(\"Something went wrong\")\n        }).finally(() => {\n          setIsCreating(false);\n          setEdgingButtonId(null);\n          setEdgingButtonMessageId(null);\n          setEdgingButtonChildId(null);\n        })\n    }\n  }\n\n  const handleToolOptionConnectFlow = () => {\n    setIsSetting(false);\n    setShowToolOption(false);\n    let number = builderState.length + 1;\n    var newFlow = {\n      name: 'Connect Flow #' + number,\n      type: 'flow',\n      position_x: mousePosition.x,\n      position_y: mousePosition.y,\n      flow: props.match.params.id\n    }\n    if (edgingMessageId) {\n      setIsCreating(true);\n      createAndConnectMessage(newFlow, edgingMessageId).then((response) => {\n        setBuilderState(\n          builderState.map((item) => {\n            if (item.id == edgingMessageId) {\n              item.next = response.data.id;\n            }\n            return item;\n          })\n        );\n        setBuilderState([...builderState, response.data]);\n       \n      }).catch((err) => {\n        toast.error(\"Something went wrong\")\n      }).finally(() => {\n        setIsCreating(false);\n        setEdgingMessageId(null);\n      });\n    } else if (edgingButtonId) {\n      setIsCreating(true);\n      createAndConnectWithButton(newFlow, edgingButtonId)\n        .then((response) => {\n          setBuilderState(\n            builderState.map((item) => {\n              if (item.id == edgingButtonMessageId) {\n                item.children.map((child) => {\n                  if (child.id == edgingButtonChildId) {\n                    if(child.type == 'text') {\n                      child.buttons.map((button) => {\n                        if (button.id == edgingButtonId) {\n                          button.next = response.data.id\n                        }\n                        return button;\n                      })\n                    } else if (child.type == 'card') {\n                      var activeCardIndex = getActiveCard(child.cards);\n                      child.cards.map((card, inx) => {\n                        if (inx == activeCardIndex) {\n                          card.buttons.map((button) => {\n                            if (button.id == edgingButtonId) {\n                                button.next = response.data.id\n                              }\n                            })\n                          }\n                      })\n                    }\n                  }\n                  return child;\n                })\n              }\n              return item;\n            })\n          );\n          setBuilderState([...builderState, response.data]);\n        }).catch((err) => {\n          toast.error(\"Something went wrong\")\n        }).finally(() => {\n          setIsCreating(false);\n          setEdgingButtonId(null);\n          setEdgingButtonMessageId(null);\n          setEdgingButtonChildId(null);\n        })\n    }\n  }\n\n  const handleToolOptionCancel = () => {\n    setShowToolOption(false);\n    if (isEdging) setIsSetting(false);\n    if (edgingMessageId) {\n      setBuilderState(\n        builderState.map((item) => {\n          if (item.id == edgingMessageId) {\n            item.next = \"\"\n          }\n          return item;\n        })\n      );\n      if (edgingMessageId) setEdgingMessageId(null);\n    } else if (edgingButtonId) {\n        setBuilderState(\n          builderState.map((item) => {\n            if (item.id == edgingButtonMessageId) {\n              item.children.map((child) => {\n                if (child.type == 'text') {\n                  if (child.id == edgingButtonChildId) {\n                    child.buttons.map((button) => {\n                      if (button.id == edgingButtonId) {\n                        button.next = null\n                      }\n                      return button;\n                    })\n                  }\n                } else if (child.type == 'card') {\n                  var activeCardIndex = getActiveCard(child.cards);\n                  child.cards.map((card, index) => {\n                    if (index == activeCardIndex) {\n                      card.buttons.map((button) => {\n                        if (button.id == edgingButtonId) {\n                          button.next = null\n                        }\n                      });\n                    }\n                  })\n                }\n                return child;\n              })\n            }\n            return item;\n          })\n        );\n        if(edgingButtonId) setEdgingButtonId(null);\n        if(edgingButtonChildId) setEdgingButtonChildId(null);\n        if(edgingButtonMessageId) setEdgingButtonMessageId(null);\n      }          \n    }\n\n  const handlePublishFlow = () => {\n    setIsPublishing(true);\n    publishFlow(flow.id)\n      .then(() => toast.success(\"Flow published successfully\"))\n      .catch((err) => toast.error(\"Something went wrong.\"))\n      .finally(() => {\n        setIsPublishing(false);\n      })\n  }\n  React.useEffect(() => {\n    setIsLoading(true);\n    getMessages(props.match.params.id)\n      .then((response) => {\n        setBuilderState(response.data)\n      })\n      .catch((err) => {\n        toast.error(\"Something went wrong\")\n      }).finally(() => {\n        setIsLoading(false);\n      })\n    getFlow(props.match.params.id)\n      .then((response) => {  \n        setFlow(response.data);\n    }).catch((err) => {\n      toast.error(\"Something went wrong\")   \n    })\n    Konva.hitOnDragEnabled = true;\n  }, []);\n\n  const getToolOption = () => {\n    return (\n      <Group  x={mousePosition.x} y={mousePosition.y} zIndex={200}\n        onMouseOver={() => { document.body.style.cursor = 'pointer' }}\n        onMouseOut={() => { document.body.style.cursor = 'default' }}\n      >\n        <Group onClick={handleToolOptionNewMessageAction}>\n          <Rect\n            width={200}\n            height={50}\n            fill=\"#FDFDFD\"\n            strokeWidth={2}\n            shadowColor=\"gray\"\n            shadowOpacity={0.7}\n            shadowBlur={2}\n            onMouseDown={(e) => {\n              e.target.setAttr('fill', ' #eef1f4');\n            }}\n          />\n          <Text\n            x={15}\n            y={15}\n            text=\"+ New Message\"\n            fontFamily={'Roboto'}\n            fontSize={20}\n            fill={'#5850eb'}\n          />\n        </Group>\n        <Group y={50} onClick={handleToolOptionConnectFlow}>\n          <Rect\n            width={200}\n            height={50}\n            fill=\"#FDFDFD\"\n            strokeWidth={2}\n            shadowColor=\"gray\"\n            shadowOpacity={0.7}\n            shadowBlur={2}\n            onMouseDown={(e) => {\n              e.target.setAttr('fill', ' #eef1f4');\n            }}\n          />\n          <Text\n            x={15}\n            y={15}\n            text=\"+ Connect Flow\"\n            fontFamily={'Roboto'}\n            fontSize={20}\n            fill={'#5850eb'}\n          />\n        </Group>\n        <Group y={100}  onClick={handleToolOptionCancel}>\n          <Rect\n            width={200}\n            height={50}\n            fill=\"#FDFDFD\"\n            strokeWidth={2}\n            shadowColor=\"gray\"\n            shadowOpacity={0.7}\n            shadowBlur={2}\n            onMouseDown={(e) => {\n              e.target.setAttr('fill', ' #eef1f4');\n            }}\n          />\n          <Text\n            x={15}\n            y={15}\n            text=\"- Cancel\"\n            fontFamily={'Roboto'}\n            fontSize={20}\n            fill={'#5850eb'}\n          />\n        </Group>\n      </Group>\n    );\n  }\n  const getDefaultMessage = (item, index, messageHeight) => {\n    return (\n      <Group\n        x={item.position?.x}\n        y={item.position?.y}\n        draggable\n        onClick={(e) => {\n          showToolbar(item.id);\n          setSelectedTrue(index);\n        }}\n        onMouseEnter={(e) => {\n          setHoverTrue(index);\n        }}\n        onMouseLeave={(e) => {\n          setHoverFalse(index);\n        }}\n        hitOnDragEnabled={true}\n        onDragMove={(e) => {\n          handleDragMessage(e, item, index)\n        }}\n        onDragEnd={() => { updateMessagePosition(item) }}\n      >\n        {index === 0 &&\n          <Group x={10} y={-40}>\n            <Rect cornerRadius={7} stroke={\"green\"} strokeWidth={2} fill=\"#FDFDFD\" width={60} height={30} />\n            <Text\n              x={13}\n              y={8}\n              text={\"Start\"}\n              fontFamily={'Roboto'}\n              fontSize={15}\n              fill={'green'}\n            />\n          </Group>\n        }\n        <Rect\n          cornerRadius={16}\n          height={messageHeight}\n          width={340}\n          fill=\"#FDFDFD\"\n          strokeWidth={1}\n          stroke={ \"#5850EB\"}\n          shadowColor={getShadowColor(item)}\n          shadowOpacity={1}\n          shadowBlur={7}\n        />\n        {item.isHover &&\n          <>\n            <Rect\n              width={50} height={30} x={330} y={10} />\n            <URLImage\n              onMouseOver={() => { document.body.style.cursor = 'pointer' }}\n              onMouseOut={() => { document.body.style.cursor = 'default' }}\n              onClick={() => { handleDeleteMessage(item, index) }}\n              image={TrashIcon} x={345} y={10} height={25} width={25} />\n          </>\n        }\n        <Circle x={30} y={30} radius={15} fill=\"#5850EB\" />\n        <Text\n          x={55}\n          y={22}\n          text={item.name}\n          fontFamily={'Roboto'}\n          fontSize={20}\n          fill={'gray'}\n        />\n        <Group\n          x={340}\n          y={messageHeight - 20}\n          onMouseOver={() => { document.body.style.cursor = 'pointer' }}\n          onMouseOut={() => { document.body.style.cursor = 'default' }}\n          onClick={(e) => {\n            e.cancelBubble = true;\n            connectEdge(item.id)\n          }}>\n          <Circle radius={9} fill=\"#8392AB\" strokeWidth={1} />\n          <Text\n            x={-80}\n            y={-8}\n            text=\"Next Step\"\n            fontFamily={'Roboto'}\n            fontSize={15}\n            fontWeight={300}\n            fill={'gray'}\n          />\n        </Group>\n        {typeof item.children == 'object' ? (\n          <>\n            {item.children.length > 0 ? (\n              handleRenderingChildrens(item)\n            ) : (\n                <React.Fragment key={item}>\n                  <Group>\n                    <Rect\n                      x={20}\n                      y={75}\n                      height={60}\n                      width={300}\n                      fill=\"#EEF1F4\"\n                      cornerRadius={16}\n                    />\n                    <Text\n                      text=\"No Content\"\n                      x={110}\n                      y={95}\n                      fontFamily={'Roboto'}\n                      fontSize={20}\n                      fontWeight={300}\n                      fill={'blue'}\n                    />\n                  </Group>\n                </React.Fragment>\n              )}\n          </>\n        ) : null}\n      </Group>\n    );\n  }\n  const getFlowMessage = (item, index) => {\n    return (\n      <Group\n      x={item.position?.x}\n      y={item.position?.y}\n      draggable\n      onClick={(e) => {\n        showToolbar(item.id);\n        setSelectedTrue(index);\n      }}\n      onMouseEnter={(e) => {\n        setHoverTrue(index);\n      }}\n      onMouseLeave={(e) => {\n        setHoverFalse(index);\n      }}\n      hitOnDragEnabled={true}\n      onDragMove={(e) => {\n        handleDragMessage(e, item, index)\n      }}\n      onDragEnd={() => { updateMessagePosition(item) }}\n    >\n      <Rect\n        cornerRadius={16}\n        height={200}\n        width={340}\n        fill=\"#FDFDFD\"\n        stroke={ \"#f9bf3b\"}\n        strokeWidth={1}\n        shadowColor={getShadowColor(item)}\n        shadowOpacity={1}\n        shadowBlur={7}\n      />\n      {item.isHover &&\n        <>\n          <Rect\n            width={50} height={30} x={330} y={10} />\n          <URLImage\n            onMouseOver={() => { document.body.style.cursor = 'pointer' }}\n            onMouseOut={() => { document.body.style.cursor = 'default' }}\n            onClick={() => { handleDeleteMessage(item, index) }}\n            image={TrashIcon} x={345} y={10} height={25} width={25} />\n        </>\n      }\n      <Circle x={30} y={30} radius={15} fill=\"#f9bf3b\" />\n      <Text\n        x={55}\n        y={22}\n        text={item.name}\n        fontFamily={'Roboto'}\n        fontSize={20}\n        fill={'gray'}\n        />\n        {item.children.length > 0 ? (\n          <Group>\n          <Rect\n            x={20}\n            y={75}\n            height={60}\n            width={300}\n            stroke=\"green\"\n            strokeWidth={1}\n            fill=\"#EEF1F4\"\n            cornerRadius={16}\n          />\n          <Text\n            text={item.children[0].name}\n            x={40}\n            y={95}\n            fontFamily={'Roboto'}\n            fontSize={20}\n            fontWeight={300}\n              fill={\"#f9bf3b\"}\n              align={\"center\"}\n          />\n        </Group>\n        ) : (\n            <React.Fragment key={item}>\n              <Group>\n                <Rect\n                  x={20}\n                  y={75}\n                  height={60}\n                  width={300}\n                  fill=\"#EEF1F4\"\n                  cornerRadius={16}\n                />\n                <Text\n                  text=\"Select Flow\"\n                  x={110}\n                  y={95}\n                  fontFamily={'Roboto'}\n                  fontSize={20}\n                  fontWeight={300}\n                  fill={\"#f9bf3b\"}\n                  align={\"center\"}\n                />\n              </Group>\n            </React.Fragment>\n          )}\n    </Group>\n    );\n  }\n  const getMessageBox = (item, index, messageHeight) => {\n    if (item.type == \"default\") {\n      return getDefaultMessage(item, index, messageHeight);\n    } else if (item.type == \"flow\") {\n      return getFlowMessage(item, index);\n    }\n  }\n  \n  if (isLoading) {\n    return (\n      <div className=\"loader-wrapper\">\n        <PuffLoader color={' #5850EC'} loading={isLoading} size={75} />\n      </div>\n    );\n  } else {\n    return (\n      <FlowBuilderWrapper>\n        {flow && <div className=\"header\">\n          <p>{flow.name}</p>\n          <PrimaryButton onClick={handlePublishFlow}>Publish</PrimaryButton>\n        </div>}\n        <div className=\"stage-action\">\n          <BiMessageSquareAdd\n            onClick={handleAddMessage}\n          />\n        </div>\n        {isToolbarActive && <Toolbar id={id} hideToolbar={hideToolbar} bot={flow.bot} flow={flow.id} />}\n        <Stage\n          width={getStageWidth()}\n          height={window.innerHeight - 70}\n          scaleX={state.layerScale}\n          scaleY={state.layerScale}\n          onMouseMove={handleMousePosition}\n          x={0}\n          y={0}\n          onClick={handleClickOnCanvas}>\n          <Layer name=\"layer_1\" draggable onTouchMove={onTouchPinch} onWheel={handleWheel}>\n            <Rect\n              x={-window.innerWidth}\n              y={-window.innerHeight}\n              width={window.innerWidth * 3}\n              height={window.innerHeight * 3}\n              fill=\"\"\n            />\n            {showToolOption && getToolOption()}\n            {builderState &&\n              typeof builderState == 'object' &&\n              builderState.map((item, index) => {\n                var messageHeight = calculateHeightOfMessageBox(item.children);\n                return (\n                  <React.Fragment key={item.id}>\n                    {(item.type === \"default\" && item.next) ? (\n                      <Edge\n                        state={state}\n                        height={messageHeight}\n                        node1={item.position}\n                        node2={getNextNode(item.next)}\n                      />\n                    ) : null}\n                    {getMessageBox(item, index, messageHeight)}\n                  </React.Fragment>\n                );\n              })}\n          </Layer>\n        </Stage>\n      </FlowBuilderWrapper>\n    );\n  }\n};\nconst getShadowColor = (item) => {\n  if (item.isSelected) {\n    if (item.type == \"default\") {\n      return '#1e824c';\n    } else if (item.type == \"flow\") {\n      return \"#f9ae23\";\n    }\n   \n  } else if (item.isHover) {\n    if (item.type == \"default\") {\n      return '#8078FF';\n    } else if (item.type == \"flow\") {\n      return \"#f9bf3b\";\n    }\n  } else {\n    return '#95bbdf';\n  }\n};\n\nconst getSelectedNode = (state) => {\n  return state.findIndex((obj) => obj.isSelected == true);\n};\n\nconst getMessageIndexWhichHasNextOfGivenMessageId = (state, messageId) => {\n  return state.findIndex((obj) => obj.next == messageId);\n}\n\n\nconst getHoveredNode = (state) => {\n  return state.findIndex((obj) => obj.isHover == true);\n};\n\nexport default withRouter(FlowBuilder);\n","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Toolbar/index.tsx",["118","119","120","121","122","123","124","125","126","127","128","129"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Text/index.tsx",["130","131","132","133","134","135","136","137","138","139"],"import React, { useEffect, useState, useRef, useContext } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { BuilderContext } from '../../../../../services/Builder/BuilderProvider';\nimport { AddTextWrapper } from './styles';\nimport { AddTextButton, ContentButton } from '../../../../common/buttons';\nimport { BiTrash } from 'react-icons/bi';\nimport Textarea from 'react-expanding-textarea';\nimport { updateText, deleteText } from '../../../../../apis/texts';\nimport { toast } from 'react-toastify';\nimport { saveButton } from '../../../../../apis/buttons';\nimport { v4 as uuidv4 } from 'uuid';\n\n\nconst FormText = ({ messageId, childId , showBtnEditor, setEditorContent}) => {\n  const [builderState, setBuilderState] = useContext(BuilderContext);\n  const { register, handleSubmit } = useForm({ mode: 'onChange' });\n  const [isChangingBody, setIsChangingBody] = useState(false);\n\n  const textAreaRef = useRef<HTMLTextAreaElement>(null);\n  const buttonRef = useRef<HTMLButtonElement>(null);\n\n  //Find index of specific object using findIndex method.\n  const childIndex = builderState[messageId].children.findIndex(\n    (obj) => obj.id == childId\n  );\n\n  const onTextChange = (data) => {\n    var height = textAreaRef.current.scrollHeight;\n    updateText({\n      text: data.text,\n      height: height\n    }, childId).then((response) => {\n      setBuilderState(\n        builderState.map((item, index) => {\n          if (index == messageId) {\n            item.children.map((child, ind) => {\n              if (ind == childIndex) {\n                child.value = data.text;\n                child.height = height;\n              }\n            });\n          }\n          return item;\n        })\n      );\n    }).catch((err) => {\n      toast.error(\"Something went wrong\");\n    })\n  };\n\n  const handleDelete = () => {\n    var height = builderState[messageId].height - textAreaRef.current.scrollHeight;\n    deleteText(childId)\n      .then(() => {\n        setBuilderState(\n          builderState.map((item, index) => {\n            if (index == messageId) {\n              item.height = height;\n              item.children.splice(childIndex,1)\n            }\n            return item;\n          })\n        );\n      })\n      .catch((err) => {\n        toast.error(\"Something went wrong\");\n    })\n  };\n\n  const handleAddButton = () => {\n    const buttonNumber = builderState[messageId].children[childIndex].buttons.length + 1;\n    saveButton({\n      name: 'Button #' + buttonNumber,\n      parent_type: 'text',\n      parent: childId\n    }).then((response) => {\n      setBuilderState(\n        builderState.map((item, index) => {\n          if (index == messageId) {\n            item.children.map((child) => {\n              if (child.id == childId) {\n                child.buttons.push(response.data);\n              }\n            });\n          }\n          return item;\n        })\n      );\n    }).catch((err) => {\n      toast.error(\"Something went wrong\")\n    })      \n  }\n\n  useEffect(() => {\n    if (textAreaRef.current) {\n      register(textAreaRef.current, {required: true, minLength: 3});\n    }\n  }, []);\n\n  return (\n    <AddTextWrapper>\n      <button className=\"action-btn\">\n        <BiTrash onClick={handleDelete} />\n      </button>\n      <div className={isChangingBody ? 'card-body active' : 'card-body'}>\n        <form onBlur={handleSubmit(onTextChange)}>\n          <Textarea\n            maxLength={500}\n            placeholder=\"Enter your text here\"\n            onBlur={() => setIsChangingBody(false)}\n            defaultValue={builderState[messageId].children[childIndex].value}\n            id=\"text\"\n            name=\"text\"\n            ref={textAreaRef}\n            onClick={() => setIsChangingBody(true)}\n          />\n        </form>\n      </div>\n      <div className=\"card-base\">\n        {builderState[messageId].children[childIndex].buttons && builderState[messageId].children[childIndex].buttons.map((button, index) => {\n          return (\n            <React.Fragment key={button.id}>\n              <ContentButton\n                ref={buttonRef}\n                onClick={(event) => {\n                setEditorContent({\n                  name: button.name,\n                  id: button.id,\n                  messageId: builderState[messageId].id,\n                  childId: childId,\n                  type: 'text',\n                  url: button.url,\n                  next: button.next\n                });\n                showBtnEditor();\n            }}>{button.name}</ContentButton>\n            </React.Fragment>\n          );\n        })}\n        <AddTextButton height=\"4rem\" width=\"100%\" onClick={handleAddButton}>\n          Add Button\n        </AddTextButton>\n      </div>\n    </AddTextWrapper>\n  );\n};\n\nexport default FormText;\n",["140","141"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Card/index.tsx",["142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Toolbar/styles.ts",[],["179","180"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Toolbar/BtnEditor.tsx",["181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Image/index.tsx",["222","223","224","225","226","227","228"],{"ruleId":"229","severity":1,"message":"230","line":4,"column":30,"nodeType":"231","messageId":"232","endLine":4,"endColumn":35},{"ruleId":"229","severity":1,"message":"233","line":45,"column":10,"nodeType":"231","messageId":"232","endLine":45,"endColumn":22},{"ruleId":"229","severity":1,"message":"234","line":48,"column":17,"nodeType":"231","messageId":"232","endLine":48,"endColumn":25},{"ruleId":"235","severity":1,"message":"236","line":58,"column":64,"nodeType":"237","messageId":"238","endLine":58,"endColumn":66},{"ruleId":"235","severity":1,"message":"236","line":59,"column":21,"nodeType":"237","messageId":"238","endLine":59,"endColumn":23},{"ruleId":"235","severity":1,"message":"236","line":312,"column":21,"nodeType":"237","messageId":"238","endLine":312,"endColumn":23},{"ruleId":"235","severity":1,"message":"236","line":315,"column":21,"nodeType":"237","messageId":"238","endLine":315,"endColumn":23},{"ruleId":"235","severity":1,"message":"236","line":324,"column":21,"nodeType":"237","messageId":"238","endLine":324,"endColumn":23},{"ruleId":"235","severity":1,"message":"236","line":338,"column":21,"nodeType":"237","messageId":"238","endLine":338,"endColumn":23},{"ruleId":"235","severity":1,"message":"236","line":341,"column":21,"nodeType":"237","messageId":"238","endLine":341,"endColumn":23},{"ruleId":"235","severity":1,"message":"236","line":350,"column":21,"nodeType":"237","messageId":"238","endLine":350,"endColumn":23},{"ruleId":"235","severity":1,"message":"236","line":362,"column":19,"nodeType":"237","messageId":"238","endLine":362,"endColumn":21},{"ruleId":"235","severity":1,"message":"236","line":379,"column":23,"nodeType":"237","messageId":"238","endLine":379,"endColumn":25},{"ruleId":"235","severity":1,"message":"236","line":399,"column":23,"nodeType":"237","messageId":"238","endLine":399,"endColumn":25},{"ruleId":"235","severity":1,"message":"236","line":400,"column":22,"nodeType":"237","messageId":"238","endLine":400,"endColumn":24},{"ruleId":"239","severity":1,"message":"240","line":401,"column":41,"nodeType":"241","messageId":"242","endLine":401,"endColumn":43},{"ruleId":"235","severity":1,"message":"236","line":402,"column":30,"nodeType":"237","messageId":"238","endLine":402,"endColumn":32},{"ruleId":"235","severity":1,"message":"236","line":404,"column":35,"nodeType":"237","messageId":"238","endLine":404,"endColumn":37},{"ruleId":"235","severity":1,"message":"236","line":411,"column":29,"nodeType":"237","messageId":"238","endLine":411,"endColumn":31},{"ruleId":"239","severity":1,"message":"240","line":412,"column":41,"nodeType":"241","messageId":"242","endLine":412,"endColumn":43},{"ruleId":"235","severity":1,"message":"236","line":413,"column":30,"nodeType":"237","messageId":"238","endLine":413,"endColumn":32},{"ruleId":"239","severity":1,"message":"240","line":415,"column":47,"nodeType":"241","messageId":"242","endLine":415,"endColumn":49},{"ruleId":"235","severity":1,"message":"236","line":416,"column":29,"nodeType":"237","messageId":"238","endLine":416,"endColumn":31},{"ruleId":"239","severity":1,"message":"240","line":417,"column":49,"nodeType":"241","messageId":"242","endLine":417,"endColumn":51},{"ruleId":"235","severity":1,"message":"236","line":418,"column":39,"nodeType":"237","messageId":"238","endLine":418,"endColumn":41},{"ruleId":"229","severity":1,"message":"243","line":441,"column":11,"nodeType":"231","messageId":"232","endLine":441,"endColumn":19},{"ruleId":"235","severity":1,"message":"244","line":465,"column":30,"nodeType":"237","messageId":"238","endLine":465,"endColumn":32},{"ruleId":"235","severity":1,"message":"236","line":472,"column":31,"nodeType":"237","messageId":"238","endLine":472,"endColumn":33},{"ruleId":"235","severity":1,"message":"236","line":489,"column":31,"nodeType":"237","messageId":"238","endLine":489,"endColumn":33},{"ruleId":"239","severity":1,"message":"240","line":490,"column":47,"nodeType":"241","messageId":"242","endLine":490,"endColumn":49},{"ruleId":"235","severity":1,"message":"236","line":491,"column":36,"nodeType":"237","messageId":"238","endLine":491,"endColumn":38},{"ruleId":"239","severity":1,"message":"240","line":492,"column":52,"nodeType":"241","messageId":"242","endLine":492,"endColumn":54},{"ruleId":"235","severity":1,"message":"236","line":493,"column":41,"nodeType":"237","messageId":"238","endLine":493,"endColumn":43},{"ruleId":"235","severity":1,"message":"236","line":543,"column":26,"nodeType":"237","messageId":"238","endLine":543,"endColumn":28},{"ruleId":"239","severity":1,"message":"240","line":546,"column":38,"nodeType":"241","messageId":"242","endLine":546,"endColumn":40},{"ruleId":"235","severity":1,"message":"236","line":547,"column":26,"nodeType":"237","messageId":"238","endLine":547,"endColumn":28},{"ruleId":"239","severity":1,"message":"240","line":548,"column":40,"nodeType":"241","messageId":"242","endLine":548,"endColumn":42},{"ruleId":"235","severity":1,"message":"236","line":549,"column":31,"nodeType":"237","messageId":"238","endLine":549,"endColumn":33},{"ruleId":"235","severity":1,"message":"236","line":553,"column":33,"nodeType":"237","messageId":"238","endLine":553,"endColumn":35},{"ruleId":"239","severity":1,"message":"240","line":554,"column":36,"nodeType":"241","messageId":"242","endLine":554,"endColumn":38},{"ruleId":"239","severity":1,"message":"240","line":555,"column":41,"nodeType":"241","messageId":"242","endLine":555,"endColumn":43},{"ruleId":"235","severity":1,"message":"236","line":556,"column":33,"nodeType":"237","messageId":"238","endLine":556,"endColumn":35},{"ruleId":"235","severity":1,"message":"236","line":588,"column":17,"nodeType":"237","messageId":"238","endLine":588,"endColumn":19},{"ruleId":"235","severity":1,"message":"236","line":623,"column":27,"nodeType":"237","messageId":"238","endLine":623,"endColumn":29},{"ruleId":"235","severity":1,"message":"236","line":642,"column":27,"nodeType":"237","messageId":"238","endLine":642,"endColumn":29},{"ruleId":"235","severity":1,"message":"236","line":644,"column":32,"nodeType":"237","messageId":"238","endLine":644,"endColumn":34},{"ruleId":"235","severity":1,"message":"236","line":645,"column":35,"nodeType":"237","messageId":"238","endLine":645,"endColumn":37},{"ruleId":"235","severity":1,"message":"236","line":647,"column":39,"nodeType":"237","messageId":"238","endLine":647,"endColumn":41},{"ruleId":"235","severity":1,"message":"236","line":652,"column":43,"nodeType":"237","messageId":"238","endLine":652,"endColumn":45},{"ruleId":"239","severity":1,"message":"240","line":654,"column":51,"nodeType":"241","messageId":"242","endLine":654,"endColumn":53},{"ruleId":"235","severity":1,"message":"236","line":655,"column":33,"nodeType":"237","messageId":"238","endLine":655,"endColumn":35},{"ruleId":"239","severity":1,"message":"240","line":656,"column":53,"nodeType":"241","messageId":"242","endLine":656,"endColumn":55},{"ruleId":"235","severity":1,"message":"236","line":657,"column":43,"nodeType":"237","messageId":"238","endLine":657,"endColumn":45},{"ruleId":"235","severity":1,"message":"236","line":699,"column":25,"nodeType":"237","messageId":"238","endLine":699,"endColumn":27},{"ruleId":"235","severity":1,"message":"236","line":719,"column":27,"nodeType":"237","messageId":"238","endLine":719,"endColumn":29},{"ruleId":"235","severity":1,"message":"236","line":721,"column":32,"nodeType":"237","messageId":"238","endLine":721,"endColumn":34},{"ruleId":"235","severity":1,"message":"236","line":722,"column":35,"nodeType":"237","messageId":"238","endLine":722,"endColumn":37},{"ruleId":"235","severity":1,"message":"236","line":724,"column":39,"nodeType":"237","messageId":"238","endLine":724,"endColumn":41},{"ruleId":"235","severity":1,"message":"236","line":729,"column":43,"nodeType":"237","messageId":"238","endLine":729,"endColumn":45},{"ruleId":"239","severity":1,"message":"240","line":731,"column":51,"nodeType":"241","messageId":"242","endLine":731,"endColumn":53},{"ruleId":"235","severity":1,"message":"236","line":732,"column":33,"nodeType":"237","messageId":"238","endLine":732,"endColumn":35},{"ruleId":"239","severity":1,"message":"240","line":733,"column":53,"nodeType":"241","messageId":"242","endLine":733,"endColumn":55},{"ruleId":"235","severity":1,"message":"236","line":734,"column":43,"nodeType":"237","messageId":"238","endLine":734,"endColumn":45},{"ruleId":"235","severity":1,"message":"236","line":766,"column":23,"nodeType":"237","messageId":"238","endLine":766,"endColumn":25},{"ruleId":"235","severity":1,"message":"236","line":776,"column":25,"nodeType":"237","messageId":"238","endLine":776,"endColumn":27},{"ruleId":"235","severity":1,"message":"236","line":778,"column":32,"nodeType":"237","messageId":"238","endLine":778,"endColumn":34},{"ruleId":"235","severity":1,"message":"236","line":779,"column":32,"nodeType":"237","messageId":"238","endLine":779,"endColumn":34},{"ruleId":"235","severity":1,"message":"236","line":781,"column":37,"nodeType":"237","messageId":"238","endLine":781,"endColumn":39},{"ruleId":"235","severity":1,"message":"236","line":787,"column":39,"nodeType":"237","messageId":"238","endLine":787,"endColumn":41},{"ruleId":"239","severity":1,"message":"240","line":789,"column":49,"nodeType":"241","messageId":"242","endLine":789,"endColumn":51},{"ruleId":"235","severity":1,"message":"236","line":790,"column":31,"nodeType":"237","messageId":"238","endLine":790,"endColumn":33},{"ruleId":"239","severity":1,"message":"240","line":791,"column":49,"nodeType":"241","messageId":"242","endLine":791,"endColumn":51},{"ruleId":"235","severity":1,"message":"236","line":792,"column":39,"nodeType":"237","messageId":"238","endLine":792,"endColumn":41},{"ruleId":"245","severity":1,"message":"246","line":838,"column":6,"nodeType":"247","endLine":838,"endColumn":8,"suggestions":"248"},{"ruleId":"235","severity":1,"message":"236","line":1137,"column":19,"nodeType":"237","messageId":"238","endLine":1137,"endColumn":21},{"ruleId":"235","severity":1,"message":"236","line":1139,"column":26,"nodeType":"237","messageId":"238","endLine":1139,"endColumn":28},{"ruleId":"235","severity":1,"message":"236","line":1207,"column":19,"nodeType":"237","messageId":"238","endLine":1207,"endColumn":21},{"ruleId":"235","severity":1,"message":"236","line":1209,"column":26,"nodeType":"237","messageId":"238","endLine":1209,"endColumn":28},{"ruleId":"235","severity":1,"message":"236","line":1214,"column":19,"nodeType":"237","messageId":"238","endLine":1214,"endColumn":21},{"ruleId":"235","severity":1,"message":"236","line":1216,"column":26,"nodeType":"237","messageId":"238","endLine":1216,"endColumn":28},{"ruleId":"235","severity":1,"message":"236","line":1225,"column":50,"nodeType":"237","messageId":"238","endLine":1225,"endColumn":52},{"ruleId":"229","severity":1,"message":"249","line":1228,"column":7,"nodeType":"231","messageId":"232","endLine":1228,"endColumn":50},{"ruleId":"235","severity":1,"message":"236","line":1229,"column":44,"nodeType":"237","messageId":"238","endLine":1229,"endColumn":46},{"ruleId":"235","severity":1,"message":"236","line":1234,"column":47,"nodeType":"237","messageId":"238","endLine":1234,"endColumn":49},{"ruleId":"229","severity":1,"message":"250","line":1,"column":39,"nodeType":"231","messageId":"232","endLine":1,"endColumn":45},{"ruleId":"229","severity":1,"message":"251","line":1,"column":47,"nodeType":"231","messageId":"232","endLine":1,"endColumn":56},{"ruleId":"229","severity":1,"message":"252","line":3,"column":59,"nodeType":"231","messageId":"232","endLine":3,"endColumn":75},{"ruleId":"235","severity":1,"message":"236","line":52,"column":59,"nodeType":"237","messageId":"238","endLine":52,"endColumn":61},{"ruleId":"235","severity":1,"message":"236","line":60,"column":19,"nodeType":"237","messageId":"238","endLine":60,"endColumn":21},{"ruleId":"235","severity":1,"message":"236","line":84,"column":21,"nodeType":"237","messageId":"238","endLine":84,"endColumn":23},{"ruleId":"235","severity":1,"message":"236","line":101,"column":21,"nodeType":"237","messageId":"238","endLine":101,"endColumn":23},{"ruleId":"245","severity":1,"message":"253","line":111,"column":6,"nodeType":"247","endLine":111,"endColumn":35,"suggestions":"254"},{"ruleId":"245","severity":1,"message":"255","line":111,"column":7,"nodeType":"256","endLine":111,"endColumn":34},{"ruleId":"235","severity":1,"message":"236","line":224,"column":19,"nodeType":"237","messageId":"238","endLine":224,"endColumn":21},{"ruleId":"235","severity":1,"message":"236","line":250,"column":19,"nodeType":"237","messageId":"238","endLine":250,"endColumn":21},{"ruleId":"235","severity":1,"message":"236","line":273,"column":19,"nodeType":"237","messageId":"238","endLine":273,"endColumn":21},{"ruleId":"229","severity":1,"message":"257","line":11,"column":16,"nodeType":"231","messageId":"232","endLine":11,"endColumn":22},{"ruleId":"235","severity":1,"message":"236","line":24,"column":21,"nodeType":"237","messageId":"238","endLine":24,"endColumn":23},{"ruleId":"235","severity":1,"message":"236","line":35,"column":21,"nodeType":"237","messageId":"238","endLine":35,"endColumn":23},{"ruleId":"239","severity":1,"message":"240","line":36,"column":44,"nodeType":"241","messageId":"242","endLine":36,"endColumn":46},{"ruleId":"235","severity":1,"message":"236","line":37,"column":23,"nodeType":"237","messageId":"238","endLine":37,"endColumn":25},{"ruleId":"235","severity":1,"message":"236","line":57,"column":23,"nodeType":"237","messageId":"238","endLine":57,"endColumn":25},{"ruleId":"235","severity":1,"message":"236","line":79,"column":21,"nodeType":"237","messageId":"238","endLine":79,"endColumn":23},{"ruleId":"239","severity":1,"message":"240","line":80,"column":39,"nodeType":"241","messageId":"242","endLine":80,"endColumn":41},{"ruleId":"235","severity":1,"message":"236","line":81,"column":28,"nodeType":"237","messageId":"238","endLine":81,"endColumn":30},{"ruleId":"245","severity":1,"message":"258","line":98,"column":6,"nodeType":"247","endLine":98,"endColumn":8,"suggestions":"259"},{"ruleId":"260","replacedBy":"261"},{"ruleId":"262","replacedBy":"263"},{"ruleId":"229","severity":1,"message":"257","line":7,"column":16,"nodeType":"231","messageId":"232","endLine":7,"endColumn":22},{"ruleId":"229","severity":1,"message":"264","line":27,"column":9,"nodeType":"231","messageId":"232","endLine":27,"endColumn":19},{"ruleId":"235","severity":1,"message":"236","line":34,"column":21,"nodeType":"237","messageId":"238","endLine":34,"endColumn":23},{"ruleId":"235","severity":1,"message":"236","line":44,"column":25,"nodeType":"237","messageId":"238","endLine":44,"endColumn":27},{"ruleId":"235","severity":1,"message":"244","line":55,"column":25,"nodeType":"237","messageId":"238","endLine":55,"endColumn":27},{"ruleId":"235","severity":1,"message":"236","line":70,"column":23,"nodeType":"237","messageId":"238","endLine":70,"endColumn":25},{"ruleId":"239","severity":1,"message":"240","line":71,"column":49,"nodeType":"241","messageId":"242","endLine":71,"endColumn":51},{"ruleId":"235","severity":1,"message":"236","line":72,"column":25,"nodeType":"237","messageId":"238","endLine":72,"endColumn":27},{"ruleId":"235","severity":1,"message":"236","line":75,"column":29,"nodeType":"237","messageId":"238","endLine":75,"endColumn":31},{"ruleId":"235","severity":1,"message":"236","line":94,"column":21,"nodeType":"237","messageId":"238","endLine":94,"endColumn":23},{"ruleId":"235","severity":1,"message":"236","line":96,"column":23,"nodeType":"237","messageId":"238","endLine":96,"endColumn":25},{"ruleId":"235","severity":1,"message":"236","line":98,"column":27,"nodeType":"237","messageId":"238","endLine":98,"endColumn":29},{"ruleId":"235","severity":1,"message":"236","line":101,"column":27,"nodeType":"237","messageId":"238","endLine":101,"endColumn":29},{"ruleId":"235","severity":1,"message":"236","line":117,"column":48,"nodeType":"237","messageId":"238","endLine":117,"endColumn":50},{"ruleId":"235","severity":1,"message":"236","line":130,"column":28,"nodeType":"237","messageId":"238","endLine":130,"endColumn":30},{"ruleId":"235","severity":1,"message":"236","line":146,"column":23,"nodeType":"237","messageId":"238","endLine":146,"endColumn":25},{"ruleId":"235","severity":1,"message":"236","line":148,"column":25,"nodeType":"237","messageId":"238","endLine":148,"endColumn":27},{"ruleId":"235","severity":1,"message":"236","line":150,"column":27,"nodeType":"237","messageId":"238","endLine":150,"endColumn":29},{"ruleId":"235","severity":1,"message":"236","line":182,"column":21,"nodeType":"237","messageId":"238","endLine":182,"endColumn":23},{"ruleId":"239","severity":1,"message":"240","line":183,"column":44,"nodeType":"241","messageId":"242","endLine":183,"endColumn":46},{"ruleId":"235","severity":1,"message":"236","line":184,"column":23,"nodeType":"237","messageId":"238","endLine":184,"endColumn":25},{"ruleId":"239","severity":1,"message":"240","line":185,"column":43,"nodeType":"241","messageId":"242","endLine":185,"endColumn":45},{"ruleId":"235","severity":1,"message":"236","line":186,"column":25,"nodeType":"237","messageId":"238","endLine":186,"endColumn":27},{"ruleId":"235","severity":1,"message":"236","line":213,"column":21,"nodeType":"237","messageId":"238","endLine":213,"endColumn":23},{"ruleId":"239","severity":1,"message":"240","line":214,"column":44,"nodeType":"241","messageId":"242","endLine":214,"endColumn":46},{"ruleId":"235","severity":1,"message":"236","line":215,"column":23,"nodeType":"237","messageId":"238","endLine":215,"endColumn":25},{"ruleId":"239","severity":1,"message":"240","line":216,"column":43,"nodeType":"241","messageId":"242","endLine":216,"endColumn":45},{"ruleId":"235","severity":1,"message":"236","line":217,"column":25,"nodeType":"237","messageId":"238","endLine":217,"endColumn":27},{"ruleId":"235","severity":1,"message":"236","line":245,"column":21,"nodeType":"237","messageId":"238","endLine":245,"endColumn":23},{"ruleId":"239","severity":1,"message":"240","line":246,"column":39,"nodeType":"241","messageId":"242","endLine":246,"endColumn":41},{"ruleId":"235","severity":1,"message":"236","line":247,"column":28,"nodeType":"237","messageId":"238","endLine":247,"endColumn":30},{"ruleId":"239","severity":1,"message":"240","line":248,"column":45,"nodeType":"241","messageId":"242","endLine":248,"endColumn":47},{"ruleId":"235","severity":1,"message":"236","line":249,"column":35,"nodeType":"237","messageId":"238","endLine":249,"endColumn":37},{"ruleId":"235","severity":1,"message":"236","line":268,"column":21,"nodeType":"237","messageId":"238","endLine":268,"endColumn":23},{"ruleId":"245","severity":1,"message":"258","line":284,"column":6,"nodeType":"247","endLine":284,"endColumn":23,"suggestions":"265"},{"ruleId":"239","severity":1,"message":"266","line":297,"column":70,"nodeType":"241","messageId":"267","endLine":297,"endColumn":72},{"ruleId":"268","severity":1,"message":"269","line":305,"column":23,"nodeType":"270","endLine":305,"endColumn":74},{"ruleId":"260","replacedBy":"271"},{"ruleId":"262","replacedBy":"272"},{"ruleId":"229","severity":1,"message":"273","line":8,"column":8,"nodeType":"231","messageId":"232","endLine":8,"endColumn":16},{"ruleId":"229","severity":1,"message":"274","line":9,"column":10,"nodeType":"231","messageId":"232","endLine":9,"endColumn":21},{"ruleId":"229","severity":1,"message":"275","line":10,"column":10,"nodeType":"231","messageId":"232","endLine":10,"endColumn":17},{"ruleId":"229","severity":1,"message":"276","line":11,"column":10,"nodeType":"231","messageId":"232","endLine":11,"endColumn":24},{"ruleId":"229","severity":1,"message":"277","line":17,"column":35,"nodeType":"231","messageId":"232","endLine":17,"endColumn":41},{"ruleId":"235","severity":1,"message":"236","line":27,"column":32,"nodeType":"237","messageId":"238","endLine":27,"endColumn":34},{"ruleId":"235","severity":1,"message":"236","line":30,"column":30,"nodeType":"237","messageId":"238","endLine":30,"endColumn":32},{"ruleId":"239","severity":1,"message":"240","line":31,"column":46,"nodeType":"241","messageId":"242","endLine":31,"endColumn":48},{"ruleId":"235","severity":1,"message":"236","line":32,"column":32,"nodeType":"237","messageId":"238","endLine":32,"endColumn":34},{"ruleId":"239","severity":1,"message":"240","line":33,"column":48,"nodeType":"241","messageId":"242","endLine":33,"endColumn":50},{"ruleId":"235","severity":1,"message":"236","line":34,"column":37,"nodeType":"237","messageId":"238","endLine":34,"endColumn":39},{"ruleId":"235","severity":1,"message":"236","line":46,"column":39,"nodeType":"237","messageId":"238","endLine":46,"endColumn":41},{"ruleId":"235","severity":1,"message":"236","line":49,"column":30,"nodeType":"237","messageId":"238","endLine":49,"endColumn":32},{"ruleId":"239","severity":1,"message":"240","line":50,"column":46,"nodeType":"241","messageId":"242","endLine":50,"endColumn":48},{"ruleId":"235","severity":1,"message":"236","line":51,"column":32,"nodeType":"237","messageId":"238","endLine":51,"endColumn":34},{"ruleId":"239","severity":1,"message":"240","line":52,"column":44,"nodeType":"241","messageId":"242","endLine":52,"endColumn":46},{"ruleId":"235","severity":1,"message":"236","line":53,"column":35,"nodeType":"237","messageId":"238","endLine":53,"endColumn":37},{"ruleId":"239","severity":1,"message":"240","line":54,"column":53,"nodeType":"241","messageId":"242","endLine":54,"endColumn":55},{"ruleId":"235","severity":1,"message":"236","line":55,"column":43,"nodeType":"237","messageId":"238","endLine":55,"endColumn":45},{"ruleId":"235","severity":1,"message":"236","line":92,"column":28,"nodeType":"237","messageId":"238","endLine":92,"endColumn":30},{"ruleId":"235","severity":1,"message":"236","line":95,"column":27,"nodeType":"237","messageId":"238","endLine":95,"endColumn":29},{"ruleId":"239","severity":1,"message":"240","line":96,"column":47,"nodeType":"241","messageId":"242","endLine":96,"endColumn":49},{"ruleId":"235","severity":1,"message":"236","line":97,"column":28,"nodeType":"237","messageId":"238","endLine":97,"endColumn":30},{"ruleId":"235","severity":1,"message":"236","line":99,"column":35,"nodeType":"237","messageId":"238","endLine":99,"endColumn":37},{"ruleId":"235","severity":1,"message":"236","line":108,"column":35,"nodeType":"237","messageId":"238","endLine":108,"endColumn":37},{"ruleId":"235","severity":1,"message":"236","line":111,"column":27,"nodeType":"237","messageId":"238","endLine":111,"endColumn":29},{"ruleId":"239","severity":1,"message":"240","line":112,"column":47,"nodeType":"241","messageId":"242","endLine":112,"endColumn":49},{"ruleId":"235","severity":1,"message":"236","line":113,"column":28,"nodeType":"237","messageId":"238","endLine":113,"endColumn":30},{"ruleId":"239","severity":1,"message":"240","line":114,"column":45,"nodeType":"241","messageId":"242","endLine":114,"endColumn":47},{"ruleId":"235","severity":1,"message":"236","line":115,"column":31,"nodeType":"237","messageId":"238","endLine":115,"endColumn":33},{"ruleId":"235","severity":1,"message":"236","line":117,"column":39,"nodeType":"237","messageId":"238","endLine":117,"endColumn":41},{"ruleId":"235","severity":1,"message":"236","line":155,"column":32,"nodeType":"237","messageId":"238","endLine":155,"endColumn":34},{"ruleId":"239","severity":1,"message":"240","line":156,"column":48,"nodeType":"241","messageId":"242","endLine":156,"endColumn":50},{"ruleId":"235","severity":1,"message":"236","line":157,"column":34,"nodeType":"237","messageId":"238","endLine":157,"endColumn":36},{"ruleId":"235","severity":1,"message":"236","line":158,"column":46,"nodeType":"237","messageId":"238","endLine":158,"endColumn":48},{"ruleId":"235","severity":1,"message":"236","line":160,"column":41,"nodeType":"237","messageId":"238","endLine":160,"endColumn":43},{"ruleId":"235","severity":1,"message":"236","line":165,"column":53,"nodeType":"237","messageId":"238","endLine":165,"endColumn":55},{"ruleId":"235","severity":1,"message":"236","line":167,"column":41,"nodeType":"237","messageId":"238","endLine":167,"endColumn":43},{"ruleId":"235","severity":1,"message":"236","line":169,"column":47,"nodeType":"237","messageId":"238","endLine":169,"endColumn":49},{"ruleId":"235","severity":1,"message":"236","line":203,"column":22,"nodeType":"237","messageId":"238","endLine":203,"endColumn":24},{"ruleId":"245","severity":1,"message":"278","line":210,"column":6,"nodeType":"247","endLine":210,"endColumn":52,"suggestions":"279"},{"ruleId":"229","severity":1,"message":"280","line":5,"column":10,"nodeType":"231","messageId":"232","endLine":5,"endColumn":23},{"ruleId":"235","severity":1,"message":"236","line":18,"column":21,"nodeType":"237","messageId":"238","endLine":18,"endColumn":23},{"ruleId":"235","severity":1,"message":"236","line":35,"column":23,"nodeType":"237","messageId":"238","endLine":35,"endColumn":25},{"ruleId":"239","severity":1,"message":"240","line":36,"column":46,"nodeType":"241","messageId":"242","endLine":36,"endColumn":48},{"ruleId":"235","severity":1,"message":"236","line":37,"column":25,"nodeType":"237","messageId":"238","endLine":37,"endColumn":27},{"ruleId":"235","severity":1,"message":"236","line":59,"column":21,"nodeType":"237","messageId":"238","endLine":59,"endColumn":23},{"ruleId":"268","severity":1,"message":"269","line":82,"column":11,"nodeType":"270","endLine":82,"endColumn":58},"@typescript-eslint/no-unused-vars","'Image' is defined but never used.","Identifier","unusedVar","'isPublishing' is assigned a value but never used.","'setState' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'oldScale' is assigned a value but never used.","Expected '!==' and instead saw '!='.","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'props.match.params.id' and 'setBuilderState'. Either include them or remove the dependency array.","ArrayExpression",["281"],"'getMessageIndexWhichHasNextOfGivenMessageId' is assigned a value but never used.","'useRef' is defined but never used.","'useEffect' is defined but never used.","'BtnEditorWrapper' is defined but never used.","React Hook React.useEffect has missing dependencies: 'builderState', 'objIndex', and 'setValue'. Either include them or remove the dependency array.",["282"],"React Hook React.useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","MemberExpression","'uuidv4' is defined but never used.","React Hook useEffect has a missing dependency: 'register'. Either include it or remove the dependency array.",["283"],"no-native-reassign",["284"],"no-negated-in-lhs",["285"],"'headingRef' is assigned a value but never used.",["286"],"Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement",["284"],["285"],"'Textarea' is defined but never used.","'saveMessage' is defined but never used.","'S_IFBLK' is defined but never used.","'GiButtonFinger' is defined but never used.","'errors' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'builderState', 'editorContent.next', 'editorContent.url', and 'setValue'. Either include them or remove the dependency array. If 'setNextUrl' needs the current value of 'editorContent.url', you can also switch to useReducer instead of useState and read 'editorContent.url' in the reducer.",["287"],"'AddTextButton' is defined but never used.",{"desc":"288","fix":"289"},{"desc":"290","fix":"291"},{"desc":"292","fix":"293"},"no-global-assign","no-unsafe-negation",{"desc":"294","fix":"295"},{"desc":"296","fix":"297"},"Update the dependencies array to be: [props.match.params.id, setBuilderState]",{"range":"298","text":"299"},"Update the dependencies array to be: [builderState, objIndex, setValue]",{"range":"300","text":"301"},"Update the dependencies array to be: [register]",{"range":"302","text":"303"},"Update the dependencies array to be: [activeCardIndex, register]",{"range":"304","text":"305"},"Update the dependencies array to be: [builderState, editorContent.name, editorContent.next, editorContent.url, nextMessageName, nextUrl, setValue]",{"range":"306","text":"307"},[26596,26598],"[props.match.params.id, setBuilderState]",[3358,3387],"[builderState, objIndex, setValue]",[3089,3091],"[register]",[8845,8862],"[activeCardIndex, register]",[7300,7346],"[builderState, editorContent.name, editorContent.next, editorContent.url, nextMessageName, nextUrl, setValue]"]