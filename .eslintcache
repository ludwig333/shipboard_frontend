[{"/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/main/Flows/helper.tsx":"1","/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/main/Flows/builder.tsx":"2"},{"size":7418,"mtime":1612752766434,"results":"3","hashOfConfig":"4"},{"size":29414,"mtime":1612752673982,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"8"},"v8ty68",{"filePath":"9","messages":"10","errorCount":0,"warningCount":46,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/main/Flows/helper.tsx",["12","13","14"],"import React from 'react';\nimport { Rect, Image, Text, Group, Shape, Circle } from 'react-konva';\nimport useImage from 'use-image';\n\nexport const Edge = ({ height, node1, node2, width = 0 }) => {\n  node1 = {\n    x: node1.x + 350 - width,\n    y: node1.y + height - 20\n  }\n  node2 = {\n    x: node2.x,\n    y: node2.y + 20\n  }\n  const p1 = { x: (node1.x + node2.x) / 2, y: node1.y };\n  const p2 = { x: (node1.x + node2.x) / 2, y: node2.y };\n  return (\n    <Shape\n      sceneFunc={(context, shape) => {\n        context.beginPath();\n        context.moveTo(node1.x, node1.y);\n        context.bezierCurveTo(p1.x, p1.y, p2.x, p2.y, node2.x, node2.y);\n        // (!) Konva specific method, it is very important\n        context.fillStrokeShape(shape);\n      }}\n      stroke=\"black\"\n      strokeWidth={2}\n    />\n  );\n};\n\nexport const calculateHeightOfMessageBox = (message) => {\n  var height = 110;\n\n  if (typeof message == 'object') {\n    if (message.length > 0) {\n      message.forEach((item) => {\n        if (item.type === 'card') {\n          var activeCard = getActiveCard(item.cards);\n          height +=item.cards[activeCard].height + 20;\n        } else if (item.type === 'text') { \n          const buttons = item.buttons.length;\n          height += (item.height * 1.05) + (buttons * 40) + 20;\n        } else {\n          height += item.height + 20;\n        }\n      });\n    } else {\n      height += 90;\n    }\n  }\n  return height;\n};\nexport const getImage = (children, lastPosition) => {\n  if (children.imagePreviewUrl) {\n    return (\n      <URLImage\n        x={25}\n        y={lastPosition}\n        image={children.imagePreviewUrl}\n        height={180}\n        width={300}\n      />\n    );\n  } else {\n    return (\n      <Group>\n        <Rect\n          x={20}\n          y={lastPosition}\n          cornerRadius={5}\n          height={children.height}\n          width={300}\n          fill=\"#E1E5EA\"\n          stroke=\"#8392AB\"\n          dash={[10, 5]}\n          strokeWidth={1}\n          shadowColor=\"#95bbdf\"\n          shadowOpacity={0.5}\n          shadowBlur={7}\n        />\n        <Text\n          x={120}\n          y={lastPosition + 65}\n          text={'Upload Image'}\n          fontSize={16}\n        />\n      </Group>\n    );\n  }\n};\n\nexport const handleRenderingCards = (children) => {\n  var activeCard = getActiveCard(children.cards);\n\n  return (\n    <React.Fragment>\n      <Rect\n        x={0}\n        y={0}\n        cornerRadius={5}\n        fill=\"#F2F5F7\"\n        height={children.cards[activeCard].height - 30}\n        width={300}\n        stroke=\"lightGrey\"\n        strokeWidth={1}\n        shadowColor=\"#95bbdf\"\n        shadowOpacity={0.5}\n        shadowBlur={7}\n      />\n      {getCardImage(children.cards[activeCard])}\n      <Text\n        x={10}\n        width={260}\n        y={185}\n        text={children.cards[activeCard].heading}\n        fontFamily={'Roboto'}\n        fontSize={16}\n        fontStyle={'bold'}\n        fill={'black'}\n      />\n      <Text\n        x={10}\n        y={210}\n        width={280}\n        text={children.cards[activeCard].body}\n        fontFamily={'Roboto'}\n        fontSize={15}\n        fill={'black'}\n        lineHeight={1.5}\n      />\n    </React.Fragment>\n  );\n};\nconst getCardImage = (children) => {\n  if (children.imagePreviewUrl) {\n    return (\n      <URLImage\n        x={0}\n        y={0}\n        image={children.imagePreviewUrl}\n        height={160}\n        width={300}\n      />\n    );\n  } else {\n    return (\n      <Group>\n        <Rect\n          x={20}\n          y={20}\n          fill=\"#E1E5EA\"\n          stroke=\"#8392AB\"\n          cornerRadius={5}\n          height={150}\n          width={260}\n          dash={[10, 5]}\n          strokeWidth={1}\n          shadowColor=\"#95bbdf\"\n          shadowOpacity={0.5}\n          shadowBlur={7}\n        />\n        <Text x={100} y={85} text={'Upload Image'} fontSize={16} />\n      </Group>\n    );\n  }\n};\n\ntype URLImageType = {\n  x: any,\n  y: any,\n  image: any,\n  height: any,\n  width: any,\n  onMouseOver?: any,\n  onMouseOut?: any,\n  onClick?: any\n}\nexport const URLImage = (props:URLImageType) => {\n  const [img] = useImage(props.image);\n  return <Image image={img} x={props.x} y={props.y} height={props.height} width={props.width} onMouseOver={props.onMouseOver} onMouseOut={props.onMouseOut} onClick={props.onClick}/>;\n};\n\nexport const getActiveCard = (cards) => {\n  var activeCard = cards.findIndex((obj) => obj.active == true);\n  return activeCard;\n};\n\n/**\n * Stage zoom pan\n */\nexport const handleWheel = (e) => {\n  e.evt.preventDefault();\n\n  const scaleBy = 0.9;\n  const stage = e.target.getStage();\n  const layer = stage.find('.layer_1')[0];\n\n  const oldScale = layer.scaleX();\n  const newScale = e.evt.deltaY > 0 ? oldScale * scaleBy : oldScale / scaleBy;\n  layer.scale({ x: newScale, y: newScale });\n\n  const layerPointerPosition = getRelativePointerPosition(layer);\n  const correctedLayerPointerPosition = {\n    x: layer.x() + layerPointerPosition.x * newScale,\n    y: layer.y() + layerPointerPosition.y * newScale,\n  };\n\n  const mousePointTo = {\n    x: correctedLayerPointerPosition.x / oldScale - layer.x() / oldScale,\n    y: correctedLayerPointerPosition.y / oldScale - layer.y() / oldScale,\n  };\n\n  const newLayerPos = {\n    x:\n      -(mousePointTo.x - correctedLayerPointerPosition.x / newScale) * newScale,\n    y:\n      -(mousePointTo.y - correctedLayerPointerPosition.y / newScale) * newScale,\n  };\n\n  layer.position(newLayerPos);\n  stage.draw();\n};\n\nexport const getRelativePointerPosition = (node) => {\n  // returns mouse pointer position relative to the input node\n  var transform = node.getAbsoluteTransform().copy();\n  transform.invert();\n  var pos = node.getStage().getPointerPosition();\n  return transform.point(pos);\n};\n\n/** Touch Pinch Zooom */\nfunction getDistance(p1, p2) {\n  return Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2));\n}\n\nfunction getCenter(p1, p2) {\n  return {\n    x: (p1.x + p2.x) / 2,\n    y: (p1.y + p2.y) / 2,\n  };\n}\nvar lastCenter = null;\nvar lastDist = 0;\n\nexport const onTouchPinch = (e) => {\n  e.evt.preventDefault();\n  var touch1 = e.evt.touches[0];\n  var touch2 = e.evt.touches[1];\n  const stage = e.target.getStage();\n  \n  if (touch1 && touch2) {\n    // if the stage was under Konva's drag&drop\n    // we need to stop it, and implement our own pan logic with two pointers\n    if (stage.isDragging()) {\n      stage.stopDrag();\n    }\n\n    var p1 = {\n      x: touch1.clientX,\n      y: touch1.clientY,\n    };\n    var p2 = {\n      x: touch2.clientX,\n      y: touch2.clientY,\n    };\n\n    if (!lastCenter) {\n      lastCenter = getCenter(p1, p2);\n      return;\n    }\n    var newCenter = getCenter(p1, p2);\n\n    var dist = getDistance(p1, p2);\n\n    if (!lastDist) {\n      lastDist = dist;\n    }\n\n    // local coordinates of center point\n    var pointTo = {\n      x: (newCenter.x - stage.x()) / stage.scaleX(),\n      y: (newCenter.y - stage.y()) / stage.scaleX(),\n    };\n\n    var scale = stage.scaleX() * (dist / lastDist);\n\n    stage.scaleX(scale);\n    stage.scaleY(scale);\n\n    // calculate new position of the stage\n    var dx = newCenter.x - lastCenter.x;\n    var dy = newCenter.y - lastCenter.y;\n\n    var newPos = {\n      x: newCenter.x - pointTo.x * scale + dx,\n      y: newCenter.y - pointTo.y * scale + dy,\n    };\n\n    stage.position(newPos);\n    stage.batchDraw();\n\n    lastDist = dist;\n    lastCenter = newCenter;\n  }\n};\n\nconst onTouchEnd = (e) => {\n  lastDist = 0;\n  lastCenter = null;\n}","/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/main/Flows/builder.tsx",["15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60"],"import React, { useState } from 'react';\nimport {withRouter} from 'react-router-dom'\nimport { FlowBuilderWrapper } from './styles';\nimport { Stage, Layer, Rect, Image, Text, Group, Circle } from 'react-konva';\nimport Toolbar from '../../../components/dashboard/builder/Toolbar/index';\nimport PuffLoader from \"react-spinners/PuffLoader\";\n\nimport {\n  handleRenderingCards,\n  getImage,\n  calculateHeightOfMessageBox,\n  handleWheel,\n  onTouchPinch,\n  Edge,\n  URLImage,\n} from './helper';\nimport {\n  useBuilder,\n} from '../../../services/Builder/BuilderProvider';\nimport { BiMessageSquareAdd } from 'react-icons/bi';\nimport { saveMessage, getMessages, updateMessage, deleteMessage, createAndConnectMessage } from '../../../apis/messages';\nimport { toast } from 'react-toastify';\nimport { getFlow } from '../../../apis/flows';\nimport { createAndConnectWithButton, updateButton } from '../../../apis/buttons';\nimport Konva from 'konva';\n\nconst FlowBuilder = (props) => {\n  const [isToolbarActive, setIsToolbarActive] = useState(null);\n  const [builderState, setBuilderState, sidebar] = useBuilder();\n  const [flow, setFlow] = useState(null);\n  const [id, setId] = useState(null);\n  const [mousePosition, setMousePosition] = useState({\n    x: 0,\n    y: 0,\n  });\n  const [isEdging, setIsSetting] = useState(false);\n  const [showToolOption, setShowToolOption] = useState(false);\n  const [edgingMessageId, setEdgingMessageId] = useState(null);\n  const [edgingButtonId, setEdgingButtonId] = useState(null);\n  const [edgingButtonMessageId, setEdgingButtonMessageId] = useState(null);\n  const [edgingButtonChildId, setEdgingButtonChildId] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const [state, setState] = useState({\n    layerScale: 1,\n    layerX: 0,\n    layerY: 0,\n  });\n\n  const TrashIcon = \"data:image/svg+xml;base64,\" + window.btoa('<svg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" viewBox=\"0 0 24 24\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"none\" d=\"M17.004 20L17.003 8h-1-8-1v12H17.004zM13.003 10h2v8h-2V10zM9.003 10h2v8h-2V10zM9.003 4H15.003V6H9.003z\"></path><path d=\"M5.003,20c0,1.103,0.897,2,2,2h10c1.103,0,2-0.897,2-2V8h2V6h-3h-1V4c0-1.103-0.897-2-2-2h-6c-1.103,0-2,0.897-2,2v2h-1h-3 v2h2V20z M9.003,4h6v2h-6V4z M8.003,8h8h1l0.001,12H7.003V8H8.003z\"></path><path d=\"M9.003 10H11.003V18H9.003zM13.003 10H15.003V18H13.003z\"></path></svg>');\n\n  const getNextNode = (id) => {\n    if (id) {\n      const nextIndex = builderState.findIndex((obj) => obj.id == id);\n      if (nextIndex == -1) {\n        return mousePosition;\n      }\n      return builderState[nextIndex].position;\n    }\n  };\n\n  const hideToolbar = () => {\n    setIsToolbarActive(false);\n    setId(0);\n  };\n\n  const showToolbar = (id) => {\n    setId(id);\n    setIsToolbarActive(true);\n  };\n\n \nconst handleRenderingChildrens = (message) => {\n  var lastPosition = 70;\n  return message.children.map(function (child) {\n    var yposition = lastPosition;\n    if (child.type === 'card') {\n      lastPosition = lastPosition + child.cards[0].height;\n    } else if (child.type === 'text') {\n      const buttons = child.buttons.length;\n      lastPosition = lastPosition + child.height + (buttons * 40) + 40;\n    } else if (child.type === 'image') {\n      lastPosition = lastPosition + child.height + 20;\n    }\n    return getChildren(message, child, yposition);\n  });\n};\n  \n  const getChildren = (message, child, lastPosition) => {\n    // var messageHeight = calculateHeightOfMessageBox(message.children);\n  if (child.type === 'text') {\n    var textButtons = child.buttons;\n    var boxHeight = (child.height * 1.05) + (textButtons.length * 40) + 10;\n    return (\n      <Group x={20} y={lastPosition}>\n        <Rect\n          fill=\"#F0F4F7\"\n          cornerRadius={5}\n          height={boxHeight}\n          width={300}\n          stroke=\"lightGrey\"\n          strokeWidth={1}\n          shadowColor=\"#95bbdf\"\n          shadowOpacity={0.5}\n          shadowBlur={7}\n        />\n        <Text\n          x={15}\n          y={7}\n          text={child.value}\n          fontSize={15}\n          lineHeight={1.2}\n          width={280}\n        />\n        {child.buttons.map((button, index) => {\n          var y = (child.height * 1.05) + (40 * index) + 10;\n          var node2 = getNextNode(button.next);\n          return (\n            <Group key={button.id}>\n              { button.next &&\n                  <Edge\n                    height={boxHeight}\n                    node1={{ x: -60, y: - boxHeight + 30 + (y)}}\n                    node2={{ x: node2.x - message.position.x -20, y: node2.y - message.position.y - 80}}\n                    width={20}\n                  />\n              }\n              <Rect\n                x={25}\n                y={y}\n                fill=\"#FFFFFF\"\n                cornerRadius={5}\n                height={30}\n                width={250}\n                shadowOpacity={0.5}\n                shadowBlur={7}\n                align={\"center\"}\n              />\n              <Text\n                x={10}\n                y={y + 3}\n                text={button.name}\n                fontSize={15}\n                width={280}\n                lineHeight={1.5}\n                align={\"center\"}\n              />\n              <Circle x={260} y={y + 14} radius={9} fill=\"#8392AB\" strokeWidth={1}\n                onMouseOver={() => { document.body.style.cursor = 'pointer' }}\n                onMouseOut={() => { document.body.style.cursor = 'default' }}\n                onClick={(e) => {\n                  e.cancelBubble = true;\n                  connectButtonEdge(message.id, child.id, button.id)\n                }}\n             />\n            </Group>\n          );\n         })}\n      </Group>\n    );\n  } else if (child.type === 'image') {\n    return getImage(child, lastPosition);\n  } else if (child.type === 'card') {\n    return (\n      <Group x={20} y={lastPosition}>\n        {handleRenderingCards(child)}\n      </Group>\n    );\n  }\n};\n\n  const getStageWidth = () => {\n    return sidebar ? window.innerWidth - 280 : window.innerWidth - 90;\n  };\n\n  const setSelectedTrue = (messageId) => {\n    var previousSelected = getSelectedNode(builderState);\n    if (previousSelected >= 0) {\n      setBuilderState(\n        builderState.map((item, index) => {\n          if (index == messageId) {\n            item.isSelected = true;\n          }\n          if (index == previousSelected) {\n            item.isSelected = false;\n          }\n          return item;\n        })\n      );\n    } else {\n      setBuilderState(\n        builderState.map((item, index) => {\n          if (index == messageId) {\n            item.isSelected = true;\n          }\n          return item;\n        })\n      );\n    }\n  };\n\n  const setHoverTrue = (messageId) => {\n    var previousHover = getHoveredNode(builderState);\n    if (previousHover >= 0) {\n      setBuilderState(\n        builderState.map((item, index) => {\n          if (index == messageId) {\n            item.isHover = true;\n          }\n          if (index == previousHover) {\n            item.isHover = false;\n          }\n          return item;\n        })\n      );\n    } else {\n      setBuilderState(\n        builderState.map((item, index) => {\n          if (index == messageId) {\n            item.isHover = true;\n          }\n          return item;\n        })\n      );\n    }\n  };\n\n  const setHoverFalse = (messageId) => {\n    setBuilderState(\n      builderState.map((item, index) => {\n        if (index == messageId) {\n          item.isHover = false;\n        }\n        return item;\n      })\n    );\n  };\n\n  const connectEdge = (messageId) => {\n    setEdgingButtonId(null);\n    setEdgingMessageId(null);\n\n    if (!showToolOption) {\n      setIsSetting(true);\n      setEdgingMessageId(messageId);\n      setBuilderState(\n        builderState.map((item) => {\n          if (item.id == messageId) {\n            item.next = 'dummy';\n          }\n          return item;\n        })\n      );\n    }\n  };\n\n  const connectButtonEdge = (messageId, childId, buttonId) => {\n    setEdgingButtonId(null);\n    setEdgingMessageId(null);\n    if (!showToolOption) {\n      setIsSetting(true);\n      setEdgingButtonId(buttonId);\n      setEdgingButtonMessageId(messageId);\n      setEdgingButtonChildId(childId);\n\n      setBuilderState(\n        builderState.map((item) => {\n          if (item.id == messageId) {\n            item.children.map((child) => {\n              if (child.id == childId) {\n                child.buttons.map((button) => {\n                  if (button.id == buttonId) {\n                    button.next = \"dummy\"\n                  }\n                  return button;\n                })\n              }\n              return child;\n            })\n          }\n          return item;\n        })\n      );\n    }\n  }\n\n  const handleMousePosition = (event) => {\n    if (!showToolOption) {\n      var point = event.target.getStage().getPointerPosition();\n      setMousePosition({\n        x: point.x,\n        y: point.y,\n      });\n    }\n  };\n\n  const handleClickOnCanvas = () => {\n    if (isEdging) {\n      var hoveredIndex = getHoveredNode(builderState);\n      if (hoveredIndex > 0) {\n        //If the edging is hovered over another message and connect that message\n        var messageIdOfHover = builderState[hoveredIndex].id\n        if (messageIdOfHover != edgingMessageId) {\n          if (edgingMessageId) {\n            updateMessage({\n              next: messageIdOfHover\n            }, edgingMessageId).then((response) => { \n              setBuilderState(\n                builderState.map((item, index) => {\n                  if (item.id == edgingMessageId) {\n                    item.next = messageIdOfHover\n                  }\n                  return item;\n                })\n              );\n            }).catch((err) => {\n              toast.error(\"Something went wrong\");\n            }).finally(() => {\n              setEdgingMessageId(null);\n            })\n           } else if (edgingButtonId) {\n            updateButton({\n              next: messageIdOfHover\n            }, edgingButtonId).then((response) => {\n              setBuilderState(\n                builderState.map((item, index) => {\n                  if (item.id == edgingButtonMessageId) {\n                    item.children.map((child) => {\n                      if (child.id == edgingButtonChildId) {\n                        child.buttons.map((button) => {\n                          if (button.id == edgingButtonId) {\n                            button.next = messageIdOfHover\n                          }\n                        })\n                      }\n                    })\n                  }  \n                  return item;\n                })\n              );\n            }).catch((err) => {\n              toast.error(\"Something went wrong\")\n            }).finally(() => {\n              setEdgingButtonId(null);\n            })\n          }\n        } \n      } else {\n        setShowToolOption(true);\n      }\n    }\n  };\n\n  const handleAddMessage = () => {\n    let number = builderState.length + 1;\n    saveMessage({\n      name: 'Send Message #' + number,\n      type: 'default',\n      position_x: 1200,\n      position_y: 60,\n      flow: props.match.params.id\n    }).then((response) => {\n       setBuilderState([...builderState, response.data]);\n\n    }).catch((err) => {\n      toast.error(\"Something went wrong\")\n    })\n  }\n\n  const handleDeleteMessage = (item, index) => {\n    if (index > 0) {\n      //Delete the message\n    builderState.splice(index, 1);\n    //Delete the edging where this message belongs to\n    const messageIndexHavingNextOfDeleteMessage = getMessageIndexWhichHasNextOfGivenMessageId(builderState, item.id);\n    setBuilderState(\n      builderState.map((item, index) => {\n        if (index == messageIndexHavingNextOfDeleteMessage) {\n          item.next = \"\"\n        }\n        return item;\n      })\n    );\n    deleteMessage(item.id).then(() => {\n      setShowToolOption(false);\n      setEdgingMessageId(null);\n      setEdgingButtonId(null);\n      setIsSetting(false);\n    }).catch((err) => {\n        toast.error(\"Something went wrong\");\n      })\n    } else {\n      toast.info(\"You cannot delete the start message\")\n    }\n  }\n\n  const handleDragMessage = (e, item, index) =>  {\n    var updatedPosition = {\n      x: e.target.x(),\n      y: e.target.y(),\n    };\n\n    setBuilderState(\n      builderState.map((item, ind) => {\n        if (ind == index) {\n          item.position = updatedPosition;\n        }\n        return item;\n      })\n    );\n  }\n\n  const updateMessagePosition = (item) => {\n    updateMessage({\n      position_x: item.position.x,\n      position_y: item.position.y\n    }, item.id).catch((err) => {\n      toast.error('Something went wrong')\n    })    \n  }\n\n  const handleToolOptionNewMessageAction = () => {\n    setIsSetting(false);\n    setShowToolOption(false);\n    let number = builderState.length + 1;\n    var newMessage = {\n      name: 'Send Message #' + number,\n      type: 'default',\n      position_x: mousePosition.x,\n      position_y: mousePosition.y,\n      flow: props.match.params.id\n    }\n\n    if (edgingMessageId) {\n      createAndConnectMessage(newMessage, edgingMessageId)\n        .then((response) => {\n          setBuilderState(\n            builderState.map((item) => {\n              if (item.id == edgingMessageId) {\n                item.next = response.data.id;\n              }\n              return item;\n            })\n          );\n          setBuilderState([...builderState, response.data]);\n        }).catch((err) => {\n          toast.error(\"Something went wrong\")\n        }).finally(() => {\n          setEdgingMessageId(null);\n        })\n    } else if (edgingButtonId) {\n      createAndConnectWithButton(newMessage, edgingButtonId)\n        .then((response) => {\n          setBuilderState(\n            builderState.map((item) => {\n              if (item.id == edgingButtonMessageId) {\n                item.children.map((child) => {\n                  if (child.id == edgingButtonChildId) {\n                    child.buttons.map((button) => {\n                      if (button.id == edgingButtonId) {\n                        button.next = response.data.id\n                      }\n                      return button;\n                    })\n                  }\n                  return child;\n                })\n              }\n              return item;\n            })\n          );\n          setBuilderState([...builderState, response.data]);\n        }).catch((err) => {\n          toast.error(\"Something went wrong\")\n        }).finally(() => {\n          setEdgingButtonId(null);\n          setEdgingButtonMessageId(null);\n          setEdgingButtonChildId(null);\n        })\n    }\n  }\n\n  const handleToolOptionConnectFlow = () => {\n    setIsSetting(false);\n    setShowToolOption(false);\n    let number = builderState.length + 1;\n    var newFlow = {\n      name: 'Connect Flow #' + number,\n      type: 'flow',\n      position_x: mousePosition.x,\n      position_y: mousePosition.y,\n      flow: props.match.params.id\n    }\n    if (edgingMessageId) {\n      createAndConnectMessage(newFlow, edgingMessageId).then((response) => {\n        setBuilderState(\n          builderState.map((item) => {\n            if (item.id == edgingMessageId) {\n              item.next = response.data.id;\n            }\n            return item;\n          })\n        );\n        setBuilderState([...builderState, response.data]);\n       \n      }).catch((err) => {\n        toast.error(\"Something went wrong\")\n      }).finally(() => {\n        setEdgingMessageId(null);\n      });\n    } else if (edgingButtonId) {\n      createAndConnectWithButton(newFlow, edgingButtonId)\n        .then((response) => {\n          setBuilderState(\n            builderState.map((item) => {\n              if (item.id == edgingButtonMessageId) {\n                item.children.map((child) => {\n                  if (child.id == edgingButtonChildId) {\n                    child.buttons.map((button) => {\n                      if (button.id == edgingButtonId) {\n                        button.next = response.data.id\n                      }\n                      return button;\n                    })\n                  }\n                  return child;\n                })\n              }\n              return item;\n            })\n          );\n          setBuilderState([...builderState, response.data]);\n        }).catch((err) => {\n          toast.error(\"Something went wrong\")\n        }).finally(() => {\n          setEdgingButtonId(null);\n          setEdgingButtonMessageId(null);\n          setEdgingButtonChildId(null);\n        })\n    }\n  }\n\n  const handleToolOptionCancel = () => {\n    setShowToolOption(false);\n    if (isEdging) setIsSetting(false);\n    if (edgingMessageId) {\n      setBuilderState(\n        builderState.map((item) => {\n          if (item.id == edgingMessageId) {\n            item.next = \"\"\n          }\n          return item;\n        })\n      );\n      if (edgingMessageId) setEdgingMessageId(null);\n    } else if (edgingButtonId) {\n        setBuilderState(\n          builderState.map((item) => {\n            if (item.id == edgingButtonMessageId) {\n              item.children.map((child) => {\n                if (child.id == edgingButtonChildId) {\n                  child.buttons.map((button) => {\n                    if (button.id == edgingButtonId) {\n                      button.next = null\n                    }\n                    return button;\n                  })\n                }\n                return child;\n              })\n            }\n            return item;\n          })\n        );\n        if(edgingButtonId) setEdgingButtonId(null);\n        if(edgingButtonChildId) setEdgingButtonChildId(null);\n        if(edgingButtonMessageId) setEdgingButtonMessageId(null);\n      }          \n    }\n  React.useEffect(() => {\n    setIsLoading(true);\n    getMessages(props.match.params.id)\n      .then((response) => {\n        setBuilderState(response.data)\n      })\n      .catch((err) => {\n        toast.error(\"Something went wrong\")\n      }).finally(() => {\n        setIsLoading(false);\n      })\n    getFlow(props.match.params.id)\n      .then((response) => {  \n        setFlow(response.data);\n    }).catch((err) => {\n      toast.error(\"Something went wrong\")   \n    })\n    Konva.hitOnDragEnabled = true;\n  }, []);\n\n  const getToolOption = () => {\n    return (\n      <Group  x={mousePosition.x} y={mousePosition.y} zIndex={200}\n        onMouseOver={() => { document.body.style.cursor = 'pointer' }}\n        onMouseOut={() => { document.body.style.cursor = 'default' }}\n      >\n        <Group onClick={handleToolOptionNewMessageAction}>\n          <Rect\n            width={200}\n            height={50}\n            fill=\"#FDFDFD\"\n            strokeWidth={2}\n            shadowColor=\"gray\"\n            shadowOpacity={0.7}\n            shadowBlur={2}\n            onMouseDown={(e) => {\n              e.target.setAttr('fill', ' #eef1f4');\n            }}\n          />\n          <Text\n            x={15}\n            y={15}\n            text=\"+ New Message\"\n            fontFamily={'Roboto'}\n            fontSize={20}\n            fill={'#5850eb'}\n          />\n        </Group>\n        <Group y={50} onClick={handleToolOptionConnectFlow}>\n          <Rect\n            width={200}\n            height={50}\n            fill=\"#FDFDFD\"\n            strokeWidth={2}\n            shadowColor=\"gray\"\n            shadowOpacity={0.7}\n            shadowBlur={2}\n            onMouseDown={(e) => {\n              e.target.setAttr('fill', ' #eef1f4');\n            }}\n          />\n          <Text\n            x={15}\n            y={15}\n            text=\"+ Connect Flow\"\n            fontFamily={'Roboto'}\n            fontSize={20}\n            fill={'#5850eb'}\n          />\n        </Group>\n        <Group y={100}  onClick={handleToolOptionCancel}>\n          <Rect\n            width={200}\n            height={50}\n            fill=\"#FDFDFD\"\n            strokeWidth={2}\n            shadowColor=\"gray\"\n            shadowOpacity={0.7}\n            shadowBlur={2}\n            onMouseDown={(e) => {\n              e.target.setAttr('fill', ' #eef1f4');\n            }}\n          />\n          <Text\n            x={15}\n            y={15}\n            text=\"- Cancel\"\n            fontFamily={'Roboto'}\n            fontSize={20}\n            fill={'#5850eb'}\n          />\n        </Group>\n      </Group>\n    );\n  }\n  const getDefaultMessage = (item, index, messageHeight) => {\n    return (\n      <Group\n        x={item.position?.x}\n        y={item.position?.y}\n        draggable\n        onClick={(e) => {\n          showToolbar(item.id);\n          setSelectedTrue(index);\n        }}\n        onMouseEnter={(e) => {\n          setHoverTrue(index);\n        }}\n        onMouseLeave={(e) => {\n          setHoverFalse(index);\n        }}\n        hitOnDragEnabled={true}\n        onDragMove={(e) => {\n          handleDragMessage(e, item, index)\n        }}\n        onDragEnd={() => { updateMessagePosition(item) }}\n      >\n        {index === 0 &&\n          <Group x={10} y={-40}>\n            <Rect cornerRadius={7} stroke={\"green\"} strokeWidth={2} fill=\"#FDFDFD\" width={60} height={30} />\n            <Text\n              x={13}\n              y={8}\n              text={\"Start\"}\n              fontFamily={'Roboto'}\n              fontSize={15}\n              fill={'green'}\n            />\n          </Group>\n        }\n        <Rect\n          cornerRadius={16}\n          height={messageHeight}\n          width={340}\n          fill=\"#FDFDFD\"\n          strokeWidth={1}\n          stroke={ \"#5850EB\"}\n          shadowColor={getShadowColor(item)}\n          shadowOpacity={1}\n          shadowBlur={7}\n        />\n        {item.isHover &&\n          <>\n            <Rect\n              width={50} height={30} x={330} y={10} />\n            <URLImage\n              onMouseOver={() => { document.body.style.cursor = 'pointer' }}\n              onMouseOut={() => { document.body.style.cursor = 'default' }}\n              onClick={() => { handleDeleteMessage(item, index) }}\n              image={TrashIcon} x={345} y={10} height={25} width={25} />\n          </>\n        }\n        <Circle x={30} y={30} radius={15} fill=\"#5850EB\" />\n        <Text\n          x={55}\n          y={22}\n          text={item.name}\n          fontFamily={'Roboto'}\n          fontSize={20}\n          fill={'gray'}\n        />\n        <Group\n          x={340}\n          y={messageHeight - 20}\n          onMouseOver={() => { document.body.style.cursor = 'pointer' }}\n          onMouseOut={() => { document.body.style.cursor = 'default' }}\n          onClick={(e) => {\n            e.cancelBubble = true;\n            connectEdge(item.id)\n          }}>\n          <Circle radius={9} fill=\"#8392AB\" strokeWidth={1} />\n          <Text\n            x={-80}\n            y={-8}\n            text=\"Next Step\"\n            fontFamily={'Roboto'}\n            fontSize={15}\n            fontWeight={300}\n            fill={'gray'}\n          />\n        </Group>\n        {typeof item.children == 'object' ? (\n          <>\n            {item.children.length > 0 ? (\n              handleRenderingChildrens(item)\n            ) : (\n                <React.Fragment key={item}>\n                  <Group>\n                    <Rect\n                      x={20}\n                      y={75}\n                      height={60}\n                      width={300}\n                      fill=\"#EEF1F4\"\n                      cornerRadius={16}\n                    />\n                    <Text\n                      text=\"No Content\"\n                      x={110}\n                      y={95}\n                      fontFamily={'Roboto'}\n                      fontSize={20}\n                      fontWeight={300}\n                      fill={'blue'}\n                    />\n                  </Group>\n                </React.Fragment>\n              )}\n          </>\n        ) : null}\n      </Group>\n    );\n  }\n  const getFlowMessage = (item, index) => {\n    return (\n      <Group\n      x={item.position?.x}\n      y={item.position?.y}\n      draggable\n      onClick={(e) => {\n        showToolbar(item.id);\n        setSelectedTrue(index);\n      }}\n      onMouseEnter={(e) => {\n        setHoverTrue(index);\n      }}\n      onMouseLeave={(e) => {\n        setHoverFalse(index);\n      }}\n      hitOnDragEnabled={true}\n      onDragMove={(e) => {\n        handleDragMessage(e, item, index)\n      }}\n      onDragEnd={() => { updateMessagePosition(item) }}\n    >\n      <Rect\n        cornerRadius={16}\n        height={200}\n        width={340}\n        fill=\"#FDFDFD\"\n        stroke={ \"#f9bf3b\"}\n        strokeWidth={1}\n        shadowColor={getShadowColor(item)}\n        shadowOpacity={1}\n        shadowBlur={7}\n      />\n      {item.isHover &&\n        <>\n          <Rect\n            width={50} height={30} x={330} y={10} />\n          <URLImage\n            onMouseOver={() => { document.body.style.cursor = 'pointer' }}\n            onMouseOut={() => { document.body.style.cursor = 'default' }}\n            onClick={() => { handleDeleteMessage(item, index) }}\n            image={TrashIcon} x={345} y={10} height={25} width={25} />\n        </>\n      }\n      <Circle x={30} y={30} radius={15} fill=\"#f9bf3b\" />\n      <Text\n        x={55}\n        y={22}\n        text={item.name}\n        fontFamily={'Roboto'}\n        fontSize={20}\n        fill={'gray'}\n        />\n        {item.children.length > 0 ? (\n          <Group>\n          <Rect\n            x={20}\n            y={75}\n            height={60}\n            width={300}\n            stroke=\"green\"\n            strokeWidth={1}\n            fill=\"#EEF1F4\"\n            cornerRadius={16}\n          />\n          <Text\n            text={item.children[0].name}\n            x={40}\n            y={95}\n            fontFamily={'Roboto'}\n            fontSize={20}\n            fontWeight={300}\n              fill={\"#f9bf3b\"}\n              align={\"center\"}\n          />\n        </Group>\n        ) : (\n            <React.Fragment key={item}>\n              <Group>\n                <Rect\n                  x={20}\n                  y={75}\n                  height={60}\n                  width={300}\n                  fill=\"#EEF1F4\"\n                  cornerRadius={16}\n                />\n                <Text\n                  text=\"Select Flow\"\n                  x={110}\n                  y={95}\n                  fontFamily={'Roboto'}\n                  fontSize={20}\n                  fontWeight={300}\n                  fill={\"#f9bf3b\"}\n                  align={\"center\"}\n                />\n              </Group>\n            </React.Fragment>\n          )}\n    </Group>\n    );\n  }\n  const getMessageBox = (item, index, messageHeight) => {\n    if (item.type == \"default\") {\n      return getDefaultMessage(item, index, messageHeight);\n    } else if (item.type == \"flow\") {\n      return getFlowMessage(item, index);\n    }\n  }\n  \n  if (isLoading) {\n    return (\n      <div className=\"loader-wrapper\">\n        <PuffLoader color={' #5850EC'} loading={isLoading} size={75} />\n      </div>\n    );\n  } else {\n    return (\n      <FlowBuilderWrapper>\n        {flow && <div className=\"header\"><p>{flow.name}</p></div>}\n        <div className=\"stage-action\">\n          <BiMessageSquareAdd\n            onClick={handleAddMessage}\n          />\n        </div>\n        {isToolbarActive && <Toolbar id={id} hideToolbar={hideToolbar} bot={flow.bot} flow={flow.id} />}\n        <Stage\n          width={getStageWidth()}\n          height={window.innerHeight - 70}\n          scaleX={state.layerScale}\n          scaleY={state.layerScale}\n          onMouseMove={handleMousePosition}\n          x={0}\n          y={0}\n          onClick={handleClickOnCanvas}>\n          <Layer name=\"layer_1\" draggable onTouchMove={onTouchPinch} onWheel={handleWheel}>\n            <Rect\n              x={-window.innerWidth}\n              y={-window.innerHeight}\n              width={window.innerWidth * 3}\n              height={window.innerHeight * 3}\n              fill=\"\"\n            />\n            {showToolOption && getToolOption()}\n            {builderState &&\n              typeof builderState == 'object' &&\n              builderState.map((item, index) => {\n                var messageHeight = calculateHeightOfMessageBox(item.children);\n                return (\n                  <React.Fragment key={item.id}>\n                    {(item.type === \"default\" && item.next) ? (\n                      <Edge\n                        height={messageHeight}\n                        node1={item.position}\n                        node2={getNextNode(item.next)}\n                      />\n                    ) : null}\n                    {getMessageBox(item, index, messageHeight)}\n                  </React.Fragment>\n                );\n              })}\n          </Layer>\n        </Stage>\n      </FlowBuilderWrapper>\n    );\n  }\n};\nconst getShadowColor = (item) => {\n  if (item.isSelected) {\n    if (item.type == \"default\") {\n      return '#1e824c';\n    } else if (item.type == \"flow\") {\n      return \"#f9ae23\";\n    }\n   \n  } else if (item.isHover) {\n    if (item.type == \"default\") {\n      return '#8078FF';\n    } else if (item.type == \"flow\") {\n      return \"#f9bf3b\";\n    }\n  } else {\n    return '#95bbdf';\n  }\n};\n\nconst getSelectedNode = (state) => {\n  return state.findIndex((obj) => obj.isSelected == true);\n};\n\nconst getMessageIndexWhichHasNextOfGivenMessageId = (state, messageId) => {\n  return state.findIndex((obj) => obj.next == messageId);\n}\n\nconst getHoveredNode = (state) => {\n  return state.findIndex((obj) => obj.isHover == true);\n};\n\nexport default withRouter(FlowBuilder);\n",{"ruleId":"61","severity":1,"message":"62","line":2,"column":43,"nodeType":"63","messageId":"64","endLine":2,"endColumn":49},{"ruleId":"65","severity":1,"message":"66","line":184,"column":56,"nodeType":"67","messageId":"68","endLine":184,"endColumn":58},{"ruleId":"61","severity":1,"message":"69","line":308,"column":7,"nodeType":"63","messageId":"64","endLine":308,"endColumn":17},{"ruleId":"61","severity":1,"message":"70","line":4,"column":30,"nodeType":"63","messageId":"64","endLine":4,"endColumn":35},{"ruleId":"61","severity":1,"message":"71","line":44,"column":17,"nodeType":"63","messageId":"64","endLine":44,"endColumn":25},{"ruleId":"65","severity":1,"message":"66","line":54,"column":64,"nodeType":"67","messageId":"68","endLine":54,"endColumn":66},{"ruleId":"65","severity":1,"message":"66","line":55,"column":21,"nodeType":"67","messageId":"68","endLine":55,"endColumn":23},{"ruleId":"65","severity":1,"message":"66","line":181,"column":21,"nodeType":"67","messageId":"68","endLine":181,"endColumn":23},{"ruleId":"65","severity":1,"message":"66","line":184,"column":21,"nodeType":"67","messageId":"68","endLine":184,"endColumn":23},{"ruleId":"65","severity":1,"message":"66","line":193,"column":21,"nodeType":"67","messageId":"68","endLine":193,"endColumn":23},{"ruleId":"65","severity":1,"message":"66","line":207,"column":21,"nodeType":"67","messageId":"68","endLine":207,"endColumn":23},{"ruleId":"65","severity":1,"message":"66","line":210,"column":21,"nodeType":"67","messageId":"68","endLine":210,"endColumn":23},{"ruleId":"65","severity":1,"message":"66","line":219,"column":21,"nodeType":"67","messageId":"68","endLine":219,"endColumn":23},{"ruleId":"65","severity":1,"message":"66","line":231,"column":19,"nodeType":"67","messageId":"68","endLine":231,"endColumn":21},{"ruleId":"65","severity":1,"message":"66","line":248,"column":23,"nodeType":"67","messageId":"68","endLine":248,"endColumn":25},{"ruleId":"65","severity":1,"message":"66","line":268,"column":23,"nodeType":"67","messageId":"68","endLine":268,"endColumn":25},{"ruleId":"65","severity":1,"message":"66","line":270,"column":28,"nodeType":"67","messageId":"68","endLine":270,"endColumn":30},{"ruleId":"65","severity":1,"message":"66","line":272,"column":33,"nodeType":"67","messageId":"68","endLine":272,"endColumn":35},{"ruleId":"65","severity":1,"message":"72","line":303,"column":30,"nodeType":"67","messageId":"68","endLine":303,"endColumn":32},{"ruleId":"65","severity":1,"message":"66","line":310,"column":31,"nodeType":"67","messageId":"68","endLine":310,"endColumn":33},{"ruleId":"65","severity":1,"message":"66","line":327,"column":31,"nodeType":"67","messageId":"68","endLine":327,"endColumn":33},{"ruleId":"73","severity":1,"message":"74","line":328,"column":47,"nodeType":"75","messageId":"76","endLine":328,"endColumn":49},{"ruleId":"65","severity":1,"message":"66","line":329,"column":36,"nodeType":"67","messageId":"68","endLine":329,"endColumn":38},{"ruleId":"73","severity":1,"message":"74","line":330,"column":52,"nodeType":"75","messageId":"76","endLine":330,"endColumn":54},{"ruleId":"65","severity":1,"message":"66","line":331,"column":41,"nodeType":"67","messageId":"68","endLine":331,"endColumn":43},{"ruleId":"65","severity":1,"message":"66","line":378,"column":19,"nodeType":"67","messageId":"68","endLine":378,"endColumn":21},{"ruleId":"65","severity":1,"message":"66","line":405,"column":17,"nodeType":"67","messageId":"68","endLine":405,"endColumn":19},{"ruleId":"65","severity":1,"message":"66","line":439,"column":27,"nodeType":"67","messageId":"68","endLine":439,"endColumn":29},{"ruleId":"65","severity":1,"message":"66","line":456,"column":27,"nodeType":"67","messageId":"68","endLine":456,"endColumn":29},{"ruleId":"65","severity":1,"message":"66","line":458,"column":32,"nodeType":"67","messageId":"68","endLine":458,"endColumn":34},{"ruleId":"65","severity":1,"message":"66","line":460,"column":37,"nodeType":"67","messageId":"68","endLine":460,"endColumn":39},{"ruleId":"65","severity":1,"message":"66","line":498,"column":25,"nodeType":"67","messageId":"68","endLine":498,"endColumn":27},{"ruleId":"65","severity":1,"message":"66","line":516,"column":27,"nodeType":"67","messageId":"68","endLine":516,"endColumn":29},{"ruleId":"65","severity":1,"message":"66","line":518,"column":32,"nodeType":"67","messageId":"68","endLine":518,"endColumn":34},{"ruleId":"65","severity":1,"message":"66","line":520,"column":37,"nodeType":"67","messageId":"68","endLine":520,"endColumn":39},{"ruleId":"65","severity":1,"message":"66","line":549,"column":23,"nodeType":"67","messageId":"68","endLine":549,"endColumn":25},{"ruleId":"65","severity":1,"message":"66","line":559,"column":25,"nodeType":"67","messageId":"68","endLine":559,"endColumn":27},{"ruleId":"65","severity":1,"message":"66","line":561,"column":30,"nodeType":"67","messageId":"68","endLine":561,"endColumn":32},{"ruleId":"65","severity":1,"message":"66","line":563,"column":35,"nodeType":"67","messageId":"68","endLine":563,"endColumn":37},{"ruleId":"77","severity":1,"message":"78","line":598,"column":6,"nodeType":"79","endLine":598,"endColumn":8,"suggestions":"80"},{"ruleId":"65","severity":1,"message":"66","line":897,"column":19,"nodeType":"67","messageId":"68","endLine":897,"endColumn":21},{"ruleId":"65","severity":1,"message":"66","line":899,"column":26,"nodeType":"67","messageId":"68","endLine":899,"endColumn":28},{"ruleId":"65","severity":1,"message":"66","line":963,"column":19,"nodeType":"67","messageId":"68","endLine":963,"endColumn":21},{"ruleId":"65","severity":1,"message":"66","line":965,"column":26,"nodeType":"67","messageId":"68","endLine":965,"endColumn":28},{"ruleId":"65","severity":1,"message":"66","line":970,"column":19,"nodeType":"67","messageId":"68","endLine":970,"endColumn":21},{"ruleId":"65","severity":1,"message":"66","line":972,"column":26,"nodeType":"67","messageId":"68","endLine":972,"endColumn":28},{"ruleId":"65","severity":1,"message":"66","line":981,"column":50,"nodeType":"67","messageId":"68","endLine":981,"endColumn":52},{"ruleId":"65","severity":1,"message":"66","line":985,"column":44,"nodeType":"67","messageId":"68","endLine":985,"endColumn":46},{"ruleId":"65","severity":1,"message":"66","line":989,"column":47,"nodeType":"67","messageId":"68","endLine":989,"endColumn":49},"@typescript-eslint/no-unused-vars","'Circle' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'onTouchEnd' is assigned a value but never used.","'Image' is defined but never used.","'setState' is assigned a value but never used.","Expected '!==' and instead saw '!='.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'props.match.params.id' and 'setBuilderState'. Either include them or remove the dependency array.","ArrayExpression",["81"],{"desc":"82","fix":"83"},"Update the dependencies array to be: [props.match.params.id, setBuilderState]",{"range":"84","text":"85"},[18229,18231],"[props.match.params.id, setBuilderState]"]