[{"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Toolbar/index.tsx":"1","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Modals/ConnectFlow.tsx":"2","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Modals/styles.ts":"3","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Image/styles.ts":"4","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Text/index.tsx":"5","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Toolbar/styles.ts":"6","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Card/index.tsx":"7","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Card/styles.ts":"8","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Text/styles.ts":"9","/home/rabinson/Freelancing/ShipboardBot/frontend/src/styles/global.ts":"10","/home/rabinson/Freelancing/ShipboardBot/frontend/src/services/Auth/AuthProvider.tsx":"11","/home/rabinson/Freelancing/ShipboardBot/frontend/src/styles/mediaQueries.ts":"12","/home/rabinson/Freelancing/ShipboardBot/frontend/src/services/Auth/reducer.ts":"13","/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/LandingPage.tsx":"14","/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/error/404.tsx":"15","/home/rabinson/Freelancing/ShipboardBot/frontend/src/services/Modal/ModalProvider.tsx":"16","/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/main/Dashboard/index.tsx":"17","/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/main/Settings/index.tsx":"18","/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/main/Flows/index.tsx":"19","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/common/typography.ts":"20","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/common/buttons.ts":"21","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/common/grid.ts":"22","/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/main/Flows/styles.ts":"23","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/common/Dropdown/styles.ts":"24","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/layout/AuthLayout.tsx":"25","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/common/Pagination/index.tsx":"26","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Flows/DeleteModal.tsx":"27","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Flows/EditModal.tsx":"28","/home/rabinson/Freelancing/ShipboardBot/frontend/src/apis/buttons.ts":"29","/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/main/Flows/helper.tsx":"30","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/front/header/styles.ts":"31","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/front/navbar/index.tsx":"32","/home/rabinson/Freelancing/ShipboardBot/frontend/src/apis/images.ts":"33","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/front/footer/styles.ts":"34","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Toolbar/BtnEditor.tsx":"35","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Sidebar/styles.ts":"36","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/common/form.ts":"37","/home/rabinson/Freelancing/ShipboardBot/frontend/src/index.tsx":"38","/home/rabinson/Freelancing/ShipboardBot/frontend/src/utils/storage.ts":"39","/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/auth/ForgotPasswordPage.tsx":"40","/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/main/Templates/index.tsx":"41","/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/main/Flows/builder.tsx":"42","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Bots/CreateModal.tsx":"43","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Bots/Configure/Telegram.tsx":"44","/home/rabinson/Freelancing/ShipboardBot/frontend/src/apis/messages.ts":"45","/home/rabinson/Freelancing/ShipboardBot/frontend/src/utils/request.ts":"46","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/front/footer/index.tsx":"47","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/common/Pagination/styles.ts":"48","/home/rabinson/Freelancing/ShipboardBot/frontend/src/apis/texts.ts":"49","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Sidebar/index.tsx":"50","/home/rabinson/Freelancing/ShipboardBot/frontend/src/App.tsx":"51","/home/rabinson/Freelancing/ShipboardBot/frontend/src/routes/ProtectedRoute.tsx":"52","/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/auth/LoginPage.tsx":"53","/home/rabinson/Freelancing/ShipboardBot/frontend/src/apis/bots.ts":"54","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/front/header/index.tsx":"55","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Bots/DeleteModal.tsx":"56","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Flows/CreateModal.tsx":"57","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Bots/Configure/Messenger.tsx":"58","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/front/info/index.tsx":"59","/home/rabinson/Freelancing/ShipboardBot/frontend/src/utils/pagination.ts":"60"},{"size":9194,"mtime":1612805881888,"results":"61","hashOfConfig":"62"},{"size":2919,"mtime":1612694265888,"results":"63","hashOfConfig":"62"},{"size":386,"mtime":1612599018149,"results":"64","hashOfConfig":"62"},{"size":1691,"mtime":1612625185277,"results":"65","hashOfConfig":"62"},{"size":4677,"mtime":1612836229898,"results":"66","hashOfConfig":"62"},{"size":4275,"mtime":1612803540319,"results":"67","hashOfConfig":"62"},{"size":10853,"mtime":1612614227019,"results":"68","hashOfConfig":"62"},{"size":2734,"mtime":1610160143779,"results":"69","hashOfConfig":"62"},{"size":1226,"mtime":1612753801902,"results":"70","hashOfConfig":"62"},{"size":1243,"mtime":1612754206496,"results":"71","hashOfConfig":"62"},{"size":1534,"mtime":1607842467004,"results":"72","hashOfConfig":"62"},{"size":437,"mtime":1607357171179,"results":"73","hashOfConfig":"62"},{"size":442,"mtime":1607166058000,"results":"74","hashOfConfig":"62"},{"size":395,"mtime":1606572185322,"results":"75","hashOfConfig":"62"},{"size":467,"mtime":1608091184084,"results":"76","hashOfConfig":"62"},{"size":3582,"mtime":1612584637978,"results":"77","hashOfConfig":"62"},{"size":159,"mtime":1607998049825,"results":"78","hashOfConfig":"62"},{"size":218,"mtime":1607998072129,"results":"79","hashOfConfig":"62"},{"size":7308,"mtime":1612693803067,"results":"80","hashOfConfig":"62"},{"size":1320,"mtime":1609667047505,"results":"81","hashOfConfig":"62"},{"size":2591,"mtime":1612611015356,"results":"82","hashOfConfig":"62"},{"size":2292,"mtime":1612667221062,"results":"83","hashOfConfig":"62"},{"size":1334,"mtime":1612721735370,"results":"84","hashOfConfig":"62"},{"size":603,"mtime":1611407912500,"results":"85","hashOfConfig":"62"},{"size":3062,"mtime":1607357777066,"results":"86","hashOfConfig":"62"},{"size":1583,"mtime":1611403993930,"results":"87","hashOfConfig":"62"},{"size":1488,"mtime":1611506630557,"results":"88","hashOfConfig":"62"},{"size":2316,"mtime":1612681211971,"results":"89","hashOfConfig":"62"},{"size":1105,"mtime":1612716373558,"results":"90","hashOfConfig":"62"},{"size":7418,"mtime":1612752766434,"results":"91","hashOfConfig":"62"},{"size":2194,"mtime":1607358477789,"results":"92","hashOfConfig":"62"},{"size":717,"mtime":1607357496043,"results":"93","hashOfConfig":"62"},{"size":765,"mtime":1611888511608,"results":"94","hashOfConfig":"62"},{"size":758,"mtime":1607358268935,"results":"95","hashOfConfig":"62"},{"size":3134,"mtime":1612807706134,"results":"96","hashOfConfig":"62"},{"size":2446,"mtime":1612319962325,"results":"97","hashOfConfig":"62"},{"size":1603,"mtime":1612803710437,"results":"98","hashOfConfig":"62"},{"size":515,"mtime":1607764359769,"results":"99","hashOfConfig":"62"},{"size":330,"mtime":1606965896953,"results":"100","hashOfConfig":"62"},{"size":2699,"mtime":1607850305009,"results":"101","hashOfConfig":"62"},{"size":210,"mtime":1610158645219,"results":"102","hashOfConfig":"62"},{"size":29414,"mtime":1612752673982,"results":"103","hashOfConfig":"62"},{"size":2305,"mtime":1611506040626,"results":"104","hashOfConfig":"62"},{"size":4654,"mtime":1612691873198,"results":"105","hashOfConfig":"62"},{"size":1279,"mtime":1612715948412,"results":"106","hashOfConfig":"62"},{"size":494,"mtime":1607840291044,"results":"107","hashOfConfig":"62"},{"size":795,"mtime":1607276608868,"results":"108","hashOfConfig":"62"},{"size":739,"mtime":1612585684875,"results":"109","hashOfConfig":"62"},{"size":670,"mtime":1611717938172,"results":"110","hashOfConfig":"62"},{"size":3424,"mtime":1612664150234,"results":"111","hashOfConfig":"62"},{"size":2168,"mtime":1611544707887,"results":"112","hashOfConfig":"62"},{"size":944,"mtime":1611287624293,"results":"113","hashOfConfig":"62"},{"size":3083,"mtime":1608089518101,"results":"114","hashOfConfig":"62"},{"size":1168,"mtime":1612687540178,"results":"115","hashOfConfig":"62"},{"size":962,"mtime":1607398449634,"results":"116","hashOfConfig":"62"},{"size":1475,"mtime":1611506512498,"results":"117","hashOfConfig":"62"},{"size":2347,"mtime":1611495697651,"results":"118","hashOfConfig":"62"},{"size":5846,"mtime":1612691858790,"results":"119","hashOfConfig":"62"},{"size":1029,"mtime":1607690783508,"results":"120","hashOfConfig":"62"},{"size":570,"mtime":1607912715680,"results":"121","hashOfConfig":"62"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"125"},"v8ty68",{"filePath":"126","messages":"127","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"125"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":34,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"142"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"163"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"125"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"163"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"125"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"183","messages":"184","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"187","messages":"188","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"163"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"192","messages":"193","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"163"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"125"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"215","messages":"216","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"217","messages":"218","errorCount":0,"warningCount":46,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"125"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"236","messages":"237","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"248","messages":"249","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"254","messages":"255","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Toolbar/index.tsx",["256","257","258","259","260","261","262","263","264","265","266","267"],"import React, { useContext, useState, useRef, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { ToolbarWrapper, ToolbarMenu, ToolbarButtonGroup, BtnEditorWrapper } from './styles';\nimport { VerticalGap } from '../../../common/typography';\nimport { ToolbarButton } from '../../../common/buttons';\nimport { BuilderContext } from '../../../../services/Builder/BuilderProvider';\nimport { GiCancel } from 'react-icons/gi';\nimport FormImage from '../Form/Image/index';\nimport FormText from '../Form/Text/index';\nimport FormCard from '../Form/Card/index';\nimport { connectFlowToMessage, updateMessage } from '../../../../apis/messages';\nimport { toast } from 'react-toastify';\nimport { saveText } from '../../../../apis/texts';\nimport { saveImage } from '../../../../apis/images';\nimport { addCardGroup } from '../../../../apis/cards';\nimport { useModal } from '../../../../services/Modal/ModalProvider';\nimport ConnectFlowModal from '../Modals/ConnectFlow';\nimport BtnEditor from './BtnEditor';\n\n\nconst Toolbar = ({ id, hideToolbar, bot, flow }) => {\n  const [builderState, setBuilderState] = useContext(BuilderContext);\n  const [isChangingTitle, setIsChangingTitle] = useState(false);\n  const { register, handleSubmit, setValue } = useForm({ mode: 'onChange' });\n  const { showModal, hideModal } = useModal();\n  const [isBtnEditorOpen, setIsBtnEditorOpen] = useState(false);\n  const [editorContent, setEditorContent] = useState({\n    position: null,\n    name: null,\n    id: null,\n    messageId: null,\n    childId: null\n  });\n\n  // const titleRef = useRef<HTMLInputElement>(null);\n\n  //Find index of specific object using findIndex method.\n  const objIndex = builderState.findIndex((obj) => obj.id == id);\n\n  const onChangeTitle = (data) => {\n    updateMessage({\n      name: data.title\n    }, id).then((response) => {\n      setBuilderState(\n        builderState.map((item, ind) => {\n          if (ind == objIndex) {\n           item.name = data.title\n          }\n          return item;\n        })\n      );\n    }).catch((err) => {\n      toast.error('Something went wrong')\n    })    \n  };\n  const openConnectFlowModal = () => {\n    showModal(() => (\n      <ConnectFlowModal flow={flow} bot={bot} hideModal={hideModal} handleSelect={handleSelect}/>\n    ));\n  }\n\n  const handleSelect = (flowId, flowName) => {\n    connectFlowToMessage({\n      flow: flowId\n    }, id).catch((err) => {\n      toast.error(\"Something went wrong\")\n    })\n    setBuilderState(\n      builderState.map((item, index) => {\n        if (item.id == id) {\n          item.children.push({\n            name: flowName\n          })\n        }\n        return item;\n      })\n    );\n    hideModal();\n  }\n\n  const removeConnetedFlow = () => {\n    connectFlowToMessage({}, id).catch((err) => {\n      toast.error(\"Something went wrong\")\n    })\n    setBuilderState(\n      builderState.map((item) => {\n        if (item.id == id) {\n          item.children.splice(0, 1);\n        }\n        return item;\n      })\n    );\n  }\n  \n  React.useEffect(() => {\n    setValue(\"title\", builderState[objIndex].name, {shouldValidate: true})\n  }, [builderState[objIndex].name])\n\n  const getContents = () => {\n    if (builderState[objIndex].type === \"default\") {\n      return (\n        <ToolbarMenu>\n          <div className={isChangingTitle ? 'header active' : 'header'}>\n            <form onBlur={handleSubmit(onChangeTitle)}>\n              <input\n                maxLength={35}\n                className=\"heading-input\"\n                ref={register({required: true, minLength: 3})}\n                id=\"title\"\n                name=\"title\"\n                onBlur={() => setIsChangingTitle(false)}\n              />\n            </form>\n          </div>\n          {builderState[objIndex].children.length > 0 ? (\n            builderState[objIndex].children.map((child) => {\n              return (\n                <React.Fragment key={child.id}>\n                  <VerticalGap size=\"3\" />\n                  {getChildren(child, objIndex, showBtnEditor, handleEditorContent)}\n                </React.Fragment>\n              );\n            })\n          ) : (\n              <React.Fragment>\n                <VerticalGap size=\"3\" />\n                <p className=\"no-content-text\">No content</p>\n              </React.Fragment>\n            )}\n          <VerticalGap size=\"3\" />\n        <ToolbarButtons id={id} index={objIndex} />\n        </ToolbarMenu>\n      );\n    } else if (builderState[objIndex].type === \"flow\") {\n      return (\n        <ToolbarMenu>\n          <div className='flow-header'>\n            <h4>Connect Flow </h4>\n          </div>\n          {builderState[objIndex].children.length > 0 ? (\n            builderState[objIndex].children.map((child) => {\n              return (\n                <React.Fragment key={child.id}>\n                  <VerticalGap size=\"3\" />\n                  <div className=\"flow-content\">\n                    {child.name}\n                    <button className=\"action-btn\">\n                      <GiCancel onClick={removeConnetedFlow} />\n                  </button>\n                  </div>\n                </React.Fragment>\n              );\n            })\n          ) : (\n              <React.Fragment>\n                <VerticalGap size=\"3\" />\n                <ToolbarButton height=\"4rem\" width=\"25rem\" onClick={openConnectFlowModal}>\n                  Select Flow\n                </ToolbarButton>\n              </React.Fragment>\n            )}\n        </ToolbarMenu>\n      );\n    }\n  }\n\n  const closeBtnEditor = () => {\n    setIsBtnEditorOpen(false);\n  }\n\n  const showBtnEditor = () => {\n    setIsBtnEditorOpen(true);\n  }\n\n  const handleEditorContent = ({ position, name, id, messageId, childId}) => {\n    setEditorContent({position, name, id, messageId, childId});\n  }\n\n\n  return (\n    <React.Fragment>\n      <ToolbarWrapper>\n      {builderState[objIndex] &&\n        getContents()\n      }\n      </ToolbarWrapper>\n      {isBtnEditorOpen && <BtnEditor handleClose={closeBtnEditor} editorContent={editorContent} />}\n    </React.Fragment>\n  );\n};\n\nexport default Toolbar;\n\nconst ToolbarButtons = ({ id, index }) => {\n  const [builderState, setBuilderState] = useContext(BuilderContext);\n\n  const addText = () => {\n    var height = builderState[index].height;\n    height = height + 50;\n    const positionIndex = builderState[index].children.length + 1;\n    saveText({\n      text: 'Change text',\n      message: id,\n      position: positionIndex,\n      height: 17\n    }).then((response) => {\n      setBuilderState(\n        builderState.map((item, ind) => {\n          if (ind == index) {\n            item.height = height;\n            item.children.push(response.data);\n          }\n          return item;\n        })\n      );\n    }).catch((err) => {\n      toast.error(\"Something went wrong\");\n    })\n  };\n\n  const addCard = () => {\n    let height = builderState[index].height;\n    height = height + 150;\n    const positionIndex = builderState[index].children.length + 1;\n\n\n    addCardGroup({\n      message: id,\n      position: positionIndex\n    }).then((response) => {\n      console.log(response.data);\n      setBuilderState(\n        builderState.map((item, ind) => {\n          if (ind == index) {\n            item.height = height;\n            item.children.push(response.data);\n          }\n          return item;\n        })\n      );\n    }).catch((err) => {\n      toast.error(\"Something went wrong\");\n    });\n  };\n\n  const addImage = () => {\n    let height = builderState[index].height;\n    height = height + 150;\n    const positionIndex = builderState[index].children.length + 1;\n\n    saveImage({\n      message: id,\n      position: positionIndex\n    }).then((response) => {\n      setBuilderState(\n        builderState.map((item, ind) => {\n          if (ind == index) {\n            item.height = height;\n            item.children.push(response.data);\n          }\n          return item;\n        })\n      );\n    }).catch((err) => {\n      toast.error(\"Something went wrong\");\n    })\n  };\n\n  return (\n    <React.Fragment>\n      <ToolbarButtonGroup>\n        <ToolbarButton\n          height=\"6rem\"\n          width=\"6rem\"\n          fontSize=\"1.2rem\"\n          onClick={addText}>\n          + Text\n        </ToolbarButton>\n        <ToolbarButton\n          height=\"6rem\"\n          width=\"6rem\"\n          fontSize=\"1.2rem\"\n          onClick={addCard}>\n          + Card\n        </ToolbarButton>\n        <ToolbarButton\n          height=\"6rem\"\n          width=\"6rem\"\n          fontSize=\"1.2rem\"\n          onClick={addImage}>\n          + Image\n        </ToolbarButton>\n        {/* <ToolbarButton height=\"4rem\" width=\"25rem\">\n          Next Button\n        </ToolbarButton> */}\n      </ToolbarButtonGroup>\n    </React.Fragment>\n  );\n};\n\nconst getChildren = (children, messageIndex, showBtnEditor, handleEditorContent) => {\n  if (children.type === 'text') {\n    return <FormText messageId={messageIndex} childId={children.id} showBtnEditor={showBtnEditor} setEditorContent={handleEditorContent}/>;\n  } else if (children.type === 'image') {\n    return <FormImage messageId={messageIndex} childId={children.id} />;\n  } else if (children.type === 'card') {\n    return <FormCard messageId={messageIndex} childId={children.id} />;\n  }\n};\n",["268","269"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Modals/ConnectFlow.tsx",["270","271","272","273"],"import React, { useEffect, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { getFlows } from '../../../../apis/flows';\nimport { GridWrapper } from '../../../common/grid';\nimport { ConnectFlowWrapper } from './styles';\nimport Pagination from '../../../common/Pagination/index';\nimport flowCover from '../../../../assets/images/flow-cover.png';\n\ntype FlowType = {\n  id: string;\n  name: string;\n  message_count: string\n};\n\nconst ConnectFlowModal = ({bot, flow, hideModal, handleSelect}) => {\n  const [flows, setFlows] = useState<Array<FlowType>>();\n  const [pageNumber, setPageNumber] = useState(1);\n  const [isLoading, setIsLoading] = useState(true);\n  const [lastPage, setLastPage] = useState(1);\n\n  const getFlowsData = (bot:string, pageNumber: number) => {\n    getFlows(bot, pageNumber)\n      .then((response) => {\n        var otherFlowsThanOneInside = response.data.filter(item => (item.id != flow) && item.message_count > 0)\n        setFlows(otherFlowsThanOneInside);\n        setPageNumber(response.meta.current_page);\n        setLastPage(response.meta.last_page);\n      })\n      .catch((err) => {\n        console.log(\"Something went wrong\");\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  };\n\n\n  const handlePageChange = (pageNumber: number) => {\n    setPageNumber(pageNumber);\n  };\n\n  useEffect(() => {\n    getFlowsData(bot, pageNumber);\n  }, [pageNumber, lastPage]);\n\n  const getFlowGrid = () => {\n    if (flows.length > 0) {\n      return flows.map((data: FlowType) => {\n        return (\n          <React.Fragment key={data.id}>\n              <div className=\"grid-item\" onClick={ () => handleSelect(data.id, data.name)}>\n                <div className=\"grid-item-wrapper\">\n                <div className=\"grid-item-container\">\n                  <div className=\"image\">\n                  <img src={flowCover} alt=\"Flow Cover\" />\n                  </div>\n                  <div className=\"tag\">\n                    <p>{data.name}</p>\n                  </div>           \n                </div>\n              </div>\n            </div>\n          </React.Fragment>\n        );\n      })\n    } else {\n     return  (<p>There are no other flows or they don't have messages</p>);\n    }\n  }\n\n  return (\n    <ConnectFlowWrapper>\n      <div className=\"modal-body\">\n        <button className=\"modal-exit\" onClick={hideModal}></button>\n        <div className=\"modal-title\">\n         Connect Modal\n        </div>\n        <div className=\"modal-content\">\n          <GridWrapper>\n            <div className=\"grid-row\">\n              {flows && getFlowGrid()}\n            </div>\n          </GridWrapper>\n          {(flows && flows.length > 0) && \n            <Pagination\n            activePage={pageNumber}\n            total={lastPage}\n            onChange={handlePageChange}\n          />}\n        </div>\n      </div>\n    </ConnectFlowWrapper>\n  );\n};\n\nexport default ConnectFlowModal;\n","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Modals/styles.ts",[],["274","275"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Image/styles.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Text/index.tsx",["276","277","278","279","280","281","282","283","284","285"],"import React, { useEffect, useState, useRef, useContext } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { BuilderContext } from '../../../../../services/Builder/BuilderProvider';\nimport { AddTextWrapper } from './styles';\nimport { AddTextButton, ContentButton } from '../../../../common/buttons';\nimport { BiTrash } from 'react-icons/bi';\nimport Textarea from 'react-expanding-textarea';\nimport { updateText, deleteText } from '../../../../../apis/texts';\nimport { toast } from 'react-toastify';\nimport { saveButton } from '../../../../../apis/buttons';\nimport { v4 as uuidv4 } from 'uuid';\n\n\nconst FormText = ({ messageId, childId , showBtnEditor, setEditorContent}) => {\n  const [builderState, setBuilderState] = useContext(BuilderContext);\n  const { register, handleSubmit } = useForm({ mode: 'onChange' });\n  const [isChangingBody, setIsChangingBody] = useState(false);\n\n  const textAreaRef = useRef<HTMLTextAreaElement>(null);\n  const buttonRef = useRef<HTMLButtonElement>(null);\n\n  //Find index of specific object using findIndex method.\n  const childIndex = builderState[messageId].children.findIndex(\n    (obj) => obj.id == childId\n  );\n\n  const onTextChange = (data) => {\n    var height = textAreaRef.current.scrollHeight;\n    updateText({\n      text: data.text,\n      height: height\n    }, childId).then((response) => {\n      setBuilderState(\n        builderState.map((item, index) => {\n          if (index == messageId) {\n            item.children.map((child, ind) => {\n              if (ind == childIndex) {\n                child.value = data.text;\n                child.height = height;\n              }\n            });\n          }\n          return item;\n        })\n      );\n    }).catch((err) => {\n      toast.error(\"Something went wrong\");\n    })\n  };\n\n  const handleDelete = () => {\n    var height = builderState[messageId].height - textAreaRef.current.scrollHeight;\n    deleteText(childId)\n      .then(() => {\n        setBuilderState(\n          builderState.map((item, index) => {\n            if (index == messageId) {\n              item.height = height;\n              item.children.splice(childIndex,1)\n            }\n            return item;\n          })\n        );\n      })\n      .catch((err) => {\n        toast.error(\"Something went wrong\");\n    })\n  };\n\n  const handleAddButton = () => {\n    const buttonNumber = builderState[messageId].children[childIndex].buttons.length + 1;\n    saveButton({\n      name: 'Button #' + buttonNumber,\n      parent_type: 'text',\n      parent: childId\n    }).then((response) => {\n      setBuilderState(\n        builderState.map((item, index) => {\n          if (index == messageId) {\n            item.children.map((child) => {\n              if (child.id == childId) {\n                child.buttons.push(response.data);\n              }\n            });\n          }\n          return item;\n        })\n      );\n    }).catch((err) => {\n      toast.error(\"Something went wrong\")\n    })      \n  }\n\n  useEffect(() => {\n    if (textAreaRef.current) {\n      register(textAreaRef.current, {required: true, minLength: 3});\n    }\n  }, []);\n\n  return (\n    <AddTextWrapper>\n      <button className=\"action-btn\">\n        <BiTrash onClick={handleDelete} />\n      </button>\n      <div className={isChangingBody ? 'card-body active' : 'card-body'}>\n        <form onBlur={handleSubmit(onTextChange)}>\n          <Textarea\n            maxLength={500}\n            placeholder=\"Enter your text here\"\n            onBlur={() => setIsChangingBody(false)}\n            defaultValue={builderState[messageId].children[childIndex].value}\n            id=\"text\"\n            name=\"text\"\n            ref={textAreaRef}\n            onClick={() => setIsChangingBody(true)}\n          />\n        </form>\n      </div>\n      <div className=\"card-base\">\n        {builderState[messageId].children[childIndex].buttons && builderState[messageId].children[childIndex].buttons.map((button, index) => {\n          return (\n            <React.Fragment key={button.id}>\n              <ContentButton\n                ref={buttonRef}\n                onClick={(event) => {\n                setEditorContent({\n                  position: buttonRef.current.scrollTop,\n                  name: button.name,\n                  id: button.id,\n                  messageId: builderState[messageId].id,\n                  childId: childId\n                });\n                showBtnEditor();\n            }}>{button.name}</ContentButton>\n            </React.Fragment>\n          );\n        })}\n      <AddTextButton height=\"4rem\" width=\"100%\" onClick={handleAddButton}>\n        Add Button\n      </AddTextButton>\n      </div>\n    </AddTextWrapper>\n  );\n};\n\nexport default FormText;\n","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Toolbar/styles.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Card/index.tsx",["286","287","288","289","290","291","292","293","294","295","296","297","298","299","300","301","302","303","304","305","306","307","308","309","310","311","312","313","314","315","316","317","318","319"],"import React, { useState, useEffect, useRef, useContext } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { CardSlider, CardWrapper } from './styles';\nimport { BuilderContext } from '../../../../../services/Builder/BuilderProvider';\nimport { AddTextButton } from '../../../../common/buttons';\nimport { ImageWrapper } from '../Image/styles';\nimport { v4 as uuidv4 } from 'uuid';\nimport Textarea from 'react-expanding-textarea';\nimport {\n  BiImageAdd,\n  BiTrash,\n  BiChevronRight,\n  BiChevronLeft,\n  BiPlus,\n} from 'react-icons/bi';\nimport { addCard, deleteCardGroup, updateCard, uploadImage } from '../../../../../apis/cards';\nimport { toast } from 'react-toastify';\n\nconst FormCard = ({ messageId, childId }) => {\n  const [builderState, setBuilderState] = useContext(BuilderContext);\n  const { register, handleSubmit } = useForm({ mode: 'onChange' });\n  const [isChangingHeading, setIsChangingHeading] = useState(false);\n  const [isChangingBody, setIsChangingBody] = useState(false);\n\n  const headingRef = useRef<HTMLInputElement>(null);\n  const paragraphRef = useRef<HTMLTextAreaElement>(null);\n  const cardRef = useRef<HTMLDivElement>(null);\n\n  //Find index of specific object using findIndex method.\n  const childIndex = builderState[messageId].children.findIndex(\n    (obj) => obj.id == childId\n  );\n\n  //Card Navigation functions\n  const handleNextButton = (id) => {\n    const cards = builderState[messageId].children[childIndex].cards;\n    const length = cards.length - 1;\n    const activeCardIndex = getActiveCardIndex(cards);\n\n    if (activeCardIndex == length) {\n      makeCardActive(activeCardIndex + 1, activeCardIndex, length + 2, true);\n    } else {\n      makeCardActive(activeCardIndex + 1, activeCardIndex);\n    }\n  };\n\n  const handlePreviousButton = () => {\n    const cards = builderState[messageId].children[childIndex].cards;\n    const activeCardIndex = getActiveCardIndex(cards);\n    if (activeCardIndex != 0) {\n      makeCardActive(activeCardIndex - 1, activeCardIndex);\n    }\n  };\n\n  const makeCardActive = (\n    cardIndex,\n    activeCardIndex,\n    length = 0,\n    addNew = false\n  ) => {\n    if (addNew) {\n      addCard(childId).then((response) => {\n        setBuilderState(\n          builderState.map((message, index) => { \n            if (index == messageId) { \n              message.children.map((child, ind) => { \n                if (ind == childIndex) {\n                  //First set active card to inactive\n                  child.cards.map((card, inx) => {\n                    console.log(activeCardIndex);\n                  if (inx == activeCardIndex) {\n                    card.active = false\n                  }\n                    return card;\n                })\n                //Then push a new card with active true;\n                  child.cards.push(response.data)\n                }\n              })\n            }\n            return message;\n          })\n        );\n      }).catch((err) => {\n        console.log(err);\n        toast.error(\"Something went wrong\");\n      });\n    } else {\n      setBuilderState(\n        builderState.map((message, index) => { \n          if (index == messageId) { \n            message.children.map((child, ind) => { \n              if (ind == childIndex) {\n                child.cards.map((card, inx) => { \n                  if (inx == cardIndex) { \n                    card.active = true\n                  }\n                  if (inx == activeCardIndex) { \n                    card.active = false\n                  }\n                  return card;\n                })\n              }\n              return child;\n            })\n          }\n          return message;\n        })\n      );\n    }\n  };\n\n  const getActiveCardIndex = (cards) => {\n    return cards.findIndex((obj) => obj.active == true);\n  };\n\n  const getCardIndex = (id) => {\n    return builderState[messageId].children[childIndex].cards.findIndex(\n      (obj) => obj.id === id\n    );\n  };\n\n  const isLastCard = () => {\n    const cards = builderState[messageId].children[childIndex].cards;\n    const length = cards.length - 1;\n    const activeCardIndex = getActiveCardIndex(cards);\n    return activeCardIndex == length;\n  };\n\n  //Form input submit methods\n  const onUploadImage = (data, id) => {\n    let cardIndex = getCardIndex(id);\n    let reader = new FileReader();\n    const formData = new FormData();\n    formData.append('image', data.image[0]);\n    formData.append('name', data.image[0].name);\n\n    reader.onloadend = () => {\n      var height = cardRef.current.scrollHeight;\n      uploadImage(formData, id).then((response) => {\n        setBuilderState(\n          builderState.map((item, index) => {\n            if (index == messageId) {\n              item.children.map((child, ind) => {\n                if (ind == childIndex) {\n                  child.cards.map((card, s) => {\n                    if (s == cardIndex) {\n                      card.selectedImage = data.image[0];\n                      card.imagePreviewUrl = reader.result;\n                      card.height = height;\n                    }\n                    return card;\n                  });\n                }\n                return child;\n              });\n            }\n            return item;\n          })\n        );\n      }).catch((err) => {\n        toast.error(\"Something went wrong\");\n      })\n    };\n\n    reader.readAsDataURL(data.image[0]);\n  };\n\n  const onHeadingChange = (data, id) => {\n    let cardIndex = getCardIndex(id);\n    var height = cardRef.current.scrollHeight;\n    updateCard({\n      heading: data.heading,\n    }, id).then((response) => {\n      setBuilderState(\n        builderState.map((item, index) => {\n          if (index == messageId) {\n            item.children.map((child, ind) => {\n              if (ind == childIndex) {\n                child.cards.map((card, s) => {\n                  if (s == cardIndex) {\n                    card.heading = data.heading;\n                    card.height = height;\n                  }\n                });\n              }\n            });\n          }\n          return item;\n        })\n      );\n    }).catch((err) => {\n      toast.error(\"Something went wrong\");\n    })\n  };\n\n  const onParagraphChange = (data, id) => {\n    let cardIndex = getCardIndex(id);\n    var height = cardRef.current.scrollHeight;\n\n    updateCard({\n      body: data.body,\n    }, id).then((response) => {\n      setBuilderState(\n        builderState.map((item, index) => {\n          if (index == messageId) {\n            item.children.map((child, ind) => {\n              if (ind == childIndex) {\n                child.cards.map((card, s) => {\n                  if (s == cardIndex) {\n                    card.body = data.body;\n                    card.height = height;\n                  }\n                });\n              }\n            });\n          }\n          return item;\n        })\n      );\n    }).catch((err) => {\n      toast.error(\"Something went wrong\");\n    })\n  };\n\n  const handleDelete = () => {\n    deleteCardGroup(childId).then((response) => {\n      setBuilderState(\n        builderState.map((item, index) => {\n          if (index == messageId) {\n            item.height -= 250;\n            item.children.splice(childIndex, 1);\n          }\n          return item;\n        })\n      );\n    }).catch((err) => {\n      toast.error(\"Something went wrong\");\n    })\n  };\n\n  return (\n    <CardSlider>\n      <div className=\"navigation_btn previous\" onClick={handlePreviousButton}>\n        <BiChevronLeft />\n      </div>\n      <div className=\"navigation_btn next\" onClick={handleNextButton}>\n        {isLastCard() ? <BiPlus /> : <BiChevronRight />}\n      </div>\n      <button className=\"action-btn\" onClick={handleDelete}>\n        <BiTrash />\n      </button>\n      {builderState[messageId].children[childIndex].cards.map((card) => {\n        if (card.active) {\n          return (\n            <CardWrapper ref={cardRef}>\n              <div className=\"card-image\">\n                <ImageWrapper>\n                  {card.imagePreviewUrl ? (\n                    <div>\n                      <img src={card.imagePreviewUrl} alt=\"card-image\" />\n                    </div>\n                  ) : (\n                    <form\n                      onChange={handleSubmit((data) =>\n                        onUploadImage(data, card.id)\n                      )}>\n                      <input\n                        ref={register}\n                        type=\"file\"\n                        id={'card_image' + getCardIndex(card.id)}\n                        name=\"image\"\n                        accept=\"image/*\"\n                      />\n                      <label htmlFor={'card_image' + getCardIndex(card.id)}>\n                        <BiImageAdd />\n                        <p>Upload image</p>\n                      </label>\n                    </form>\n                  )}\n                </ImageWrapper>\n              </div>\n              <div className=\"card-text\">\n                <div\n                  className={\n                    isChangingHeading ? 'card-heading active' : 'card-heading'\n                  }>\n                  <form\n                    onBlur={handleSubmit((data) =>\n                      onHeadingChange(data, card.id)\n                    )}>\n                    <input\n                      className=\"card-title\"\n                      ref={register({required: true, minLength: 3 })}\n                      maxLength={27}\n                      id=\"heading\"\n                      name=\"heading\"\n                      defaultValue={card.heading}\n                      onBlur={() => setIsChangingHeading(false)}\n                      onClick={() => {\n                        setIsChangingBody(false);\n                        setIsChangingHeading(true);\n                      }}\n                    />\n                  </form>\n                </div>\n                <div\n                  className={isChangingBody ? 'card-body active' : 'card-body'}>\n                  <form\n                    onBlur={handleSubmit((data) =>\n                      onParagraphChange(data, card.id)\n                    )}>\n                    <Textarea\n                      className=\"card-paragraph\"\n                      maxLength={200}\n                      placeholder=\"Enter your text here\"\n                      onBlur={() => setIsChangingBody(false)}\n                      defaultValue={card.body}\n                      id=\"body\"\n                      name=\"body\"\n                      ref={register({required: true, minLength: 3})}\n                      onClick={() => {\n                        setIsChangingHeading(false);\n                        setIsChangingBody(true);\n                      }}\n                    />\n                  </form>\n                </div>\n              </div>\n            </CardWrapper>\n          );\n        }\n      })}\n    </CardSlider>\n  );\n};\n\nexport default FormCard;\n",["320","321"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Card/styles.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Text/styles.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/styles/global.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/services/Auth/AuthProvider.tsx",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/styles/mediaQueries.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/services/Auth/reducer.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/LandingPage.tsx",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/error/404.tsx",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/services/Modal/ModalProvider.tsx",["322"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/main/Dashboard/index.tsx",[],["323","324"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/main/Settings/index.tsx",["325"],"import React from 'react';\nimport AppLayout from '../../../components/layout/AppLayout';\n\nconst Settings = (props:any) => {\n  return (\n      <h1 className=\"main-heading\">Settings</h1>\n  );\n};\n\nexport default Settings;\n","/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/main/Flows/index.tsx",["326","327","328","329"],"import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { GridWrapper } from '../../../components/common/grid';\nimport { PrimaryButton } from './../../../components/common/buttons';\nimport { HiDotsVertical } from 'react-icons/hi';\nimport { DropdownWrapper } from '../../../components/common/Dropdown/styles';\nimport { useModal } from '../../../services/Modal/ModalProvider';\nimport { getFlows } from '../../../apis/flows';\nimport {withRouter} from 'react-router-dom'\nimport FlowCreateModal from '../../../components/dashboard/Flows/CreateModal';\nimport FlowEditModal from '../../../components/dashboard/Flows/EditModal';\nimport FlowDeleteModal from '../../../components/dashboard/Flows/DeleteModal';\nimport Pagination from '../../../components/common/Pagination/index';\nimport flowCover from '../../../assets/images/flow-cover.png';\nimport { PlatformWrapper } from './styles';\nimport messengerLogo from '../../../assets/images/platforms/messenger.png';\nimport telegramLogo from '../../../assets/images/platforms/telegram.png';\nimport slackLogo from '../../../assets/images/platforms/slack.png';\nimport MessengerConfigure from '../../../components/dashboard/Bots/Configure/Messenger';\nimport TelegramConfigure from '../../../components/dashboard/Bots/Configure/Telegram';\nimport SlackConfigure from '../../../components/dashboard/Bots/Configure/Slack';\nimport PuffLoader from \"react-spinners/PuffLoader\";\n\n\ntype FlowType = {\n  id: string;\n  name: string;\n  last_modified: string;\n};\n\nconst Flows = (props) => {\n  const { showModal, hideModal } = useModal();\n  const [flows, setFlows] = useState<Array<FlowType>>();\n  const [pageNumber, setPageNumber] = useState(1);\n  const [isLoading, setIsLoading] = useState(true);\n  const [lastPage, setLastPage] = useState(1);\n\n  const botId = props.match.params.id;\n\n  const getFlowsData = (bot:string, pageNumber: number) => {\n    getFlows(bot, pageNumber)\n      .then((response) => {\n        setFlows(response.data);\n        setPageNumber(response.meta.current_page);\n        setLastPage(response.meta.last_page);\n      })\n      .catch((err) => {\n        console.log(\"Something went wrong\");\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  };\n  /**\n   * Flow Operations Starts\n   */\n  const handleCreateOpen = (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ) => {\n    showModal(() => (\n      <FlowCreateModal bot={botId} hideModal={hideModal} handleCreateFlow={ handleCreateFlow } />\n    ));\n  };\n\n  const handleEditOpen = (data: FlowType) => {\n    showModal(() => (\n      <FlowEditModal hideModal={hideModal} flow={data} handleEditFlow={ handleEditFlow } />\n    ));\n  };\n\n  const handleDeleteConfirmation = (data: FlowType) => {\n    showModal(() => (\n      <FlowDeleteModal hideModal={hideModal} flow={data} handleDeleteFlow={ handleDeleteFlow }/>\n    ));\n  };\n\n  const handlePageChange = (pageNumber: number) => {\n    setPageNumber(pageNumber);\n  };\n\n  const handleCreateFlow = (newFlow: FlowType) => { \n    const newFlowList = flows.concat(newFlow);\n    setFlows(newFlowList)\n  }\n\n  const handleEditFlow = (data) => {\n    const flowId = flows.findIndex(\n      (obj) => obj.id == data.id\n    );\n    setFlows(flows.map((item, index) => {\n      if (index == flowId) {\n        item.name = data.name\n      }\n      return item;\n    }));\n  }\n\n  const handleDeleteFlow = (id) => {\n    const flowId = flows.findIndex(\n      (obj) => obj.id == id\n    );\n    flows.splice(flowId, 1);\n  }\n  /**\n   * Flow Operations Ends\n   */\n\n  /**\n   * Configure Operations Starts\n   */\n\n  const openMessengerConfigure = () => {\n    showModal(() => (\n      <MessengerConfigure hideModal={hideModal} botId={botId} />\n    ));\n  }\n\n  const openTelegramConfigure = () => {\n    showModal(() => (\n      <TelegramConfigure hideModal={hideModal} botId={botId} />\n    ));\n  }\n\n  const openSlackConfigure = () => {\n    showModal(() => (\n      <SlackConfigure hideModal={hideModal} botId={botId}/>\n    ));\n  }\n  /**\n   * Configure Operations Ends\n   */\n  \n  \n  useEffect(() => {\n    getFlowsData(botId, pageNumber);\n  }, [pageNumber, lastPage]);\n\n  if (isLoading) {\n    return (\n      <div className=\"loader-wrapper\">\n          <PuffLoader color={' #5850EC'}  size={75} />\n      </div>\n    );\n  } else {\n    return (\n      <React.Fragment>\n        <div className=\"page-header\">\n          <h1 className=\"main-heading\">Bot Details</h1>\n            <PrimaryButton onClick={handleCreateOpen}>Add Flow</PrimaryButton>\n          </div>\n          <PlatformWrapper>\n            <div className=\"platform_btn\" onClick={openMessengerConfigure}>\n              <img src={messengerLogo} alt=\"Messenger Logo\" />\n              <p>Messenger</p>\n            </div>\n            <div className=\"platform_btn\" onClick={openTelegramConfigure}>\n              <img src={telegramLogo} alt=\"Telegram Logo\" />\n              <p>Telegram</p>\n            </div>\n            <div className=\"platform_btn\" onClick={openSlackConfigure}>\n              <img src={slackLogo} alt=\"Slack Logo\" />\n              <p>Slack</p>\n            </div>\n          </PlatformWrapper>\n          <GridWrapper>\n            <div className=\"grid-row\">\n              {flows && flows.map((data: FlowType) => {\n                return (\n                  <React.Fragment key={data.id}>\n                    <Link to={'flow/' + data.id}>\n                      <div className=\"grid-item\">\n                        <div className=\"grid-item-wrapper\">\n                          <div className=\"grid-item-container\">\n                            <div className=\"image\">\n                              <img src={flowCover} alt=\"Flow Cover\" />\n                            </div>\n                            <div className=\"tag\">\n                              <p>{data.name}</p>\n                              <DropdownWrapper>\n                                <label className=\"dropbtn\">\n                                  <HiDotsVertical />\n                                </label>\n                                <div className=\"dropdown-content\">\n                                  <p\n                                    onClick={(e) => {\n                                      e.preventDefault();\n                                      handleEditOpen(data);\n                                    }}>\n                                    Edit\n                                  </p>\n                                  <p\n                                    onClick={(e) => {\n                                      e.preventDefault();\n                                      handleDeleteConfirmation(data);\n                                    }}>\n                                    Delete\n                                  </p>\n                                </div>\n                              </DropdownWrapper>\n                            </div>           \n                        </div>\n                      </div>\n                    </div>\n                    </Link>\n                  </React.Fragment>\n                );\n              })}\n          </div>\n        </GridWrapper>\n    \n        <Pagination\n          activePage={pageNumber}\n          total={lastPage}\n          onChange={handlePageChange}\n        />\n      </React.Fragment>\n    );\n  }\n};\n\nexport default withRouter(Flows);\n","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/common/typography.ts",["330","331"],"import styled from 'styled-components';\nimport { darkerGrey } from '../../styles/theme';\nimport { media } from '../../styles/mediaQueries';\n\nexport const PrimaryHeader = styled.h1`\n  font-family: Comic Neue, Roboto, sans-serif;\n  font-weight: 700;\n  font-size: 3.6rem;\n  color: #000;\n`;\n\nexport const FormHeader = styled(PrimaryHeader)`\n  font-size: 2.6rem;\n  text-align: center;\n`;\n\nexport const FormSubHeader = styled.h2`\n  font-family: Roboto, sans-serif;\n  font-weight: 300;\n  font-size: 1.6rem;\n  color: #000;\n  text-align: center;\n`;\n\nexport const SecondaryHeader = styled.h1`\n  font-family: Roboto, sans-serif;\n  font-weight: 500;\n  line-height: 5.6rem;\n  color: #000;\n  font-size: 2.4rem;\n`; \n\nexport const Paragraph = styled.p`\n  font-family: inherit;\n  font-size: 1.5rem;\n  color: ${(props) => props.theme.darkerGrey};\n  line-height: 2.8rem;\n`;\n\nexport const ToolbarHeading = styled.h2`\n  font-family: Roboto, sans-serif;\n  font-style: normal;\n  font-weight: 500;\n  font-size: 1.8rem;\n  line-height: 2.1rem;\n  color: #797979;\n`;\n\nexport const VerticalGap = styled.div<{size: string}>`\n  width: auto;\n  height: ${(props) => props.size}rem;\n  display: block;\n  flex-shrink: 0;\n`;\n\nexport const HorizontalGap = styled.div<{size: string}>`\n  width: ${(props) => props.size}rem;\n  height: auto;\n  display: block;\n`;","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/common/buttons.ts",["332"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/common/grid.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/main/Flows/styles.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/common/Dropdown/styles.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/layout/AuthLayout.tsx",["333"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/common/Pagination/index.tsx",["334","335","336","337"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Flows/DeleteModal.tsx",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Flows/EditModal.tsx",["338","339"],"import React, { useState, useRef, useEffect } from 'react';\nimport { FormHeader } from '../../common/typography';\nimport { InputField } from '../../common/form';\nimport { FormButton } from '../../common/buttons';\nimport { useForm } from \"react-hook-form\";\nimport { updateFlow } from './../../../apis/flows';\nimport { toast } from 'react-toastify';\n\nconst FlowCreateModal = ({flow, hideModal, handleEditFlow}) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const { register, handleSubmit, errors, setError } = useForm();  \n\n  const onSubmit = data => {\n    updateFlow({ name: data.name }, flow.id)\n      .then((response) => {\n        hideModal();\n        toast.success(response.message);\n        handleEditFlow(response.data)\n      }).catch((err) => { \n        if (err.response.status === 422) {\n          if (err.response.data.errors.name) {\n            setError('name', {\n              type: 'server',\n              message: err.response.data.errors.name[0]\n            })\n          } \n        } else {\n          toast.error('Something went wrong')\n        }\n      }).finally(() => { \n        setIsLoading(false);\n      })\n  }\n\n  return (\n    <React.Fragment>\n      <div className=\"modal-body\">\n        <button className=\"modal-exit\" onClick={hideModal}></button>\n        <div className=\"modal-title\">\n          <FormHeader>Edit Flow</FormHeader>\n        </div>\n        <div className=\"modal-content\">\n          <form className=\"bot-create-form\" onSubmit={handleSubmit(onSubmit)}>\n            <InputField\n              isError={!!errors.name}\n              defaultValue={flow.name}\n              name=\"name\"\n              ref={register({required: true, minLength: 3})}\n            />\n            {errors.name && errors.name.type === 'required' && (<p className=\"form-error\">This field is required</p>)}\n            {errors.name && errors.name.type === 'minLength' && (<p className=\"form-error\">This field is required min length of 3</p>)}\n            {errors.name && errors.name.type === 'server' && (<p className=\"form-error\">{ errors.name.message}</p>)}\n\n            <FormButton type=\"submit\" disabled={isLoading}>\n              {isLoading ? 'Loading...' : 'Save'}\n            </FormButton>\n          </form>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default FlowCreateModal;\n","/home/rabinson/Freelancing/ShipboardBot/frontend/src/apis/buttons.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/main/Flows/helper.tsx",["340","341","342"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/front/header/styles.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/front/navbar/index.tsx",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/apis/images.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/front/footer/styles.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Toolbar/BtnEditor.tsx",["343","344","345","346","347","348","349","350","351","352","353"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Sidebar/styles.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/common/form.ts",["354"],"import styled from 'styled-components'\nimport { grey } from '../../styles/theme';\n\nexport const InputField = styled.input<{isError?: boolean}>`\n  background: ${props => props.isError ? '#FFE4E4' : '#F7F7F7'};\n  border-radius: 7px;\n  border: 1px solid rgba(0, 0, 0, 0.1);\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.1);\n  box-sizing: border-box;\n  min-height: 3.8rem;\n  min-width: 30rem;\n  padding: .8rem;\n  outline: none;\n  font-family: Roboto, sans-serif;\n  font-style: normal;\n  font-weight: 400;\n  font-size: 1.4rem;\n  color: #000;\n  width: 100%;\n\n\n  &:focus {\n    font-weight: 400;\n    box-shadow: 0 0 0 3px rgba(164, 202, 254, 0.45);\n    border-color: #5850EC;\n  }\n\n  &::placeholder {\n    color: #d7d7d7;\n    font-size: 1.2rem;\n  }\n`;\n\nexport const SelectField = styled.select<{isError?: boolean}>`\n  background: ${props => props.isError ? '#FFE4E4' : '#F7F7F7'};\n  border-radius: 7px;\n  border: 1px solid rgba(0, 0, 0, 0.1);\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.1);\n  box-sizing: border-box;\n  min-height: 3.8rem;\n  min-width: 30rem;\n  padding: .8rem;\n  outline: none;\n  font-family: Roboto, sans-serif;\n  font-style: normal;\n  font-weight: 400;\n  font-size: 1.4rem;\n  color: #000;\n  width: 100%;\n\n\n  &:focus {\n    font-weight: 400;\n    box-shadow: 0 0 0 3px rgba(164, 202, 254, 0.45);\n    border-color: #5850EC;\n  }\n\n  &::placeholder {\n    color: #d7d7d7;\n    font-size: 1.2rem;\n  }\n`;\n\nexport const FormLink = styled.a`\n  text-decoration: none;\n  font-size: 1.2rem;\n  font-family: Roboto, sans-serif;\n  color: #565252;\n\n  &:hover{\n    text-decoration-line: underline;\n    color: #000;\n  }\n`;\n","/home/rabinson/Freelancing/ShipboardBot/frontend/src/index.tsx",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/utils/storage.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/auth/ForgotPasswordPage.tsx",["355"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/main/Templates/index.tsx",["356"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/main/Flows/builder.tsx",["357","358","359","360","361","362","363","364","365","366","367","368","369","370","371","372","373","374","375","376","377","378","379","380","381","382","383","384","385","386","387","388","389","390","391","392","393","394","395","396","397","398","399","400","401","402"],"import React, { useState } from 'react';\nimport {withRouter} from 'react-router-dom'\nimport { FlowBuilderWrapper } from './styles';\nimport { Stage, Layer, Rect, Image, Text, Group, Circle } from 'react-konva';\nimport Toolbar from '../../../components/dashboard/builder/Toolbar/index';\nimport PuffLoader from \"react-spinners/PuffLoader\";\n\nimport {\n  handleRenderingCards,\n  getImage,\n  calculateHeightOfMessageBox,\n  handleWheel,\n  onTouchPinch,\n  Edge,\n  URLImage,\n} from './helper';\nimport {\n  useBuilder,\n} from '../../../services/Builder/BuilderProvider';\nimport { BiMessageSquareAdd } from 'react-icons/bi';\nimport { saveMessage, getMessages, updateMessage, deleteMessage, createAndConnectMessage } from '../../../apis/messages';\nimport { toast } from 'react-toastify';\nimport { getFlow } from '../../../apis/flows';\nimport { createAndConnectWithButton, updateButton } from '../../../apis/buttons';\nimport Konva from 'konva';\n\nconst FlowBuilder = (props) => {\n  const [isToolbarActive, setIsToolbarActive] = useState(null);\n  const [builderState, setBuilderState, sidebar] = useBuilder();\n  const [flow, setFlow] = useState(null);\n  const [id, setId] = useState(null);\n  const [mousePosition, setMousePosition] = useState({\n    x: 0,\n    y: 0,\n  });\n  const [isEdging, setIsSetting] = useState(false);\n  const [showToolOption, setShowToolOption] = useState(false);\n  const [edgingMessageId, setEdgingMessageId] = useState(null);\n  const [edgingButtonId, setEdgingButtonId] = useState(null);\n  const [edgingButtonMessageId, setEdgingButtonMessageId] = useState(null);\n  const [edgingButtonChildId, setEdgingButtonChildId] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const [state, setState] = useState({\n    layerScale: 1,\n    layerX: 0,\n    layerY: 0,\n  });\n\n  const TrashIcon = \"data:image/svg+xml;base64,\" + window.btoa('<svg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" viewBox=\"0 0 24 24\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"none\" d=\"M17.004 20L17.003 8h-1-8-1v12H17.004zM13.003 10h2v8h-2V10zM9.003 10h2v8h-2V10zM9.003 4H15.003V6H9.003z\"></path><path d=\"M5.003,20c0,1.103,0.897,2,2,2h10c1.103,0,2-0.897,2-2V8h2V6h-3h-1V4c0-1.103-0.897-2-2-2h-6c-1.103,0-2,0.897-2,2v2h-1h-3 v2h2V20z M9.003,4h6v2h-6V4z M8.003,8h8h1l0.001,12H7.003V8H8.003z\"></path><path d=\"M9.003 10H11.003V18H9.003zM13.003 10H15.003V18H13.003z\"></path></svg>');\n\n  const getNextNode = (id) => {\n    if (id) {\n      const nextIndex = builderState.findIndex((obj) => obj.id == id);\n      if (nextIndex == -1) {\n        return mousePosition;\n      }\n      return builderState[nextIndex].position;\n    }\n  };\n\n  const hideToolbar = () => {\n    setIsToolbarActive(false);\n    setId(0);\n  };\n\n  const showToolbar = (id) => {\n    setId(id);\n    setIsToolbarActive(true);\n  };\n\n \nconst handleRenderingChildrens = (message) => {\n  var lastPosition = 70;\n  return message.children.map(function (child) {\n    var yposition = lastPosition;\n    if (child.type === 'card') {\n      lastPosition = lastPosition + child.cards[0].height;\n    } else if (child.type === 'text') {\n      const buttons = child.buttons.length;\n      lastPosition = lastPosition + child.height + (buttons * 40) + 40;\n    } else if (child.type === 'image') {\n      lastPosition = lastPosition + child.height + 20;\n    }\n    return getChildren(message, child, yposition);\n  });\n};\n  \n  const getChildren = (message, child, lastPosition) => {\n    // var messageHeight = calculateHeightOfMessageBox(message.children);\n  if (child.type === 'text') {\n    var textButtons = child.buttons;\n    var boxHeight = (child.height * 1.05) + (textButtons.length * 40) + 10;\n    return (\n      <Group x={20} y={lastPosition}>\n        <Rect\n          fill=\"#F0F4F7\"\n          cornerRadius={5}\n          height={boxHeight}\n          width={300}\n          stroke=\"lightGrey\"\n          strokeWidth={1}\n          shadowColor=\"#95bbdf\"\n          shadowOpacity={0.5}\n          shadowBlur={7}\n        />\n        <Text\n          x={15}\n          y={7}\n          text={child.value}\n          fontSize={15}\n          lineHeight={1.2}\n          width={280}\n        />\n        {child.buttons.map((button, index) => {\n          var y = (child.height * 1.05) + (40 * index) + 10;\n          var node2 = getNextNode(button.next);\n          return (\n            <Group key={button.id}>\n              { button.next &&\n                  <Edge\n                    height={boxHeight}\n                    node1={{ x: -60, y: - boxHeight + 30 + (y)}}\n                    node2={{ x: node2.x - message.position.x -20, y: node2.y - message.position.y - 80}}\n                    width={20}\n                  />\n              }\n              <Rect\n                x={25}\n                y={y}\n                fill=\"#FFFFFF\"\n                cornerRadius={5}\n                height={30}\n                width={250}\n                shadowOpacity={0.5}\n                shadowBlur={7}\n                align={\"center\"}\n              />\n              <Text\n                x={10}\n                y={y + 3}\n                text={button.name}\n                fontSize={15}\n                width={280}\n                lineHeight={1.5}\n                align={\"center\"}\n              />\n              <Circle x={260} y={y + 14} radius={9} fill=\"#8392AB\" strokeWidth={1}\n                onMouseOver={() => { document.body.style.cursor = 'pointer' }}\n                onMouseOut={() => { document.body.style.cursor = 'default' }}\n                onClick={(e) => {\n                  e.cancelBubble = true;\n                  connectButtonEdge(message.id, child.id, button.id)\n                }}\n             />\n            </Group>\n          );\n         })}\n      </Group>\n    );\n  } else if (child.type === 'image') {\n    return getImage(child, lastPosition);\n  } else if (child.type === 'card') {\n    return (\n      <Group x={20} y={lastPosition}>\n        {handleRenderingCards(child)}\n      </Group>\n    );\n  }\n};\n\n  const getStageWidth = () => {\n    return sidebar ? window.innerWidth - 280 : window.innerWidth - 90;\n  };\n\n  const setSelectedTrue = (messageId) => {\n    var previousSelected = getSelectedNode(builderState);\n    if (previousSelected >= 0) {\n      setBuilderState(\n        builderState.map((item, index) => {\n          if (index == messageId) {\n            item.isSelected = true;\n          }\n          if (index == previousSelected) {\n            item.isSelected = false;\n          }\n          return item;\n        })\n      );\n    } else {\n      setBuilderState(\n        builderState.map((item, index) => {\n          if (index == messageId) {\n            item.isSelected = true;\n          }\n          return item;\n        })\n      );\n    }\n  };\n\n  const setHoverTrue = (messageId) => {\n    var previousHover = getHoveredNode(builderState);\n    if (previousHover >= 0) {\n      setBuilderState(\n        builderState.map((item, index) => {\n          if (index == messageId) {\n            item.isHover = true;\n          }\n          if (index == previousHover) {\n            item.isHover = false;\n          }\n          return item;\n        })\n      );\n    } else {\n      setBuilderState(\n        builderState.map((item, index) => {\n          if (index == messageId) {\n            item.isHover = true;\n          }\n          return item;\n        })\n      );\n    }\n  };\n\n  const setHoverFalse = (messageId) => {\n    setBuilderState(\n      builderState.map((item, index) => {\n        if (index == messageId) {\n          item.isHover = false;\n        }\n        return item;\n      })\n    );\n  };\n\n  const connectEdge = (messageId) => {\n    setEdgingButtonId(null);\n    setEdgingMessageId(null);\n\n    if (!showToolOption) {\n      setIsSetting(true);\n      setEdgingMessageId(messageId);\n      setBuilderState(\n        builderState.map((item) => {\n          if (item.id == messageId) {\n            item.next = 'dummy';\n          }\n          return item;\n        })\n      );\n    }\n  };\n\n  const connectButtonEdge = (messageId, childId, buttonId) => {\n    setEdgingButtonId(null);\n    setEdgingMessageId(null);\n    if (!showToolOption) {\n      setIsSetting(true);\n      setEdgingButtonId(buttonId);\n      setEdgingButtonMessageId(messageId);\n      setEdgingButtonChildId(childId);\n\n      setBuilderState(\n        builderState.map((item) => {\n          if (item.id == messageId) {\n            item.children.map((child) => {\n              if (child.id == childId) {\n                child.buttons.map((button) => {\n                  if (button.id == buttonId) {\n                    button.next = \"dummy\"\n                  }\n                  return button;\n                })\n              }\n              return child;\n            })\n          }\n          return item;\n        })\n      );\n    }\n  }\n\n  const handleMousePosition = (event) => {\n    if (!showToolOption) {\n      var point = event.target.getStage().getPointerPosition();\n      setMousePosition({\n        x: point.x,\n        y: point.y,\n      });\n    }\n  };\n\n  const handleClickOnCanvas = () => {\n    if (isEdging) {\n      var hoveredIndex = getHoveredNode(builderState);\n      if (hoveredIndex > 0) {\n        //If the edging is hovered over another message and connect that message\n        var messageIdOfHover = builderState[hoveredIndex].id\n        if (messageIdOfHover != edgingMessageId) {\n          if (edgingMessageId) {\n            updateMessage({\n              next: messageIdOfHover\n            }, edgingMessageId).then((response) => { \n              setBuilderState(\n                builderState.map((item, index) => {\n                  if (item.id == edgingMessageId) {\n                    item.next = messageIdOfHover\n                  }\n                  return item;\n                })\n              );\n            }).catch((err) => {\n              toast.error(\"Something went wrong\");\n            }).finally(() => {\n              setEdgingMessageId(null);\n            })\n           } else if (edgingButtonId) {\n            updateButton({\n              next: messageIdOfHover\n            }, edgingButtonId).then((response) => {\n              setBuilderState(\n                builderState.map((item, index) => {\n                  if (item.id == edgingButtonMessageId) {\n                    item.children.map((child) => {\n                      if (child.id == edgingButtonChildId) {\n                        child.buttons.map((button) => {\n                          if (button.id == edgingButtonId) {\n                            button.next = messageIdOfHover\n                          }\n                        })\n                      }\n                    })\n                  }  \n                  return item;\n                })\n              );\n            }).catch((err) => {\n              toast.error(\"Something went wrong\")\n            }).finally(() => {\n              setEdgingButtonId(null);\n            })\n          }\n        } \n      } else {\n        setShowToolOption(true);\n      }\n    }\n  };\n\n  const handleAddMessage = () => {\n    let number = builderState.length + 1;\n    saveMessage({\n      name: 'Send Message #' + number,\n      type: 'default',\n      position_x: 1200,\n      position_y: 60,\n      flow: props.match.params.id\n    }).then((response) => {\n       setBuilderState([...builderState, response.data]);\n\n    }).catch((err) => {\n      toast.error(\"Something went wrong\")\n    })\n  }\n\n  const handleDeleteMessage = (item, index) => {\n    if (index > 0) {\n      //Delete the message\n    builderState.splice(index, 1);\n    //Delete the edging where this message belongs to\n    const messageIndexHavingNextOfDeleteMessage = getMessageIndexWhichHasNextOfGivenMessageId(builderState, item.id);\n    setBuilderState(\n      builderState.map((item, index) => {\n        if (index == messageIndexHavingNextOfDeleteMessage) {\n          item.next = \"\"\n        }\n        return item;\n      })\n    );\n    deleteMessage(item.id).then(() => {\n      setShowToolOption(false);\n      setEdgingMessageId(null);\n      setEdgingButtonId(null);\n      setIsSetting(false);\n    }).catch((err) => {\n        toast.error(\"Something went wrong\");\n      })\n    } else {\n      toast.info(\"You cannot delete the start message\")\n    }\n  }\n\n  const handleDragMessage = (e, item, index) =>  {\n    var updatedPosition = {\n      x: e.target.x(),\n      y: e.target.y(),\n    };\n\n    setBuilderState(\n      builderState.map((item, ind) => {\n        if (ind == index) {\n          item.position = updatedPosition;\n        }\n        return item;\n      })\n    );\n  }\n\n  const updateMessagePosition = (item) => {\n    updateMessage({\n      position_x: item.position.x,\n      position_y: item.position.y\n    }, item.id).catch((err) => {\n      toast.error('Something went wrong')\n    })    \n  }\n\n  const handleToolOptionNewMessageAction = () => {\n    setIsSetting(false);\n    setShowToolOption(false);\n    let number = builderState.length + 1;\n    var newMessage = {\n      name: 'Send Message #' + number,\n      type: 'default',\n      position_x: mousePosition.x,\n      position_y: mousePosition.y,\n      flow: props.match.params.id\n    }\n\n    if (edgingMessageId) {\n      createAndConnectMessage(newMessage, edgingMessageId)\n        .then((response) => {\n          setBuilderState(\n            builderState.map((item) => {\n              if (item.id == edgingMessageId) {\n                item.next = response.data.id;\n              }\n              return item;\n            })\n          );\n          setBuilderState([...builderState, response.data]);\n        }).catch((err) => {\n          toast.error(\"Something went wrong\")\n        }).finally(() => {\n          setEdgingMessageId(null);\n        })\n    } else if (edgingButtonId) {\n      createAndConnectWithButton(newMessage, edgingButtonId)\n        .then((response) => {\n          setBuilderState(\n            builderState.map((item) => {\n              if (item.id == edgingButtonMessageId) {\n                item.children.map((child) => {\n                  if (child.id == edgingButtonChildId) {\n                    child.buttons.map((button) => {\n                      if (button.id == edgingButtonId) {\n                        button.next = response.data.id\n                      }\n                      return button;\n                    })\n                  }\n                  return child;\n                })\n              }\n              return item;\n            })\n          );\n          setBuilderState([...builderState, response.data]);\n        }).catch((err) => {\n          toast.error(\"Something went wrong\")\n        }).finally(() => {\n          setEdgingButtonId(null);\n          setEdgingButtonMessageId(null);\n          setEdgingButtonChildId(null);\n        })\n    }\n  }\n\n  const handleToolOptionConnectFlow = () => {\n    setIsSetting(false);\n    setShowToolOption(false);\n    let number = builderState.length + 1;\n    var newFlow = {\n      name: 'Connect Flow #' + number,\n      type: 'flow',\n      position_x: mousePosition.x,\n      position_y: mousePosition.y,\n      flow: props.match.params.id\n    }\n    if (edgingMessageId) {\n      createAndConnectMessage(newFlow, edgingMessageId).then((response) => {\n        setBuilderState(\n          builderState.map((item) => {\n            if (item.id == edgingMessageId) {\n              item.next = response.data.id;\n            }\n            return item;\n          })\n        );\n        setBuilderState([...builderState, response.data]);\n       \n      }).catch((err) => {\n        toast.error(\"Something went wrong\")\n      }).finally(() => {\n        setEdgingMessageId(null);\n      });\n    } else if (edgingButtonId) {\n      createAndConnectWithButton(newFlow, edgingButtonId)\n        .then((response) => {\n          setBuilderState(\n            builderState.map((item) => {\n              if (item.id == edgingButtonMessageId) {\n                item.children.map((child) => {\n                  if (child.id == edgingButtonChildId) {\n                    child.buttons.map((button) => {\n                      if (button.id == edgingButtonId) {\n                        button.next = response.data.id\n                      }\n                      return button;\n                    })\n                  }\n                  return child;\n                })\n              }\n              return item;\n            })\n          );\n          setBuilderState([...builderState, response.data]);\n        }).catch((err) => {\n          toast.error(\"Something went wrong\")\n        }).finally(() => {\n          setEdgingButtonId(null);\n          setEdgingButtonMessageId(null);\n          setEdgingButtonChildId(null);\n        })\n    }\n  }\n\n  const handleToolOptionCancel = () => {\n    setShowToolOption(false);\n    if (isEdging) setIsSetting(false);\n    if (edgingMessageId) {\n      setBuilderState(\n        builderState.map((item) => {\n          if (item.id == edgingMessageId) {\n            item.next = \"\"\n          }\n          return item;\n        })\n      );\n      if (edgingMessageId) setEdgingMessageId(null);\n    } else if (edgingButtonId) {\n        setBuilderState(\n          builderState.map((item) => {\n            if (item.id == edgingButtonMessageId) {\n              item.children.map((child) => {\n                if (child.id == edgingButtonChildId) {\n                  child.buttons.map((button) => {\n                    if (button.id == edgingButtonId) {\n                      button.next = null\n                    }\n                    return button;\n                  })\n                }\n                return child;\n              })\n            }\n            return item;\n          })\n        );\n        if(edgingButtonId) setEdgingButtonId(null);\n        if(edgingButtonChildId) setEdgingButtonChildId(null);\n        if(edgingButtonMessageId) setEdgingButtonMessageId(null);\n      }          \n    }\n  React.useEffect(() => {\n    setIsLoading(true);\n    getMessages(props.match.params.id)\n      .then((response) => {\n        setBuilderState(response.data)\n      })\n      .catch((err) => {\n        toast.error(\"Something went wrong\")\n      }).finally(() => {\n        setIsLoading(false);\n      })\n    getFlow(props.match.params.id)\n      .then((response) => {  \n        setFlow(response.data);\n    }).catch((err) => {\n      toast.error(\"Something went wrong\")   \n    })\n    Konva.hitOnDragEnabled = true;\n  }, []);\n\n  const getToolOption = () => {\n    return (\n      <Group  x={mousePosition.x} y={mousePosition.y} zIndex={200}\n        onMouseOver={() => { document.body.style.cursor = 'pointer' }}\n        onMouseOut={() => { document.body.style.cursor = 'default' }}\n      >\n        <Group onClick={handleToolOptionNewMessageAction}>\n          <Rect\n            width={200}\n            height={50}\n            fill=\"#FDFDFD\"\n            strokeWidth={2}\n            shadowColor=\"gray\"\n            shadowOpacity={0.7}\n            shadowBlur={2}\n            onMouseDown={(e) => {\n              e.target.setAttr('fill', ' #eef1f4');\n            }}\n          />\n          <Text\n            x={15}\n            y={15}\n            text=\"+ New Message\"\n            fontFamily={'Roboto'}\n            fontSize={20}\n            fill={'#5850eb'}\n          />\n        </Group>\n        <Group y={50} onClick={handleToolOptionConnectFlow}>\n          <Rect\n            width={200}\n            height={50}\n            fill=\"#FDFDFD\"\n            strokeWidth={2}\n            shadowColor=\"gray\"\n            shadowOpacity={0.7}\n            shadowBlur={2}\n            onMouseDown={(e) => {\n              e.target.setAttr('fill', ' #eef1f4');\n            }}\n          />\n          <Text\n            x={15}\n            y={15}\n            text=\"+ Connect Flow\"\n            fontFamily={'Roboto'}\n            fontSize={20}\n            fill={'#5850eb'}\n          />\n        </Group>\n        <Group y={100}  onClick={handleToolOptionCancel}>\n          <Rect\n            width={200}\n            height={50}\n            fill=\"#FDFDFD\"\n            strokeWidth={2}\n            shadowColor=\"gray\"\n            shadowOpacity={0.7}\n            shadowBlur={2}\n            onMouseDown={(e) => {\n              e.target.setAttr('fill', ' #eef1f4');\n            }}\n          />\n          <Text\n            x={15}\n            y={15}\n            text=\"- Cancel\"\n            fontFamily={'Roboto'}\n            fontSize={20}\n            fill={'#5850eb'}\n          />\n        </Group>\n      </Group>\n    );\n  }\n  const getDefaultMessage = (item, index, messageHeight) => {\n    return (\n      <Group\n        x={item.position?.x}\n        y={item.position?.y}\n        draggable\n        onClick={(e) => {\n          showToolbar(item.id);\n          setSelectedTrue(index);\n        }}\n        onMouseEnter={(e) => {\n          setHoverTrue(index);\n        }}\n        onMouseLeave={(e) => {\n          setHoverFalse(index);\n        }}\n        hitOnDragEnabled={true}\n        onDragMove={(e) => {\n          handleDragMessage(e, item, index)\n        }}\n        onDragEnd={() => { updateMessagePosition(item) }}\n      >\n        {index === 0 &&\n          <Group x={10} y={-40}>\n            <Rect cornerRadius={7} stroke={\"green\"} strokeWidth={2} fill=\"#FDFDFD\" width={60} height={30} />\n            <Text\n              x={13}\n              y={8}\n              text={\"Start\"}\n              fontFamily={'Roboto'}\n              fontSize={15}\n              fill={'green'}\n            />\n          </Group>\n        }\n        <Rect\n          cornerRadius={16}\n          height={messageHeight}\n          width={340}\n          fill=\"#FDFDFD\"\n          strokeWidth={1}\n          stroke={ \"#5850EB\"}\n          shadowColor={getShadowColor(item)}\n          shadowOpacity={1}\n          shadowBlur={7}\n        />\n        {item.isHover &&\n          <>\n            <Rect\n              width={50} height={30} x={330} y={10} />\n            <URLImage\n              onMouseOver={() => { document.body.style.cursor = 'pointer' }}\n              onMouseOut={() => { document.body.style.cursor = 'default' }}\n              onClick={() => { handleDeleteMessage(item, index) }}\n              image={TrashIcon} x={345} y={10} height={25} width={25} />\n          </>\n        }\n        <Circle x={30} y={30} radius={15} fill=\"#5850EB\" />\n        <Text\n          x={55}\n          y={22}\n          text={item.name}\n          fontFamily={'Roboto'}\n          fontSize={20}\n          fill={'gray'}\n        />\n        <Group\n          x={340}\n          y={messageHeight - 20}\n          onMouseOver={() => { document.body.style.cursor = 'pointer' }}\n          onMouseOut={() => { document.body.style.cursor = 'default' }}\n          onClick={(e) => {\n            e.cancelBubble = true;\n            connectEdge(item.id)\n          }}>\n          <Circle radius={9} fill=\"#8392AB\" strokeWidth={1} />\n          <Text\n            x={-80}\n            y={-8}\n            text=\"Next Step\"\n            fontFamily={'Roboto'}\n            fontSize={15}\n            fontWeight={300}\n            fill={'gray'}\n          />\n        </Group>\n        {typeof item.children == 'object' ? (\n          <>\n            {item.children.length > 0 ? (\n              handleRenderingChildrens(item)\n            ) : (\n                <React.Fragment key={item}>\n                  <Group>\n                    <Rect\n                      x={20}\n                      y={75}\n                      height={60}\n                      width={300}\n                      fill=\"#EEF1F4\"\n                      cornerRadius={16}\n                    />\n                    <Text\n                      text=\"No Content\"\n                      x={110}\n                      y={95}\n                      fontFamily={'Roboto'}\n                      fontSize={20}\n                      fontWeight={300}\n                      fill={'blue'}\n                    />\n                  </Group>\n                </React.Fragment>\n              )}\n          </>\n        ) : null}\n      </Group>\n    );\n  }\n  const getFlowMessage = (item, index) => {\n    return (\n      <Group\n      x={item.position?.x}\n      y={item.position?.y}\n      draggable\n      onClick={(e) => {\n        showToolbar(item.id);\n        setSelectedTrue(index);\n      }}\n      onMouseEnter={(e) => {\n        setHoverTrue(index);\n      }}\n      onMouseLeave={(e) => {\n        setHoverFalse(index);\n      }}\n      hitOnDragEnabled={true}\n      onDragMove={(e) => {\n        handleDragMessage(e, item, index)\n      }}\n      onDragEnd={() => { updateMessagePosition(item) }}\n    >\n      <Rect\n        cornerRadius={16}\n        height={200}\n        width={340}\n        fill=\"#FDFDFD\"\n        stroke={ \"#f9bf3b\"}\n        strokeWidth={1}\n        shadowColor={getShadowColor(item)}\n        shadowOpacity={1}\n        shadowBlur={7}\n      />\n      {item.isHover &&\n        <>\n          <Rect\n            width={50} height={30} x={330} y={10} />\n          <URLImage\n            onMouseOver={() => { document.body.style.cursor = 'pointer' }}\n            onMouseOut={() => { document.body.style.cursor = 'default' }}\n            onClick={() => { handleDeleteMessage(item, index) }}\n            image={TrashIcon} x={345} y={10} height={25} width={25} />\n        </>\n      }\n      <Circle x={30} y={30} radius={15} fill=\"#f9bf3b\" />\n      <Text\n        x={55}\n        y={22}\n        text={item.name}\n        fontFamily={'Roboto'}\n        fontSize={20}\n        fill={'gray'}\n        />\n        {item.children.length > 0 ? (\n          <Group>\n          <Rect\n            x={20}\n            y={75}\n            height={60}\n            width={300}\n            stroke=\"green\"\n            strokeWidth={1}\n            fill=\"#EEF1F4\"\n            cornerRadius={16}\n          />\n          <Text\n            text={item.children[0].name}\n            x={40}\n            y={95}\n            fontFamily={'Roboto'}\n            fontSize={20}\n            fontWeight={300}\n              fill={\"#f9bf3b\"}\n              align={\"center\"}\n          />\n        </Group>\n        ) : (\n            <React.Fragment key={item}>\n              <Group>\n                <Rect\n                  x={20}\n                  y={75}\n                  height={60}\n                  width={300}\n                  fill=\"#EEF1F4\"\n                  cornerRadius={16}\n                />\n                <Text\n                  text=\"Select Flow\"\n                  x={110}\n                  y={95}\n                  fontFamily={'Roboto'}\n                  fontSize={20}\n                  fontWeight={300}\n                  fill={\"#f9bf3b\"}\n                  align={\"center\"}\n                />\n              </Group>\n            </React.Fragment>\n          )}\n    </Group>\n    );\n  }\n  const getMessageBox = (item, index, messageHeight) => {\n    if (item.type == \"default\") {\n      return getDefaultMessage(item, index, messageHeight);\n    } else if (item.type == \"flow\") {\n      return getFlowMessage(item, index);\n    }\n  }\n  \n  if (isLoading) {\n    return (\n      <div className=\"loader-wrapper\">\n        <PuffLoader color={' #5850EC'} loading={isLoading} size={75} />\n      </div>\n    );\n  } else {\n    return (\n      <FlowBuilderWrapper>\n        {flow && <div className=\"header\"><p>{flow.name}</p></div>}\n        <div className=\"stage-action\">\n          <BiMessageSquareAdd\n            onClick={handleAddMessage}\n          />\n        </div>\n        {isToolbarActive && <Toolbar id={id} hideToolbar={hideToolbar} bot={flow.bot} flow={flow.id} />}\n        <Stage\n          width={getStageWidth()}\n          height={window.innerHeight - 70}\n          scaleX={state.layerScale}\n          scaleY={state.layerScale}\n          onMouseMove={handleMousePosition}\n          x={0}\n          y={0}\n          onClick={handleClickOnCanvas}>\n          <Layer name=\"layer_1\" draggable onTouchMove={onTouchPinch} onWheel={handleWheel}>\n            <Rect\n              x={-window.innerWidth}\n              y={-window.innerHeight}\n              width={window.innerWidth * 3}\n              height={window.innerHeight * 3}\n              fill=\"\"\n            />\n            {showToolOption && getToolOption()}\n            {builderState &&\n              typeof builderState == 'object' &&\n              builderState.map((item, index) => {\n                var messageHeight = calculateHeightOfMessageBox(item.children);\n                return (\n                  <React.Fragment key={item.id}>\n                    {(item.type === \"default\" && item.next) ? (\n                      <Edge\n                        height={messageHeight}\n                        node1={item.position}\n                        node2={getNextNode(item.next)}\n                      />\n                    ) : null}\n                    {getMessageBox(item, index, messageHeight)}\n                  </React.Fragment>\n                );\n              })}\n          </Layer>\n        </Stage>\n      </FlowBuilderWrapper>\n    );\n  }\n};\nconst getShadowColor = (item) => {\n  if (item.isSelected) {\n    if (item.type == \"default\") {\n      return '#1e824c';\n    } else if (item.type == \"flow\") {\n      return \"#f9ae23\";\n    }\n   \n  } else if (item.isHover) {\n    if (item.type == \"default\") {\n      return '#8078FF';\n    } else if (item.type == \"flow\") {\n      return \"#f9bf3b\";\n    }\n  } else {\n    return '#95bbdf';\n  }\n};\n\nconst getSelectedNode = (state) => {\n  return state.findIndex((obj) => obj.isSelected == true);\n};\n\nconst getMessageIndexWhichHasNextOfGivenMessageId = (state, messageId) => {\n  return state.findIndex((obj) => obj.next == messageId);\n}\n\nconst getHoveredNode = (state) => {\n  return state.findIndex((obj) => obj.isHover == true);\n};\n\nexport default withRouter(FlowBuilder);\n","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Bots/CreateModal.tsx",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Bots/Configure/Telegram.tsx",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/apis/messages.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/utils/request.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/front/footer/index.tsx",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/common/Pagination/styles.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/apis/texts.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Sidebar/index.tsx",["403","404","405","406","407"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/App.tsx",["408","409"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/routes/ProtectedRoute.tsx",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/auth/LoginPage.tsx",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/apis/bots.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/front/header/index.tsx",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Bots/DeleteModal.tsx",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Flows/CreateModal.tsx",["410","411"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Bots/Configure/Messenger.tsx",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/front/info/index.tsx",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/utils/pagination.ts",["412"],{"ruleId":"413","severity":1,"message":"414","line":1,"column":39,"nodeType":"415","messageId":"416","endLine":1,"endColumn":45},{"ruleId":"413","severity":1,"message":"417","line":1,"column":47,"nodeType":"415","messageId":"416","endLine":1,"endColumn":56},{"ruleId":"413","severity":1,"message":"418","line":3,"column":59,"nodeType":"415","messageId":"416","endLine":3,"endColumn":75},{"ruleId":"419","severity":1,"message":"420","line":38,"column":59,"nodeType":"421","messageId":"422","endLine":38,"endColumn":61},{"ruleId":"419","severity":1,"message":"420","line":46,"column":19,"nodeType":"421","messageId":"422","endLine":46,"endColumn":21},{"ruleId":"419","severity":1,"message":"420","line":70,"column":21,"nodeType":"421","messageId":"422","endLine":70,"endColumn":23},{"ruleId":"419","severity":1,"message":"420","line":87,"column":21,"nodeType":"421","messageId":"422","endLine":87,"endColumn":23},{"ruleId":"423","severity":1,"message":"424","line":97,"column":6,"nodeType":"425","endLine":97,"endColumn":35,"suggestions":"426"},{"ruleId":"423","severity":1,"message":"427","line":97,"column":7,"nodeType":"428","endLine":97,"endColumn":34},{"ruleId":"419","severity":1,"message":"420","line":209,"column":19,"nodeType":"421","messageId":"422","endLine":209,"endColumn":21},{"ruleId":"419","severity":1,"message":"420","line":234,"column":19,"nodeType":"421","messageId":"422","endLine":234,"endColumn":21},{"ruleId":"419","severity":1,"message":"420","line":257,"column":19,"nodeType":"421","messageId":"422","endLine":257,"endColumn":21},{"ruleId":"429","replacedBy":"430"},{"ruleId":"431","replacedBy":"432"},{"ruleId":"413","severity":1,"message":"433","line":2,"column":10,"nodeType":"415","messageId":"416","endLine":2,"endColumn":15},{"ruleId":"413","severity":1,"message":"434","line":18,"column":10,"nodeType":"415","messageId":"416","endLine":18,"endColumn":19},{"ruleId":"419","severity":1,"message":"435","line":24,"column":77,"nodeType":"421","messageId":"422","endLine":24,"endColumn":79},{"ruleId":"423","severity":1,"message":"436","line":44,"column":6,"nodeType":"425","endLine":44,"endColumn":28,"suggestions":"437"},{"ruleId":"429","replacedBy":"438"},{"ruleId":"431","replacedBy":"439"},{"ruleId":"413","severity":1,"message":"440","line":11,"column":16,"nodeType":"415","messageId":"416","endLine":11,"endColumn":22},{"ruleId":"419","severity":1,"message":"420","line":24,"column":21,"nodeType":"421","messageId":"422","endLine":24,"endColumn":23},{"ruleId":"419","severity":1,"message":"420","line":35,"column":21,"nodeType":"421","messageId":"422","endLine":35,"endColumn":23},{"ruleId":"441","severity":1,"message":"442","line":36,"column":44,"nodeType":"443","messageId":"444","endLine":36,"endColumn":46},{"ruleId":"419","severity":1,"message":"420","line":37,"column":23,"nodeType":"421","messageId":"422","endLine":37,"endColumn":25},{"ruleId":"419","severity":1,"message":"420","line":57,"column":23,"nodeType":"421","messageId":"422","endLine":57,"endColumn":25},{"ruleId":"419","severity":1,"message":"420","line":79,"column":21,"nodeType":"421","messageId":"422","endLine":79,"endColumn":23},{"ruleId":"441","severity":1,"message":"442","line":80,"column":39,"nodeType":"443","messageId":"444","endLine":80,"endColumn":41},{"ruleId":"419","severity":1,"message":"420","line":81,"column":28,"nodeType":"421","messageId":"422","endLine":81,"endColumn":30},{"ruleId":"423","severity":1,"message":"445","line":98,"column":6,"nodeType":"425","endLine":98,"endColumn":8,"suggestions":"446"},{"ruleId":"413","severity":1,"message":"417","line":1,"column":27,"nodeType":"415","messageId":"416","endLine":1,"endColumn":36},{"ruleId":"413","severity":1,"message":"447","line":5,"column":10,"nodeType":"415","messageId":"416","endLine":5,"endColumn":23},{"ruleId":"413","severity":1,"message":"440","line":7,"column":16,"nodeType":"415","messageId":"416","endLine":7,"endColumn":22},{"ruleId":"413","severity":1,"message":"448","line":25,"column":9,"nodeType":"415","messageId":"416","endLine":25,"endColumn":19},{"ruleId":"413","severity":1,"message":"449","line":26,"column":9,"nodeType":"415","messageId":"416","endLine":26,"endColumn":21},{"ruleId":"419","severity":1,"message":"420","line":31,"column":21,"nodeType":"421","messageId":"422","endLine":31,"endColumn":23},{"ruleId":"419","severity":1,"message":"420","line":40,"column":25,"nodeType":"421","messageId":"422","endLine":40,"endColumn":27},{"ruleId":"419","severity":1,"message":"435","line":50,"column":25,"nodeType":"421","messageId":"422","endLine":50,"endColumn":27},{"ruleId":"419","severity":1,"message":"420","line":65,"column":23,"nodeType":"421","messageId":"422","endLine":65,"endColumn":25},{"ruleId":"441","severity":1,"message":"442","line":66,"column":49,"nodeType":"443","messageId":"444","endLine":66,"endColumn":51},{"ruleId":"419","severity":1,"message":"420","line":67,"column":25,"nodeType":"421","messageId":"422","endLine":67,"endColumn":27},{"ruleId":"419","severity":1,"message":"420","line":71,"column":27,"nodeType":"421","messageId":"422","endLine":71,"endColumn":29},{"ruleId":"419","severity":1,"message":"420","line":91,"column":21,"nodeType":"421","messageId":"422","endLine":91,"endColumn":23},{"ruleId":"419","severity":1,"message":"420","line":93,"column":23,"nodeType":"421","messageId":"422","endLine":93,"endColumn":25},{"ruleId":"419","severity":1,"message":"420","line":95,"column":27,"nodeType":"421","messageId":"422","endLine":95,"endColumn":29},{"ruleId":"419","severity":1,"message":"420","line":98,"column":27,"nodeType":"421","messageId":"422","endLine":98,"endColumn":29},{"ruleId":"419","severity":1,"message":"420","line":114,"column":48,"nodeType":"421","messageId":"422","endLine":114,"endColumn":50},{"ruleId":"419","severity":1,"message":"420","line":127,"column":28,"nodeType":"421","messageId":"422","endLine":127,"endColumn":30},{"ruleId":"419","severity":1,"message":"420","line":143,"column":23,"nodeType":"421","messageId":"422","endLine":143,"endColumn":25},{"ruleId":"419","severity":1,"message":"420","line":145,"column":25,"nodeType":"421","messageId":"422","endLine":145,"endColumn":27},{"ruleId":"419","severity":1,"message":"420","line":147,"column":27,"nodeType":"421","messageId":"422","endLine":147,"endColumn":29},{"ruleId":"419","severity":1,"message":"420","line":177,"column":21,"nodeType":"421","messageId":"422","endLine":177,"endColumn":23},{"ruleId":"441","severity":1,"message":"442","line":178,"column":44,"nodeType":"443","messageId":"444","endLine":178,"endColumn":46},{"ruleId":"419","severity":1,"message":"420","line":179,"column":23,"nodeType":"421","messageId":"422","endLine":179,"endColumn":25},{"ruleId":"441","severity":1,"message":"442","line":180,"column":43,"nodeType":"443","messageId":"444","endLine":180,"endColumn":45},{"ruleId":"419","severity":1,"message":"420","line":181,"column":25,"nodeType":"421","messageId":"422","endLine":181,"endColumn":27},{"ruleId":"419","severity":1,"message":"420","line":206,"column":21,"nodeType":"421","messageId":"422","endLine":206,"endColumn":23},{"ruleId":"441","severity":1,"message":"442","line":207,"column":44,"nodeType":"443","messageId":"444","endLine":207,"endColumn":46},{"ruleId":"419","severity":1,"message":"420","line":208,"column":23,"nodeType":"421","messageId":"422","endLine":208,"endColumn":25},{"ruleId":"441","severity":1,"message":"442","line":209,"column":43,"nodeType":"443","messageId":"444","endLine":209,"endColumn":45},{"ruleId":"419","severity":1,"message":"420","line":210,"column":25,"nodeType":"421","messageId":"422","endLine":210,"endColumn":27},{"ruleId":"419","severity":1,"message":"420","line":230,"column":21,"nodeType":"421","messageId":"422","endLine":230,"endColumn":23},{"ruleId":"441","severity":1,"message":"450","line":253,"column":70,"nodeType":"443","messageId":"451","endLine":253,"endColumn":72},{"ruleId":"452","severity":1,"message":"453","line":261,"column":23,"nodeType":"454","endLine":261,"endColumn":74},{"ruleId":"429","replacedBy":"455"},{"ruleId":"431","replacedBy":"456"},{"ruleId":"413","severity":1,"message":"457","line":28,"column":25,"nodeType":"415","messageId":"416","endLine":28,"endColumn":39},{"ruleId":"429","replacedBy":"458"},{"ruleId":"431","replacedBy":"459"},{"ruleId":"413","severity":1,"message":"460","line":2,"column":8,"nodeType":"415","messageId":"416","endLine":2,"endColumn":17},{"ruleId":"419","severity":1,"message":"420","line":88,"column":23,"nodeType":"421","messageId":"422","endLine":88,"endColumn":25},{"ruleId":"419","severity":1,"message":"420","line":91,"column":17,"nodeType":"421","messageId":"422","endLine":91,"endColumn":19},{"ruleId":"419","severity":1,"message":"420","line":100,"column":23,"nodeType":"421","messageId":"422","endLine":100,"endColumn":25},{"ruleId":"423","severity":1,"message":"461","line":136,"column":6,"nodeType":"425","endLine":136,"endColumn":28,"suggestions":"462"},{"ruleId":"413","severity":1,"message":"463","line":2,"column":10,"nodeType":"415","messageId":"416","endLine":2,"endColumn":20},{"ruleId":"413","severity":1,"message":"464","line":3,"column":10,"nodeType":"415","messageId":"416","endLine":3,"endColumn":15},{"ruleId":"413","severity":1,"message":"465","line":2,"column":8,"nodeType":"415","messageId":"416","endLine":2,"endColumn":15},{"ruleId":"413","severity":1,"message":"466","line":5,"column":10,"nodeType":"415","messageId":"416","endLine":5,"endColumn":20},{"ruleId":"413","severity":1,"message":"467","line":1,"column":17,"nodeType":"415","messageId":"416","endLine":1,"endColumn":25},{"ruleId":"413","severity":1,"message":"417","line":1,"column":27,"nodeType":"415","messageId":"416","endLine":1,"endColumn":36},{"ruleId":"419","severity":1,"message":"435","line":20,"column":34,"nodeType":"421","messageId":"422","endLine":20,"endColumn":36},{"ruleId":"419","severity":1,"message":"435","line":47,"column":34,"nodeType":"421","messageId":"422","endLine":47,"endColumn":36},{"ruleId":"413","severity":1,"message":"414","line":1,"column":27,"nodeType":"415","messageId":"416","endLine":1,"endColumn":33},{"ruleId":"413","severity":1,"message":"417","line":1,"column":35,"nodeType":"415","messageId":"416","endLine":1,"endColumn":44},{"ruleId":"413","severity":1,"message":"468","line":2,"column":43,"nodeType":"415","messageId":"416","endLine":2,"endColumn":49},{"ruleId":"419","severity":1,"message":"420","line":184,"column":56,"nodeType":"421","messageId":"422","endLine":184,"endColumn":58},{"ruleId":"413","severity":1,"message":"469","line":308,"column":7,"nodeType":"415","messageId":"416","endLine":308,"endColumn":17},{"ruleId":"413","severity":1,"message":"470","line":11,"column":35,"nodeType":"415","messageId":"416","endLine":11,"endColumn":41},{"ruleId":"419","severity":1,"message":"420","line":19,"column":28,"nodeType":"421","messageId":"422","endLine":19,"endColumn":30},{"ruleId":"441","severity":1,"message":"442","line":20,"column":44,"nodeType":"443","messageId":"444","endLine":20,"endColumn":46},{"ruleId":"419","severity":1,"message":"420","line":21,"column":30,"nodeType":"421","messageId":"422","endLine":21,"endColumn":32},{"ruleId":"441","severity":1,"message":"442","line":22,"column":46,"nodeType":"443","messageId":"444","endLine":22,"endColumn":48},{"ruleId":"419","severity":1,"message":"420","line":23,"column":35,"nodeType":"421","messageId":"422","endLine":23,"endColumn":37},{"ruleId":"419","severity":1,"message":"420","line":51,"column":25,"nodeType":"421","messageId":"422","endLine":51,"endColumn":27},{"ruleId":"441","severity":1,"message":"442","line":52,"column":45,"nodeType":"443","messageId":"444","endLine":52,"endColumn":47},{"ruleId":"419","severity":1,"message":"420","line":53,"column":26,"nodeType":"421","messageId":"422","endLine":53,"endColumn":28},{"ruleId":"419","severity":1,"message":"420","line":55,"column":33,"nodeType":"421","messageId":"422","endLine":55,"endColumn":35},{"ruleId":"423","severity":1,"message":"471","line":76,"column":6,"nodeType":"425","endLine":76,"endColumn":26,"suggestions":"472"},{"ruleId":"413","severity":1,"message":"473","line":2,"column":10,"nodeType":"415","messageId":"416","endLine":2,"endColumn":14},{"ruleId":"413","severity":1,"message":"474","line":5,"column":22,"nodeType":"415","messageId":"416","endLine":5,"endColumn":30},{"ruleId":"413","severity":1,"message":"460","line":2,"column":8,"nodeType":"415","messageId":"416","endLine":2,"endColumn":17},{"ruleId":"413","severity":1,"message":"475","line":4,"column":30,"nodeType":"415","messageId":"416","endLine":4,"endColumn":35},{"ruleId":"413","severity":1,"message":"476","line":44,"column":17,"nodeType":"415","messageId":"416","endLine":44,"endColumn":25},{"ruleId":"419","severity":1,"message":"420","line":54,"column":64,"nodeType":"421","messageId":"422","endLine":54,"endColumn":66},{"ruleId":"419","severity":1,"message":"420","line":55,"column":21,"nodeType":"421","messageId":"422","endLine":55,"endColumn":23},{"ruleId":"419","severity":1,"message":"420","line":181,"column":21,"nodeType":"421","messageId":"422","endLine":181,"endColumn":23},{"ruleId":"419","severity":1,"message":"420","line":184,"column":21,"nodeType":"421","messageId":"422","endLine":184,"endColumn":23},{"ruleId":"419","severity":1,"message":"420","line":193,"column":21,"nodeType":"421","messageId":"422","endLine":193,"endColumn":23},{"ruleId":"419","severity":1,"message":"420","line":207,"column":21,"nodeType":"421","messageId":"422","endLine":207,"endColumn":23},{"ruleId":"419","severity":1,"message":"420","line":210,"column":21,"nodeType":"421","messageId":"422","endLine":210,"endColumn":23},{"ruleId":"419","severity":1,"message":"420","line":219,"column":21,"nodeType":"421","messageId":"422","endLine":219,"endColumn":23},{"ruleId":"419","severity":1,"message":"420","line":231,"column":19,"nodeType":"421","messageId":"422","endLine":231,"endColumn":21},{"ruleId":"419","severity":1,"message":"420","line":248,"column":23,"nodeType":"421","messageId":"422","endLine":248,"endColumn":25},{"ruleId":"419","severity":1,"message":"420","line":268,"column":23,"nodeType":"421","messageId":"422","endLine":268,"endColumn":25},{"ruleId":"419","severity":1,"message":"420","line":270,"column":28,"nodeType":"421","messageId":"422","endLine":270,"endColumn":30},{"ruleId":"419","severity":1,"message":"420","line":272,"column":33,"nodeType":"421","messageId":"422","endLine":272,"endColumn":35},{"ruleId":"419","severity":1,"message":"435","line":303,"column":30,"nodeType":"421","messageId":"422","endLine":303,"endColumn":32},{"ruleId":"419","severity":1,"message":"420","line":310,"column":31,"nodeType":"421","messageId":"422","endLine":310,"endColumn":33},{"ruleId":"419","severity":1,"message":"420","line":327,"column":31,"nodeType":"421","messageId":"422","endLine":327,"endColumn":33},{"ruleId":"441","severity":1,"message":"442","line":328,"column":47,"nodeType":"443","messageId":"444","endLine":328,"endColumn":49},{"ruleId":"419","severity":1,"message":"420","line":329,"column":36,"nodeType":"421","messageId":"422","endLine":329,"endColumn":38},{"ruleId":"441","severity":1,"message":"442","line":330,"column":52,"nodeType":"443","messageId":"444","endLine":330,"endColumn":54},{"ruleId":"419","severity":1,"message":"420","line":331,"column":41,"nodeType":"421","messageId":"422","endLine":331,"endColumn":43},{"ruleId":"419","severity":1,"message":"420","line":378,"column":19,"nodeType":"421","messageId":"422","endLine":378,"endColumn":21},{"ruleId":"419","severity":1,"message":"420","line":405,"column":17,"nodeType":"421","messageId":"422","endLine":405,"endColumn":19},{"ruleId":"419","severity":1,"message":"420","line":439,"column":27,"nodeType":"421","messageId":"422","endLine":439,"endColumn":29},{"ruleId":"419","severity":1,"message":"420","line":456,"column":27,"nodeType":"421","messageId":"422","endLine":456,"endColumn":29},{"ruleId":"419","severity":1,"message":"420","line":458,"column":32,"nodeType":"421","messageId":"422","endLine":458,"endColumn":34},{"ruleId":"419","severity":1,"message":"420","line":460,"column":37,"nodeType":"421","messageId":"422","endLine":460,"endColumn":39},{"ruleId":"419","severity":1,"message":"420","line":498,"column":25,"nodeType":"421","messageId":"422","endLine":498,"endColumn":27},{"ruleId":"419","severity":1,"message":"420","line":516,"column":27,"nodeType":"421","messageId":"422","endLine":516,"endColumn":29},{"ruleId":"419","severity":1,"message":"420","line":518,"column":32,"nodeType":"421","messageId":"422","endLine":518,"endColumn":34},{"ruleId":"419","severity":1,"message":"420","line":520,"column":37,"nodeType":"421","messageId":"422","endLine":520,"endColumn":39},{"ruleId":"419","severity":1,"message":"420","line":549,"column":23,"nodeType":"421","messageId":"422","endLine":549,"endColumn":25},{"ruleId":"419","severity":1,"message":"420","line":559,"column":25,"nodeType":"421","messageId":"422","endLine":559,"endColumn":27},{"ruleId":"419","severity":1,"message":"420","line":561,"column":30,"nodeType":"421","messageId":"422","endLine":561,"endColumn":32},{"ruleId":"419","severity":1,"message":"420","line":563,"column":35,"nodeType":"421","messageId":"422","endLine":563,"endColumn":37},{"ruleId":"423","severity":1,"message":"477","line":598,"column":6,"nodeType":"425","endLine":598,"endColumn":8,"suggestions":"478"},{"ruleId":"419","severity":1,"message":"420","line":897,"column":19,"nodeType":"421","messageId":"422","endLine":897,"endColumn":21},{"ruleId":"419","severity":1,"message":"420","line":899,"column":26,"nodeType":"421","messageId":"422","endLine":899,"endColumn":28},{"ruleId":"419","severity":1,"message":"420","line":963,"column":19,"nodeType":"421","messageId":"422","endLine":963,"endColumn":21},{"ruleId":"419","severity":1,"message":"420","line":965,"column":26,"nodeType":"421","messageId":"422","endLine":965,"endColumn":28},{"ruleId":"419","severity":1,"message":"420","line":970,"column":19,"nodeType":"421","messageId":"422","endLine":970,"endColumn":21},{"ruleId":"419","severity":1,"message":"420","line":972,"column":26,"nodeType":"421","messageId":"422","endLine":972,"endColumn":28},{"ruleId":"419","severity":1,"message":"420","line":981,"column":50,"nodeType":"421","messageId":"422","endLine":981,"endColumn":52},{"ruleId":"419","severity":1,"message":"420","line":985,"column":44,"nodeType":"421","messageId":"422","endLine":985,"endColumn":46},{"ruleId":"419","severity":1,"message":"420","line":989,"column":47,"nodeType":"421","messageId":"422","endLine":989,"endColumn":49},{"ruleId":"413","severity":1,"message":"479","line":1,"column":36,"nodeType":"415","messageId":"416","endLine":1,"endColumn":39},{"ruleId":"413","severity":1,"message":"480","line":7,"column":10,"nodeType":"415","messageId":"416","endLine":7,"endColumn":21},{"ruleId":"413","severity":1,"message":"481","line":9,"column":10,"nodeType":"415","messageId":"416","endLine":9,"endColumn":25},{"ruleId":"423","severity":1,"message":"482","line":41,"column":6,"nodeType":"425","endLine":41,"endColumn":14,"suggestions":"483"},{"ruleId":"484","severity":1,"message":"485","line":62,"column":13,"nodeType":"454","endLine":62,"endColumn":45},{"ruleId":"413","severity":1,"message":"460","line":20,"column":8,"nodeType":"415","messageId":"416","endLine":20,"endColumn":17},{"ruleId":"413","severity":1,"message":"486","line":23,"column":9,"nodeType":"415","messageId":"416","endLine":23,"endColumn":20},{"ruleId":"413","severity":1,"message":"414","line":1,"column":27,"nodeType":"415","messageId":"416","endLine":1,"endColumn":33},{"ruleId":"413","severity":1,"message":"417","line":1,"column":35,"nodeType":"415","messageId":"416","endLine":1,"endColumn":44},{"ruleId":"487","severity":1,"message":"488","line":1,"column":1,"nodeType":"489","endLine":30,"endColumn":2},"@typescript-eslint/no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'BtnEditorWrapper' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'builderState', 'objIndex', and 'setValue'. Either include them or remove the dependency array.","ArrayExpression",["490"],"React Hook React.useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","MemberExpression","no-native-reassign",["491"],"no-negated-in-lhs",["492"],"'toast' is defined but never used.","'isLoading' is assigned a value but never used.","Expected '!==' and instead saw '!='.","React Hook useEffect has missing dependencies: 'bot' and 'getFlowsData'. Either include them or remove the dependency array.",["493"],["491"],["492"],"'uuidv4' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'register'. Either include it or remove the dependency array.",["494"],"'AddTextButton' is defined but never used.","'headingRef' is assigned a value but never used.","'paragraphRef' is assigned a value but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement",["491"],["492"],"'onRequestClose' is assigned a value but never used.",["491"],["492"],"'AppLayout' is defined but never used.","React Hook useEffect has a missing dependency: 'botId'. Either include it or remove the dependency array.",["495"],"'darkerGrey' is defined but never used.","'media' is defined but never used.","'Toolbar' is defined but never used.","'AuthButton' is defined but never used.","'useState' is defined but never used.","'Circle' is defined but never used.","'onTouchEnd' is assigned a value but never used.","'errors' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'setValue'. Either include it or remove the dependency array.",["496"],"'grey' is defined but never used.","'FormLink' is defined but never used.","'Image' is defined but never used.","'setState' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'props.match.params.id' and 'setBuilderState'. Either include them or remove the dependency array.",["497"],"'Ref' is defined but never used.","'TiFlowMerge' is defined but never used.","'IoSettingsSharp' is defined but never used.","React Hook useEffect has a missing dependency: 'handleSidebarState'. Either include it or remove the dependency array. If 'handleSidebarState' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["498"],"jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","'authContext' is assigned a value but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration",{"desc":"499","fix":"500"},"no-global-assign","no-unsafe-negation",{"desc":"501","fix":"502"},{"desc":"503","fix":"504"},{"desc":"505","fix":"506"},{"desc":"507","fix":"508"},{"desc":"509","fix":"510"},{"desc":"511","fix":"512"},"Update the dependencies array to be: [builderState, objIndex, setValue]",{"range":"513","text":"514"},"Update the dependencies array to be: [pageNumber, lastPage, getFlowsData, bot]",{"range":"515","text":"516"},"Update the dependencies array to be: [register]",{"range":"517","text":"518"},"Update the dependencies array to be: [pageNumber, lastPage, botId]",{"range":"519","text":"520"},"Update the dependencies array to be: [editorContent.name, setValue]",{"range":"521","text":"522"},"Update the dependencies array to be: [props.match.params.id, setBuilderState]",{"range":"523","text":"524"},"Update the dependencies array to be: [handleSidebarState, isOpen]",{"range":"525","text":"526"},[3102,3131],"[builderState, objIndex, setValue]",[1398,1420],"[pageNumber, lastPage, getFlowsData, bot]",[3089,3091],"[register]",[4112,4134],"[pageNumber, lastPage, botId]",[2393,2413],"[editorContent.name, setValue]",[18229,18231],"[props.match.params.id, setBuilderState]",[1369,1377],"[handleSidebarState, isOpen]"]