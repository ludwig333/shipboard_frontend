[{"/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/main/Flows/builder.tsx":"1","/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/main/Flows/helper.tsx":"2","/home/rabinson/Freelancing/ShipboardBot/frontend/src/styles/theme.ts":"3","/home/rabinson/Freelancing/ShipboardBot/frontend/src/utils/storage.ts":"4","/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/auth/RegisterPage.tsx":"5","/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/main/Templates/index.tsx":"6","/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/main/Bots/index.tsx":"7","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/common/buttons.ts":"8","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/common/form.ts":"9","/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/main/Dashboard/styles.ts":"10","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/common/Dropdown/styles.ts":"11","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/layout/AppLayout.tsx":"12","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Bots/CreateModal.tsx":"13","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/common/Pagination/index.tsx":"14","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Flows/CreateModal.tsx":"15","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Bots/Configure/Slack.tsx":"16","/home/rabinson/Freelancing/ShipboardBot/frontend/src/apis/buttons.ts":"17","/home/rabinson/Freelancing/ShipboardBot/frontend/src/services/Builder/BuilderProvider.tsx":"18","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/front/header/styles.ts":"19","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/front/feature/index.tsx":"20","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/common/Pagination/styles.ts":"21","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Bots/Configure/styles.ts":"22","/home/rabinson/Freelancing/ShipboardBot/frontend/src/apis/images.ts":"23","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/front/footer/styles.ts":"24","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/front/info/styles.ts":"25","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Text/index.tsx":"26","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Card/index.tsx":"27","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Sidebar/styles.ts":"28","/home/rabinson/Freelancing/ShipboardBot/frontend/src/index.tsx":"29","/home/rabinson/Freelancing/ShipboardBot/frontend/src/styles/mediaQueries.ts":"30","/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/LandingPage.tsx":"31","/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/auth/LoginPage.tsx":"32","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/common/typography.ts":"33","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/common/table.ts":"34","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/layout/AuthLayout.tsx":"35","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Bots/DeleteModal.tsx":"36","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Flows/DeleteModal.tsx":"37","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Bots/Configure/Messenger.tsx":"38","/home/rabinson/Freelancing/ShipboardBot/frontend/src/constants/urls.ts":"39","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/front/footer/index.tsx":"40","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Toolbar/index.tsx":"41","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Toolbar/styles.ts":"42","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/front/navbar/styles.ts":"43","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Image/styles.ts":"44","/home/rabinson/Freelancing/ShipboardBot/frontend/src/services/Auth/AuthProvider.tsx":"45","/home/rabinson/Freelancing/ShipboardBot/frontend/src/services/Modal/ModalProvider.tsx":"46","/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/main/Dashboard/index.tsx":"47","/home/rabinson/Freelancing/ShipboardBot/frontend/src/apis/auth.ts":"48","/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/main/Flows/styles.ts":"49","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Bots/Configure/Telegram.tsx":"50","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/front/info/index.tsx":"51","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/front/feature/styles.ts":"52","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Sidebar/index.tsx":"53","/home/rabinson/Freelancing/ShipboardBot/frontend/src/apis/texts.ts":"54","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Card/styles.ts":"55","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Image/index.tsx":"56"},{"size":37270,"mtime":1614347962126,"results":"57","hashOfConfig":"58"},{"size":5890,"mtime":1614348443887,"results":"59","hashOfConfig":"58"},{"size":300,"mtime":1606619841444,"results":"60","hashOfConfig":"58"},{"size":330,"mtime":1606965896953,"results":"61","hashOfConfig":"58"},{"size":4807,"mtime":1614739732466,"results":"62","hashOfConfig":"58"},{"size":1438,"mtime":1613583534699,"results":"63","hashOfConfig":"58"},{"size":6157,"mtime":1613787697010,"results":"64","hashOfConfig":"58"},{"size":2712,"mtime":1613616271759,"results":"65","hashOfConfig":"58"},{"size":1603,"mtime":1612803710437,"results":"66","hashOfConfig":"58"},{"size":563,"mtime":1613529985539,"results":"67","hashOfConfig":"58"},{"size":603,"mtime":1611407912500,"results":"68","hashOfConfig":"58"},{"size":1229,"mtime":1612693589486,"results":"69","hashOfConfig":"58"},{"size":2305,"mtime":1611506040626,"results":"70","hashOfConfig":"58"},{"size":1583,"mtime":1611403993930,"results":"71","hashOfConfig":"58"},{"size":2347,"mtime":1611495697651,"results":"72","hashOfConfig":"58"},{"size":4641,"mtime":1613014354353,"results":"73","hashOfConfig":"58"},{"size":1105,"mtime":1612716373558,"results":"74","hashOfConfig":"58"},{"size":1239,"mtime":1611592415760,"results":"75","hashOfConfig":"58"},{"size":2194,"mtime":1607358477789,"results":"76","hashOfConfig":"58"},{"size":2473,"mtime":1613751734453,"results":"77","hashOfConfig":"58"},{"size":739,"mtime":1612585684875,"results":"78","hashOfConfig":"58"},{"size":587,"mtime":1612689058653,"results":"79","hashOfConfig":"58"},{"size":765,"mtime":1611888511608,"results":"80","hashOfConfig":"58"},{"size":880,"mtime":1613788176867,"results":"81","hashOfConfig":"58"},{"size":1251,"mtime":1607358308147,"results":"82","hashOfConfig":"58"},{"size":4730,"mtime":1613586450030,"results":"83","hashOfConfig":"58"},{"size":13422,"mtime":1613586467397,"results":"84","hashOfConfig":"58"},{"size":2446,"mtime":1612319962325,"results":"85","hashOfConfig":"58"},{"size":515,"mtime":1607764359769,"results":"86","hashOfConfig":"58"},{"size":437,"mtime":1607357171179,"results":"87","hashOfConfig":"58"},{"size":395,"mtime":1606572185322,"results":"88","hashOfConfig":"58"},{"size":3129,"mtime":1614739527655,"results":"89","hashOfConfig":"58"},{"size":1320,"mtime":1609667047505,"results":"90","hashOfConfig":"58"},{"size":1454,"mtime":1611403637931,"results":"91","hashOfConfig":"58"},{"size":3062,"mtime":1607357777066,"results":"92","hashOfConfig":"58"},{"size":1475,"mtime":1611506512498,"results":"93","hashOfConfig":"58"},{"size":1488,"mtime":1611506630557,"results":"94","hashOfConfig":"58"},{"size":6298,"mtime":1613447393203,"results":"95","hashOfConfig":"58"},{"size":809,"mtime":1613489585734,"results":"96","hashOfConfig":"58"},{"size":796,"mtime":1613751760006,"results":"97","hashOfConfig":"58"},{"size":9692,"mtime":1613585463275,"results":"98","hashOfConfig":"58"},{"size":5490,"mtime":1613586889904,"results":"99","hashOfConfig":"58"},{"size":596,"mtime":1607358244451,"results":"100","hashOfConfig":"58"},{"size":1691,"mtime":1612625185277,"results":"101","hashOfConfig":"58"},{"size":1542,"mtime":1613615679549,"results":"102","hashOfConfig":"58"},{"size":3582,"mtime":1612584637978,"results":"103","hashOfConfig":"58"},{"size":2889,"mtime":1613530048239,"results":"104","hashOfConfig":"58"},{"size":1340,"mtime":1613783824619,"results":"105","hashOfConfig":"58"},{"size":1370,"mtime":1613271148413,"results":"106","hashOfConfig":"58"},{"size":4972,"mtime":1612887697390,"results":"107","hashOfConfig":"58"},{"size":1019,"mtime":1613751637291,"results":"108","hashOfConfig":"58"},{"size":707,"mtime":1606842094420,"results":"109","hashOfConfig":"58"},{"size":3415,"mtime":1613489018236,"results":"110","hashOfConfig":"58"},{"size":670,"mtime":1611717938172,"results":"111","hashOfConfig":"58"},{"size":2855,"mtime":1613222328617,"results":"112","hashOfConfig":"58"},{"size":3108,"mtime":1612614260275,"results":"113","hashOfConfig":"58"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":83,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"117"},"v8ty68",{"filePath":"118","messages":"119","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"117"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"117"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"117"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"139"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"139"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"139"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"139"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"139"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":37,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"139"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"191","messages":"192","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"139"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"208","messages":"209","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"218","messages":"219","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"220","messages":"221","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"230","messages":"231","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"232","messages":"233","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"238","messages":"239","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/main/Flows/builder.tsx",["240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268","269","270","271","272","273","274","275","276","277","278","279","280","281","282","283","284","285","286","287","288","289","290","291","292","293","294","295","296","297","298","299","300","301","302","303","304","305","306","307","308","309","310","311","312","313","314","315","316","317","318","319","320","321","322"],"import React, { useState } from 'react';\nimport {withRouter} from 'react-router-dom'\nimport { FlowBuilderWrapper } from './styles';\nimport { Stage, Layer, Rect, Image, Text, Group, Circle } from 'react-konva';\nimport Toolbar from '../../../components/dashboard/builder/Toolbar/index';\nimport PuffLoader from \"react-spinners/PuffLoader\";\n\nimport {\n  getImage,\n  calculateHeightOfMessageBox,\n  handleWheel,\n  onTouchPinch,\n  Edge,\n  URLImage,\n  getActiveCard\n} from './helper';\nimport {\n  useBuilder,\n} from '../../../services/Builder/BuilderProvider';\nimport { BiMessageSquareAdd } from 'react-icons/bi';\nimport { saveMessage, getMessages, updateMessage, deleteMessage, createAndConnectMessage } from '../../../apis/messages';\nimport { toast } from 'react-toastify';\nimport { getFlow, publishFlow } from '../../../apis/flows';\nimport { createAndConnectWithButton, updateButton } from '../../../apis/buttons';\nimport Konva from 'konva';\nimport { PrimaryButton } from '../../../components/common/buttons';\n\nconst FlowBuilder = (props) => {\n  const [isToolbarActive, setIsToolbarActive] = useState(null);\n  const [builderState, setBuilderState, sidebar] = useBuilder();\n  const [flow, setFlow] = useState(null);\n  const [id, setId] = useState(null);\n  const [mousePosition, setMousePosition] = useState({\n    x: 0,\n    y: 0,\n  });\n  const [isEdging, setIsSetting] = useState(false);\n  const [showToolOption, setShowToolOption] = useState(false);\n  const [edgingMessageId, setEdgingMessageId] = useState(null);\n  const [edgingButtonId, setEdgingButtonId] = useState(null);\n  const [edgingButtonMessageId, setEdgingButtonMessageId] = useState(null);\n  const [edgingButtonChildId, setEdgingButtonChildId] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isPublishing, setIsPublishing] = useState(false);\n  const [isCreating, setIsCreating] = useState(false);\n\n  const [state, setState] = useState({\n    layerScale: 1,\n    layerX: 0,\n    layerY: 0,\n  });\n\n  const TrashIcon = \"data:image/svg+xml;base64,\" + window.btoa('<svg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" viewBox=\"0 0 24 24\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"none\" d=\"M17.004 20L17.003 8h-1-8-1v12H17.004zM13.003 10h2v8h-2V10zM9.003 10h2v8h-2V10zM9.003 4H15.003V6H9.003z\"></path><path d=\"M5.003,20c0,1.103,0.897,2,2,2h10c1.103,0,2-0.897,2-2V8h2V6h-3h-1V4c0-1.103-0.897-2-2-2h-6c-1.103,0-2,0.897-2,2v2h-1h-3 v2h2V20z M9.003,4h6v2h-6V4z M8.003,8h8h1l0.001,12H7.003V8H8.003z\"></path><path d=\"M9.003 10H11.003V18H9.003zM13.003 10H15.003V18H13.003z\"></path></svg>');\n\n  const getNextNode = (id) => {\n    if (id) {\n      const nextIndex = builderState.findIndex((obj) => obj.id == id);\n      if (nextIndex == -1) {\n        return mousePosition;\n      }\n      return builderState[nextIndex].position;\n    }\n  };\n\n  const hideToolbar = () => {\n    setIsToolbarActive(false);\n    setId(0);\n  };\n\n  const showToolbar = (id) => {\n    setId(id);\n    setIsToolbarActive(true);\n  };\n\n \nconst handleRenderingChildrens = (message) => {\n  var lastPosition = 70;\n  return message.children.map(function (child) {\n    var yposition = lastPosition;\n    if (child.type === 'card') {\n      var activeCard = getActiveCard(child.cards);\n      // lastPosition = lastPosition + child.cards[0].height;\n      const buttons = child.cards[activeCard].buttons.length;\n      lastPosition = lastPosition + child.cards[activeCard].height + (buttons * 40) + 40;\n    } else if (child.type === 'text') {\n      const buttons = child.buttons.length;\n      lastPosition = lastPosition + child.height + (buttons * 40) + 40;\n    } else if (child.type === 'image') {\n      lastPosition = lastPosition + child.height + 20;\n    }\n    return getChildren(message, child, yposition);\n  });\n};\n  \n  const getChildren = (message, child, lastPosition) => {\n    // var messageHeight = calculateHeightOfMessageBox(message.children);\n  if (child.type === 'text') {\n    var textButtons = child.buttons;\n    var boxHeight = (child.height * 1.05) + (textButtons.length * 40) + 10;\n    return (\n      <Group x={20} y={lastPosition}>\n        <Rect\n          fill=\"#F0F4F7\"\n          cornerRadius={5}\n          height={boxHeight}\n          width={300}\n          stroke=\"lightGrey\"\n          strokeWidth={1}\n          shadowColor=\"#95bbdf\"\n          shadowOpacity={0.5}\n          shadowBlur={7}\n        />\n        <Text\n          x={15}\n          y={7}\n          text={child.value}\n          fontSize={15}\n          lineHeight={1.2}\n          width={280}\n        />\n        {child.buttons.map((button, index) => {\n          var y = (child.height * 1.05) + (40 * index) + 10;\n          var node2 = getNextNode(button.next);\n          return (\n            <Group key={button.id}>\n              { button.next &&\n                <Edge\n                  state={state}\n                  height={boxHeight}\n                  node1={{ x: -60, y: - boxHeight + 30 + (y) }}\n                  node2={{ x: node2.x - message.position.x - 20, y: node2.y - message.position.y - lastPosition }}\n                  width={20}\n                />\n              }\n              <Rect\n                x={25}\n                y={y}\n                fill=\"#FFFFFF\"\n                cornerRadius={5}\n                height={30}\n                width={250}\n                shadowOpacity={0.5}\n                shadowBlur={7}\n                align={\"center\"}\n              />\n              <Text\n                x={10}\n                y={y + 3}\n                text={button.name}\n                fontSize={15}\n                width={280}\n                lineHeight={1.5}\n                align={\"center\"}\n              />\n              {!button.url && <Circle x={260} y={y + 14} radius={9} fill=\"#8392AB\" strokeWidth={1}\n                onMouseOver={() => { document.body.style.cursor = 'pointer' }}\n                onMouseOut={() => { document.body.style.cursor = 'default' }}\n                onClick={(e) => {\n                  e.cancelBubble = true;\n                  connectButtonEdge(message.id, child.id, button.id, 'text')\n                }}\n              />}\n            </Group> \n          );\n         })}\n      </Group>\n    );\n  } else if (child.type === 'image') {\n    return getImage(child, lastPosition);\n  } else if (child.type === 'card') {\n    return (\n      <Group x={20} y={lastPosition}>\n        {handleRenderingCards(message, child, lastPosition)}\n      </Group>\n    );\n  }\n  };\n  \n   const handleRenderingCards = (message, children, lastPosition) => {\n     var activeCard = getActiveCard(children.cards);\n     var cardButtons = children.cards[activeCard].buttons;\n    var boxHeight = (children.cards[activeCard].height) + (cardButtons.length * 40) + 20;\n\n    return (\n      <React.Fragment>\n        <Rect\n          x={0}\n          y={0}\n          cornerRadius={5}\n          fill=\"#F2F5F7\"\n          height={boxHeight}\n          width={300}\n          stroke=\"lightGrey\"\n          strokeWidth={1}\n          shadowColor=\"#95bbdf\"\n          shadowOpacity={0.5}\n          shadowBlur={7}\n        />\n        {getCardImage(children.cards[activeCard])}\n        <Text\n          x={10}\n          width={260}\n          y={185}\n          text={children.cards[activeCard].heading}\n          fontFamily={'Roboto'}\n          fontSize={16}\n          fontStyle={'bold'}\n          fill={'black'}\n        />\n        <Text\n          x={10}\n          y={210}\n          width={280}\n          text={children.cards[activeCard].body}\n          fontFamily={'Roboto'}\n          fontSize={15}\n          fill={'black'}\n          lineHeight={1.2}\n        />\n        {children.cards[activeCard].buttons.map((button, index) => {\n            var y = (children.cards[activeCard].height) + (40 * index) + 20;\n          var node2 = getNextNode(button.next);\n            return (\n              <Group key={button.id}>\n                { button.next &&\n                  <Edge\n                      state={state}\n                      height={boxHeight}\n                      node1={{ x: -60, y: - boxHeight + 30 + (y)}}\n                      node2={{ x: node2.x - message.position.x -20, y: node2.y - message.position.y - lastPosition}}\n                      width={20}\n                    />\n                }\n                <Rect\n                  x={25}\n                  y={y}\n                  fill=\"#FFFFFF\"\n                  cornerRadius={5}\n                  height={30}\n                  width={250}\n                  shadowOpacity={0.5}\n                  shadowBlur={7}\n                  align={\"center\"}\n                />\n                <Text\n                  x={10}\n                  y={y + 3}\n                  text={button.name}\n                  fontSize={15}\n                  width={280}\n                  lineHeight={1.5}\n                  align={\"center\"}\n                />\n                {!button.url && <Circle x={260} y={y + 14} radius={9} fill=\"#8392AB\" strokeWidth={1}\n                  onMouseOver={() => { document.body.style.cursor = 'pointer' }}\n                  onMouseOut={() => { document.body.style.cursor = 'default' }}\n                  onClick={(e) => {\n                    e.cancelBubble = true;\n                    connectButtonEdge(message.id, children.id, button.id, 'card')\n                  }}\n               />}\n              </Group>\n            );\n           })}\n      </React.Fragment>\n    );\n  };\n  const getCardImage = (children) => {\n    if (children.imagePreviewUrl) {\n      return (\n        <URLImage\n          x={0}\n          y={0}\n          image={children.imagePreviewUrl}\n          height={160}\n          width={300}\n        />\n      );\n    } else {\n      return (\n        <Group>\n          <Rect\n            x={20}\n            y={20}\n            fill=\"#E1E5EA\"\n            stroke=\"#8392AB\"\n            cornerRadius={5}\n            height={150}\n            width={260}\n            dash={[10, 5]}\n            strokeWidth={1}\n            shadowColor=\"#95bbdf\"\n            shadowOpacity={0.5}\n            shadowBlur={7}\n          />\n          <Text x={100} y={85} text={'Upload Image'} fontSize={16} />\n        </Group>\n      );\n    }\n  };\n\n  const getStageWidth = () => {\n    return sidebar ? window.innerWidth - 280 : window.innerWidth - 90;\n  };\n\n  const setSelectedTrue = (messageId) => {\n    var previousSelected = getSelectedNode(builderState);\n    if (previousSelected >= 0) {\n      setBuilderState(\n        builderState.map((item, index) => {\n          if (index == messageId) {\n            item.isSelected = true;\n          }\n          if (index == previousSelected) {\n            item.isSelected = false;\n          }\n          return item;\n        })\n      );\n    } else {\n      setBuilderState(\n        builderState.map((item, index) => {\n          if (index == messageId) {\n            item.isSelected = true;\n          }\n          return item;\n        })\n      );\n    }\n  };\n\n  const setHoverTrue = (messageId) => {\n    var previousHover = getHoveredNode(builderState);\n    if (previousHover >= 0) {\n      setBuilderState(\n        builderState.map((item, index) => {\n          if (index == messageId) {\n            item.isHover = true;\n          }\n          if (index == previousHover) {\n            item.isHover = false;\n          }\n          return item;\n        })\n      );\n    } else {\n      setBuilderState(\n        builderState.map((item, index) => {\n          if (index == messageId) {\n            item.isHover = true;\n          }\n          return item;\n        })\n      );\n    }\n  };\n\n  const setHoverFalse = (messageId) => {\n    setBuilderState(\n      builderState.map((item, index) => {\n        if (index == messageId) {\n          item.isHover = false;\n        }\n        return item;\n      })\n    );\n  };\n\n  const connectEdge = (messageId) => {\n    setEdgingButtonId(null);\n    setEdgingMessageId(null);\n\n    if (!showToolOption) {\n      setIsSetting(true);\n      setEdgingMessageId(messageId);\n      setBuilderState(\n        builderState.map((item) => {\n          if (item.id == messageId) {\n            item.next = 'dummy';\n          }\n          return item;\n        })\n      );\n    }\n  };\n\n  const connectButtonEdge = (messageId, childId, buttonId, type) => {\n    setEdgingButtonId(null);\n    setEdgingMessageId(null);\n    if (!showToolOption) {\n      setIsSetting(true);\n      setEdgingButtonId(buttonId);\n      setEdgingButtonMessageId(messageId);\n      setEdgingButtonChildId(childId);\n\n      setBuilderState(\n        builderState.map((item) => {\n          if (item.id == messageId) {\n            if (type == 'text') {\n              item.children.map((child) => {\n                if (child.id == childId) {\n                  child.buttons.map((button) => {\n                    if (button.id == buttonId) {\n                      button.next = \"dummy\"\n                    }\n                    return button;\n                  })\n                }\n              })\n            } else if (type == 'card') {\n              item.children.map((child) => {\n                if (child.id == childId) {\n                  var activeCardIndex = getActiveCard(child.cards);\n                  child.cards.map((card, inx) => {\n                    if (inx == activeCardIndex) {\n                      card.buttons.map((button) => {\n                        if (button.id == buttonId) {\n                          button.next = \"dummy\";\n                         }\n                       })\n                     }\n                  })\n                }\n              })\n            }\n          }\n          return item;\n        })\n      );\n    }\n  }\n\n  const handleMousePosition = (event) => {\n    if (!showToolOption && !isCreating) {\n      var point = event.target.getStage().getPointerPosition();\n      setMousePosition({\n        x: point.x,\n        y: point.y,\n      });\n    }\n  };\n\n  const handleClickOnCanvas = () => {\n    if (isEdging) {\n      var hoveredIndex = getHoveredNode(builderState);\n      if (hoveredIndex > 0) {\n        //If the edging is hovered over another message and connect that message\n        var messageIdOfHover = builderState[hoveredIndex].id\n        if (messageIdOfHover != edgingMessageId) {\n          if (edgingMessageId) {\n            updateMessage({\n              next: messageIdOfHover\n            }, edgingMessageId).then((response) => { \n              setBuilderState(\n                builderState.map((item, index) => {\n                  if (item.id == edgingMessageId) {\n                    item.next = messageIdOfHover\n                  }\n                  return item;\n                })\n              );\n            }).catch((err) => {\n              toast.error(\"Something went wrong\");\n            }).finally(() => {\n              setEdgingMessageId(null);\n            })\n           } else if (edgingButtonId) {\n            updateButton({\n              next: messageIdOfHover\n            }, edgingButtonId).then((response) => {\n              setBuilderState(\n                builderState.map((item, index) => {\n                  if (item.id == edgingButtonMessageId) {\n                    item.children.map((child) => {\n                      if (child.id == edgingButtonChildId) {\n                        child.buttons.map((button) => {\n                          if (button.id == edgingButtonId) {\n                            button.next = messageIdOfHover\n                          }\n                        })\n                      }\n                    })\n                  }  \n                  return item;\n                })\n              );\n            }).catch((err) => {\n              toast.error(\"Something went wrong\")\n            }).finally(() => {\n              setEdgingButtonId(null);\n            })\n          }\n        } \n      } else {\n        setShowToolOption(true);\n      }\n    }\n  };\n\n  const handleAddMessage = () => {\n    let number = builderState.length + 1;\n    saveMessage({\n      name: 'Send Message #' + number,\n      type: 'default',\n      position_x: 1200,\n      position_y: 60,\n      flow: props.match.params.id\n    }).then((response) => {\n       setBuilderState([...builderState, response.data]);\n\n    }).catch((err) => {\n      toast.error(\"Something went wrong\")\n    })\n  }\n\n  const handleDeleteMessage = (item, index) => {\n    setIsToolbarActive(false);\n    if (index > 0) {\n      \n      //Delete the message\n    builderState.splice(index, 1);\n    //Delete the edging where this message belongs to\n      // const messageIndexHavingNextOfDeleteMessage = getMessageIndexWhichHasNextOfGivenMessageId(builderState, item.id);\n      //Remove the edging to the button when message deleted.\n    setBuilderState(\n      builderState.map((message) => {\n        if (message.next == item.id) {\n          message.next = null\n        }\n        message.children.map((child) => {\n          if (child.type == 'text') {\n            child.buttons.map((button) => {\n              if (button.next == item.id) {\n                button.next = null\n              }\n            })\n          } else if (child.type == 'card') {\n            child.cards.map((card) => {\n              card.buttons.map((button) => {\n                if (button.next == item.id) {\n                  button.next = null;\n                }\n              })\n            })\n          }\n        })\n        return message;\n      })\n    );\n      \n    deleteMessage(item.id).then(() => {\n      setShowToolOption(false);\n      setEdgingMessageId(null);\n      setEdgingButtonId(null);\n      setIsSetting(false);\n    }).catch((err) => {\n        toast.error(\"Something went wrong\");\n      })\n    } else {\n      toast.info(\"You cannot delete the start message\")\n    }\n  }\n\n  const handleDragMessage = (e, item, index) =>  {\n    var updatedPosition = {\n      x: e.target.x(),\n      y: e.target.y(),\n    };\n\n    setBuilderState(\n      builderState.map((item, ind) => {\n        if (ind == index) {\n          item.position = updatedPosition;\n        }\n        return item;\n      })\n    );\n  }\n\n  const updateMessagePosition = (item) => {\n    updateMessage({\n      position_x: item.position.x,\n      position_y: item.position.y\n    }, item.id).catch((err) => {\n      toast.error('Something went wrong')\n    })    \n  }\n\n  const handleToolOptionNewMessageAction = () => {\n    setIsSetting(false);\n    setShowToolOption(false);\n    let number = builderState.length + 1;\n    var newMessage = {\n      name: 'Send Message #' + number,\n      type: 'default',\n      position_x: mousePosition.x,\n      position_y: mousePosition.y,\n      flow: props.match.params.id\n    }\n\n    if (edgingMessageId) {\n      setIsCreating(true);\n      createAndConnectMessage(newMessage, edgingMessageId)\n        .then((response) => {\n          setBuilderState(\n            builderState.map((item) => {\n              if (item.id == edgingMessageId) {\n                item.next = response.data.id;\n              }\n              return item;\n            })\n          );\n          setBuilderState([...builderState, response.data]);\n        }).catch((err) => {\n          toast.error(\"Something went wrong\")\n        }).finally(() => {\n          setIsCreating(false);\n          setEdgingMessageId(null);\n        })\n    } else if (edgingButtonId) {\n      setIsCreating(true);\n      createAndConnectWithButton(newMessage, edgingButtonId)\n        .then((response) => {\n          setBuilderState(\n            builderState.map((item) => {\n              if (item.id == edgingButtonMessageId) {\n                item.children.map((child) => {\n                  if (child.id == edgingButtonChildId) {\n                    if(child.type == 'text') {\n                      child.buttons.map((button) => {\n                        if (button.id == edgingButtonId) {\n                          button.next = response.data.id\n                        }\n                        return button;\n                      })\n                    } else if (child.type == 'card') {\n                      var activeCardIndex = getActiveCard(child.cards);\n                      child.cards.map((card, inx) => {\n                        if (inx == activeCardIndex) {\n                          card.buttons.map((button) => {\n                            if (button.id == edgingButtonId) {\n                                button.next = response.data.id\n                              }\n                            })\n                          }\n                      })\n                    }\n                  }\n                  return child;\n                })\n              }\n              return item;\n            })\n          );\n          setBuilderState([...builderState, response.data]);\n        }).catch((err) => {\n          toast.error(\"Something went wrong\")\n        }).finally(() => {\n          setIsCreating(false);\n          setEdgingButtonId(null);\n          setEdgingButtonMessageId(null);\n          setEdgingButtonChildId(null);\n        })\n    }\n  }\n\n  const handleToolOptionConnectFlow = () => {\n    setIsSetting(false);\n    setShowToolOption(false);\n    let number = builderState.length + 1;\n    var newFlow = {\n      name: 'Connect Flow #' + number,\n      type: 'flow',\n      position_x: mousePosition.x,\n      position_y: mousePosition.y,\n      flow: props.match.params.id\n    }\n    if (edgingMessageId) {\n      setIsCreating(true);\n      createAndConnectMessage(newFlow, edgingMessageId).then((response) => {\n        setBuilderState(\n          builderState.map((item) => {\n            if (item.id == edgingMessageId) {\n              item.next = response.data.id;\n            }\n            return item;\n          })\n        );\n        setBuilderState([...builderState, response.data]);\n       \n      }).catch((err) => {\n        toast.error(\"Something went wrong\")\n      }).finally(() => {\n        setIsCreating(false);\n        setEdgingMessageId(null);\n      });\n    } else if (edgingButtonId) {\n      setIsCreating(true);\n      createAndConnectWithButton(newFlow, edgingButtonId)\n        .then((response) => {\n          setBuilderState(\n            builderState.map((item) => {\n              if (item.id == edgingButtonMessageId) {\n                item.children.map((child) => {\n                  if (child.id == edgingButtonChildId) {\n                    if(child.type == 'text') {\n                      child.buttons.map((button) => {\n                        if (button.id == edgingButtonId) {\n                          button.next = response.data.id\n                        }\n                        return button;\n                      })\n                    } else if (child.type == 'card') {\n                      var activeCardIndex = getActiveCard(child.cards);\n                      child.cards.map((card, inx) => {\n                        if (inx == activeCardIndex) {\n                          card.buttons.map((button) => {\n                            if (button.id == edgingButtonId) {\n                                button.next = response.data.id\n                              }\n                            })\n                          }\n                      })\n                    }\n                  }\n                  return child;\n                })\n              }\n              return item;\n            })\n          );\n          setBuilderState([...builderState, response.data]);\n        }).catch((err) => {\n          toast.error(\"Something went wrong\")\n        }).finally(() => {\n          setIsCreating(false);\n          setEdgingButtonId(null);\n          setEdgingButtonMessageId(null);\n          setEdgingButtonChildId(null);\n        })\n    }\n  }\n\n  const handleToolOptionCancel = () => {\n    setShowToolOption(false);\n    if (isEdging) setIsSetting(false);\n    if (edgingMessageId) {\n      setBuilderState(\n        builderState.map((item) => {\n          if (item.id == edgingMessageId) {\n            item.next = \"\"\n          }\n          return item;\n        })\n      );\n      if (edgingMessageId) setEdgingMessageId(null);\n    } else if (edgingButtonId) {\n        setBuilderState(\n          builderState.map((item) => {\n            if (item.id == edgingButtonMessageId) {\n              item.children.map((child) => {\n                if (child.type == 'text') {\n                  if (child.id == edgingButtonChildId) {\n                    child.buttons.map((button) => {\n                      if (button.id == edgingButtonId) {\n                        button.next = null\n                      }\n                      return button;\n                    })\n                  }\n                } else if (child.type == 'card') {\n                  var activeCardIndex = getActiveCard(child.cards);\n                  child.cards.map((card, index) => {\n                    if (index == activeCardIndex) {\n                      card.buttons.map((button) => {\n                        if (button.id == edgingButtonId) {\n                          button.next = null\n                        }\n                      });\n                    }\n                  })\n                }\n                return child;\n              })\n            }\n            return item;\n          })\n        );\n        if(edgingButtonId) setEdgingButtonId(null);\n        if(edgingButtonChildId) setEdgingButtonChildId(null);\n        if(edgingButtonMessageId) setEdgingButtonMessageId(null);\n      }          \n    }\n\n  const handlePublishFlow = () => {\n    setIsPublishing(true);\n    publishFlow(flow.id)\n      .then(() => toast.success(\"Flow published successfully\"))\n      .catch((err) => toast.error(\"Something went wrong.\"))\n      .finally(() => {\n        setIsPublishing(false);\n      })\n  }\n  React.useEffect(() => {\n    setIsLoading(true);\n    getMessages(props.match.params.id)\n      .then((response) => {\n        setBuilderState(response.data)\n      })\n      .catch((err) => {\n        toast.error(\"Something went wrong\")\n      }).finally(() => {\n        setIsLoading(false);\n      })\n    getFlow(props.match.params.id)\n      .then((response) => {  \n        setFlow(response.data);\n    }).catch((err) => {\n      toast.error(\"Something went wrong\")   \n    })\n    Konva.hitOnDragEnabled = true;\n  }, []);\n\n  const getToolOption = () => {\n    return (\n      <Group  x={mousePosition.x} y={mousePosition.y} zIndex={200}\n        onMouseOver={() => { document.body.style.cursor = 'pointer' }}\n        onMouseOut={() => { document.body.style.cursor = 'default' }}\n      >\n        <Group onClick={handleToolOptionNewMessageAction}>\n          <Rect\n            width={200}\n            height={50}\n            fill=\"#FDFDFD\"\n            strokeWidth={2}\n            shadowColor=\"gray\"\n            shadowOpacity={0.7}\n            shadowBlur={2}\n            onMouseDown={(e) => {\n              e.target.setAttr('fill', ' #eef1f4');\n            }}\n          />\n          <Text\n            x={15}\n            y={15}\n            text=\"+ New Message\"\n            fontFamily={'Roboto'}\n            fontSize={20}\n            fill={'#5850eb'}\n          />\n        </Group>\n        <Group y={50} onClick={handleToolOptionConnectFlow}>\n          <Rect\n            width={200}\n            height={50}\n            fill=\"#FDFDFD\"\n            strokeWidth={2}\n            shadowColor=\"gray\"\n            shadowOpacity={0.7}\n            shadowBlur={2}\n            onMouseDown={(e) => {\n              e.target.setAttr('fill', ' #eef1f4');\n            }}\n          />\n          <Text\n            x={15}\n            y={15}\n            text=\"+ Connect Flow\"\n            fontFamily={'Roboto'}\n            fontSize={20}\n            fill={'#5850eb'}\n          />\n        </Group>\n        <Group y={100}  onClick={handleToolOptionCancel}>\n          <Rect\n            width={200}\n            height={50}\n            fill=\"#FDFDFD\"\n            strokeWidth={2}\n            shadowColor=\"gray\"\n            shadowOpacity={0.7}\n            shadowBlur={2}\n            onMouseDown={(e) => {\n              e.target.setAttr('fill', ' #eef1f4');\n            }}\n          />\n          <Text\n            x={15}\n            y={15}\n            text=\"- Cancel\"\n            fontFamily={'Roboto'}\n            fontSize={20}\n            fill={'#5850eb'}\n          />\n        </Group>\n      </Group>\n    );\n  }\n  const getDefaultMessage = (item, index, messageHeight) => {\n    return (\n      <Group\n        x={item.position?.x}\n        y={item.position?.y}\n        draggable\n        onClick={(e) => {\n          showToolbar(item.id);\n          setSelectedTrue(index);\n        }}\n        onMouseEnter={(e) => {\n          setHoverTrue(index);\n        }}\n        onMouseLeave={(e) => {\n          setHoverFalse(index);\n        }}\n        hitOnDragEnabled={true}\n        onDragMove={(e) => {\n          handleDragMessage(e, item, index)\n        }}\n        onDragEnd={() => { updateMessagePosition(item) }}\n      >\n        {index === 0 &&\n          <Group x={10} y={-40}>\n            <Rect cornerRadius={7} stroke={\"green\"} strokeWidth={2} fill=\"#FDFDFD\" width={60} height={30} />\n            <Text\n              x={13}\n              y={8}\n              text={\"Start\"}\n              fontFamily={'Roboto'}\n              fontSize={15}\n              fill={'green'}\n            />\n          </Group>\n        }\n        <Rect\n          cornerRadius={16}\n          height={messageHeight}\n          width={340}\n          fill=\"#FDFDFD\"\n          strokeWidth={1}\n          stroke={ \"#5850EB\"}\n          shadowColor={getShadowColor(item)}\n          shadowOpacity={1}\n          shadowBlur={7}\n        />\n        {item.isHover &&\n          <>\n            <Rect\n              width={50} height={30} x={330} y={10} />\n            <URLImage\n              onMouseOver={() => { document.body.style.cursor = 'pointer' }}\n              onMouseOut={() => { document.body.style.cursor = 'default' }}\n              onClick={() => { handleDeleteMessage(item, index) }}\n              image={TrashIcon} x={345} y={10} height={25} width={25} />\n          </>\n        }\n        <Circle x={30} y={30} radius={15} fill=\"#5850EB\" />\n        <Text\n          x={55}\n          y={22}\n          text={item.name}\n          fontFamily={'Roboto'}\n          fontSize={20}\n          fill={'gray'}\n        />\n        <Group\n          x={340}\n          y={messageHeight - 20}\n          onMouseOver={() => { document.body.style.cursor = 'pointer' }}\n          onMouseOut={() => { document.body.style.cursor = 'default' }}\n          onClick={(e) => {\n            e.cancelBubble = true;\n            connectEdge(item.id)\n          }}>\n          <Circle radius={9} fill=\"#8392AB\" strokeWidth={1} />\n          <Text\n            x={-80}\n            y={-8}\n            text=\"Next Step\"\n            fontFamily={'Roboto'}\n            fontSize={15}\n            fontWeight={300}\n            fill={'gray'}\n          />\n        </Group>\n        {typeof item.children == 'object' ? (\n          <>\n            {item.children.length > 0 ? (\n              handleRenderingChildrens(item)\n            ) : (\n                <React.Fragment key={item}>\n                  <Group>\n                    <Rect\n                      x={20}\n                      y={75}\n                      height={60}\n                      width={300}\n                      fill=\"#EEF1F4\"\n                      cornerRadius={16}\n                    />\n                    <Text\n                      text=\"No Content\"\n                      x={110}\n                      y={95}\n                      fontFamily={'Roboto'}\n                      fontSize={20}\n                      fontWeight={300}\n                      fill={'blue'}\n                    />\n                  </Group>\n                </React.Fragment>\n              )}\n          </>\n        ) : null}\n      </Group>\n    );\n  }\n  const getFlowMessage = (item, index) => {\n    return (\n      <Group\n      x={item.position?.x}\n      y={item.position?.y}\n      draggable\n      onClick={(e) => {\n        showToolbar(item.id);\n        setSelectedTrue(index);\n      }}\n      onMouseEnter={(e) => {\n        setHoverTrue(index);\n      }}\n      onMouseLeave={(e) => {\n        setHoverFalse(index);\n      }}\n      hitOnDragEnabled={true}\n      onDragMove={(e) => {\n        handleDragMessage(e, item, index)\n      }}\n      onDragEnd={() => { updateMessagePosition(item) }}\n    >\n      <Rect\n        cornerRadius={16}\n        height={200}\n        width={340}\n        fill=\"#FDFDFD\"\n        stroke={ \"#f9bf3b\"}\n        strokeWidth={1}\n        shadowColor={getShadowColor(item)}\n        shadowOpacity={1}\n        shadowBlur={7}\n      />\n      {item.isHover &&\n        <>\n          <Rect\n            width={50} height={30} x={330} y={10} />\n          <URLImage\n            onMouseOver={() => { document.body.style.cursor = 'pointer' }}\n            onMouseOut={() => { document.body.style.cursor = 'default' }}\n            onClick={() => { handleDeleteMessage(item, index) }}\n            image={TrashIcon} x={345} y={10} height={25} width={25} />\n        </>\n      }\n      <Circle x={30} y={30} radius={15} fill=\"#f9bf3b\" />\n      <Text\n        x={55}\n        y={22}\n        text={item.name}\n        fontFamily={'Roboto'}\n        fontSize={20}\n        fill={'gray'}\n        />\n        {item.children.length > 0 ? (\n          <Group>\n          <Rect\n            x={20}\n            y={75}\n            height={60}\n            width={300}\n            stroke=\"green\"\n            strokeWidth={1}\n            fill=\"#EEF1F4\"\n            cornerRadius={16}\n          />\n          <Text\n            text={item.children[0].name}\n            x={40}\n            y={95}\n            fontFamily={'Roboto'}\n            fontSize={20}\n            fontWeight={300}\n              fill={\"#f9bf3b\"}\n              align={\"center\"}\n          />\n        </Group>\n        ) : (\n            <React.Fragment key={item}>\n              <Group>\n                <Rect\n                  x={20}\n                  y={75}\n                  height={60}\n                  width={300}\n                  fill=\"#EEF1F4\"\n                  cornerRadius={16}\n                />\n                <Text\n                  text=\"Select Flow\"\n                  x={110}\n                  y={95}\n                  fontFamily={'Roboto'}\n                  fontSize={20}\n                  fontWeight={300}\n                  fill={\"#f9bf3b\"}\n                  align={\"center\"}\n                />\n              </Group>\n            </React.Fragment>\n          )}\n    </Group>\n    );\n  }\n  const getMessageBox = (item, index, messageHeight) => {\n    if (item.type == \"default\") {\n      return getDefaultMessage(item, index, messageHeight);\n    } else if (item.type == \"flow\") {\n      return getFlowMessage(item, index);\n    }\n  }\n  \n  if (isLoading) {\n    return (\n      <div className=\"loader-wrapper\">\n        <PuffLoader color={' #5850EC'} loading={isLoading} size={75} />\n      </div>\n    );\n  } else {\n    return (\n      <FlowBuilderWrapper>\n        {flow && <div className=\"header\">\n          <p>{flow.name}</p>\n          <PrimaryButton onClick={handlePublishFlow}>Publish</PrimaryButton>\n        </div>}\n        <div className=\"stage-action\">\n          <BiMessageSquareAdd\n            onClick={handleAddMessage}\n          />\n        </div>\n        {isToolbarActive && <Toolbar id={id} hideToolbar={hideToolbar} bot={flow.bot} flow={flow.id} />}\n        <Stage\n          width={getStageWidth()}\n          height={window.innerHeight - 70}\n          scaleX={state.layerScale}\n          scaleY={state.layerScale}\n          onMouseMove={handleMousePosition}\n          x={0}\n          y={0}\n          onClick={handleClickOnCanvas}>\n          <Layer name=\"layer_1\" draggable onTouchMove={onTouchPinch} onWheel={handleWheel}>\n            <Rect\n              x={-window.innerWidth}\n              y={-window.innerHeight}\n              width={window.innerWidth * 3}\n              height={window.innerHeight * 3}\n              fill=\"\"\n            />\n            {showToolOption && getToolOption()}\n            {builderState &&\n              typeof builderState == 'object' &&\n              builderState.map((item, index) => {\n                var messageHeight = calculateHeightOfMessageBox(item.children);\n                return (\n                  <React.Fragment key={item.id}>\n                    {(item.type === \"default\" && item.next) ? (\n                      <Edge\n                        state={state}\n                        height={messageHeight}\n                        node1={item.position}\n                        node2={getNextNode(item.next)}\n                      />\n                    ) : null}\n                    {getMessageBox(item, index, messageHeight)}\n                  </React.Fragment>\n                );\n              })}\n          </Layer>\n        </Stage>\n      </FlowBuilderWrapper>\n    );\n  }\n};\nconst getShadowColor = (item) => {\n  if (item.isSelected) {\n    if (item.type == \"default\") {\n      return '#1e824c';\n    } else if (item.type == \"flow\") {\n      return \"#f9ae23\";\n    }\n   \n  } else if (item.isHover) {\n    if (item.type == \"default\") {\n      return '#8078FF';\n    } else if (item.type == \"flow\") {\n      return \"#f9bf3b\";\n    }\n  } else {\n    return '#95bbdf';\n  }\n};\n\nconst getSelectedNode = (state) => {\n  return state.findIndex((obj) => obj.isSelected == true);\n};\n\nconst getMessageIndexWhichHasNextOfGivenMessageId = (state, messageId) => {\n  return state.findIndex((obj) => obj.next == messageId);\n}\n\n\nconst getHoveredNode = (state) => {\n  return state.findIndex((obj) => obj.isHover == true);\n};\n\nexport default withRouter(FlowBuilder);\n",["323","324"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/main/Flows/helper.tsx",["325","326","327"],"import React from 'react';\nimport { Rect, Image, Text, Group, Shape, Circle } from 'react-konva';\nimport useImage from 'use-image';\n\nexport const Edge = ({ height, node1, node2, state,width = 0 }) => {\n  node1 = {\n    x: node1.x + 350 - width,\n    y: node1.y + height - 20\n  }\n  node2 = {\n    x: node2.x,\n    y: node2.y + 20\n  }\n  const p1 = { x: (node1.x + node2.x) / 2, y: node1.y };\n  const p2 = { x: (node1.x + node2.x) / 2, y: node2.y };\n  return (\n    <Shape\n      zIndex={10}\n      sceneFunc={(context, shape) => {\n        context.beginPath();\n        context.moveTo(node1.x, node1.y);\n        context.bezierCurveTo(p1.x, p1.y, p2.x, p2.y, node2.x, node2.y);\n        // (!) Konva specific method, it is very important\n        context.fillStrokeShape(shape);\n      }}\n      stroke=\"#8392AB\"\n      strokeWidth={2}\n    />\n  );\n};\n\nexport const calculateHeightOfMessageBox = (message) => {\n  var height = 110;\n\n  if (typeof message == 'object') {\n    if (message.length > 0) {\n      message.forEach((item) => {\n        if (item.type === 'card') {\n          var activeCard = getActiveCard(item.cards);\n          const buttons = item.cards[activeCard].buttons.length;\n          height +=(item.cards[activeCard].height * 1.01) + (buttons * 40) + 40;\n        } else if (item.type === 'text') { \n          const buttons = item.buttons.length;\n          height += (item.height * 1.05) + (buttons * 40) + 40;\n        } else {\n          height += item.height + 40;\n        }\n      });\n    } else {\n      height += 90;\n    }\n  }\n  return height;\n};\nexport const getImage = (children, lastPosition) => {\n  if (children.imagePreviewUrl) {\n    return (\n      <URLImage\n        x={25}\n        y={lastPosition}\n        image={children.imagePreviewUrl}\n        height={180}\n        width={300}\n      />\n    );\n  } else {\n    return (\n      <Group>\n        <Rect\n          x={20}\n          y={lastPosition}\n          cornerRadius={5}\n          height={children.height}\n          width={300}\n          fill=\"#E1E5EA\"\n          stroke=\"#8392AB\"\n          dash={[10, 5]}\n          strokeWidth={1}\n          shadowColor=\"#95bbdf\"\n          shadowOpacity={0.5}\n          shadowBlur={7}\n        />\n        <Text\n          x={120}\n          y={lastPosition + 65}\n          text={'Upload Image'}\n          fontSize={16}\n        />\n      </Group>\n    );\n  }\n};\n\ntype URLImageType = {\n  x: any,\n  y: any,\n  image: any,\n  height: any,\n  width: any,\n  onMouseOver?: any,\n  onMouseOut?: any,\n  onClick?: any\n}\nexport const URLImage = (props:URLImageType) => {\n  const [img] = useImage(props.image);\n  return <Image image={img} x={props.x} y={props.y} height={props.height} width={props.width} onMouseOver={props.onMouseOver} onMouseOut={props.onMouseOut} onClick={props.onClick}/>;\n};\n\nexport const getActiveCard = (cards) => {\n  var activeCard = cards.findIndex((obj) => obj.active == true);\n  return activeCard;\n};\n\n/**\n * Stage zoom pan\n */\nexport const handleWheel = (e) => {\n  e.evt.preventDefault();\n\n  const scaleBy = 0.9;\n  const stage = e.target.getStage();\n  const layer = stage.find('.layer_1')[0];\n\n  const oldScale = layer.scaleX();\n  const newScale = e.evt.deltaY > 0 ? oldScale * scaleBy : oldScale / scaleBy;\n  layer.scale({ x: newScale, y: newScale });\n\n  const layerPointerPosition = getRelativePointerPosition(layer);\n  const correctedLayerPointerPosition = {\n    x: layer.x() + layerPointerPosition.x * newScale,\n    y: layer.y() + layerPointerPosition.y * newScale,\n  };\n\n  const mousePointTo = {\n    x: correctedLayerPointerPosition.x / oldScale - layer.x() / oldScale,\n    y: correctedLayerPointerPosition.y / oldScale - layer.y() / oldScale,\n  };\n\n  const newLayerPos = {\n    x:\n      -(mousePointTo.x - correctedLayerPointerPosition.x / newScale) * newScale,\n    y:\n      -(mousePointTo.y - correctedLayerPointerPosition.y / newScale) * newScale,\n  };\n\n  layer.position(newLayerPos);\n  stage.draw();\n};\n\nexport const getRelativePointerPosition = (node) => {\n  // returns mouse pointer position relative to the input node\n  var transform = node.getAbsoluteTransform().copy();\n  transform.invert();\n  var pos = node.getStage().getPointerPosition();\n  return transform.point(pos);\n};\n\n/** Touch Pinch Zooom */\nfunction getDistance(p1, p2) {\n  return Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2));\n}\n\nfunction getCenter(p1, p2) {\n  return {\n    x: (p1.x + p2.x) / 2,\n    y: (p1.y + p2.y) / 2,\n  };\n}\nvar lastCenter = null;\nvar lastDist = 0;\n\nexport const onTouchPinch = (e) => {\n  e.evt.preventDefault();\n  var touch1 = e.evt.touches[0];\n  var touch2 = e.evt.touches[1];\n  const stage = e.target.getStage();\n  \n  if (touch1 && touch2) {\n    // if the stage was under Konva's drag&drop\n    // we need to stop it, and implement our own pan logic with two pointers\n    if (stage.isDragging()) {\n      stage.stopDrag();\n    }\n\n    var p1 = {\n      x: touch1.clientX,\n      y: touch1.clientY,\n    };\n    var p2 = {\n      x: touch2.clientX,\n      y: touch2.clientY,\n    };\n\n    if (!lastCenter) {\n      lastCenter = getCenter(p1, p2);\n      return;\n    }\n    var newCenter = getCenter(p1, p2);\n\n    var dist = getDistance(p1, p2);\n\n    if (!lastDist) {\n      lastDist = dist;\n    }\n\n    // local coordinates of center point\n    var pointTo = {\n      x: (newCenter.x - stage.x()) / stage.scaleX(),\n      y: (newCenter.y - stage.y()) / stage.scaleX(),\n    };\n\n    var scale = stage.scaleX() * (dist / lastDist);\n\n    stage.scaleX(scale);\n    stage.scaleY(scale);\n\n    // calculate new position of the stage\n    var dx = newCenter.x - lastCenter.x;\n    var dy = newCenter.y - lastCenter.y;\n\n    var newPos = {\n      x: newCenter.x - pointTo.x * scale + dx,\n      y: newCenter.y - pointTo.y * scale + dy,\n    };\n\n    stage.position(newPos);\n    stage.batchDraw();\n\n    lastDist = dist;\n    lastCenter = newCenter;\n  }\n};\n\nconst onTouchEnd = (e) => {\n  lastDist = 0;\n  lastCenter = null;\n}","/home/rabinson/Freelancing/ShipboardBot/frontend/src/styles/theme.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/utils/storage.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/auth/RegisterPage.tsx",["328","329","330"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/main/Templates/index.tsx",["331"],"import React from 'react';\nimport AppLayout from '../../../components/layout/AppLayout';\nimport { GridWrapper } from '../../../components/common/grid';\nimport flowCover from '../../../assets/images/flow-cover.png';\nimport { VerticalGap } from '../../../components/common/typography';\nimport InstallToBot from '../../../components/dashboard/Bots/InstallToBot';\nimport { useModal } from '../../../services/Modal/ModalProvider';\n\nconst Templates = (props: any) => {\n  const { showModal, hideModal } = useModal();\n\n\n  const openInstallTemplateModal = () => {\n    showModal(() => (\n      <InstallToBot hideModal={ hideModal } />\n    ));\n  }\n\n  return (\n    <React.Fragment>\n      <div className=\"page-header\">\n        <h1 className=\"main-heading\">Templates</h1>\n      </div>\n      <VerticalGap size=\"7\" />\n         <GridWrapper>\n          <div className=\"grid-row\">\n          <div className=\"grid-item\" onClick={openInstallTemplateModal}>\n              <div className=\"grid-item-wrapper\">\n                <div className=\"grid-item-container\">\n                  <div className=\"image\">\n                    <img src={flowCover} alt=\"Flow Cover\" />\n                </div>\n                <div className=\"tag\">\n                  <p>Booking Template</p>\n                </div>\n                </div>\n              </div>\n            </div>      \n          </div>\n        </GridWrapper>\n    \n    </React.Fragment>\n  );\n};\n\nexport default Templates;\n","/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/main/Bots/index.tsx",["332","333","334","335","336","337","338"],"import React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Link, Route, Switch } from 'react-router-dom';\nimport { PrimaryButton } from '../../../components/common/buttons';\nimport { getBots } from '../../../apis/bots';\nimport Pagination from '../../../components/common/Pagination/index';\nimport { TableWrapper } from '../../../components/common/table';\nimport { DropdownWrapper } from '../../../components/common/Dropdown/styles';\nimport { HiDotsVertical } from 'react-icons/hi';\nimport { useModal } from '../../../services/Modal/ModalProvider';\nimport BotCreateModal from '../../../components/dashboard/Bots/CreateModal';\nimport BotEditModal from '../../../components/dashboard/Bots/EditModal';\nimport BotDeleteModal from '../../../components/dashboard/Bots/DeleteModal';\nimport { toast } from 'react-toastify';\nimport ConfigureBot from '../../../components/dashboard/Bots/Configure/Messenger';\nimport PuffLoader from \"react-spinners/PuffLoader\";\nimport noData from '../../../assets/images/no-data.svg';\n\n\n\ntype BotType = {\n  id: string;\n  name: string;\n  last_modified: string;\n};\n\nconst Bots = () => {\n  const { showModal, hideModal } = useModal();\n  const [bots, setBots] = useState<Array<BotType>>();\n  const [pageNumber, setPageNumber] = useState(1);\n  const [isLoading, setIsLoading] = useState(true);\n  const [lastPage, setLastPage] = useState(1);\n\n  const getBotsData = (pageNumber: number) => {\n    getBots(pageNumber)\n      .then((response) => {\n        setBots(response.data);\n        setPageNumber(response.meta.current_page);\n        setLastPage(response.meta.last_page);\n      })\n      .catch((err) => {\n        toast.error(\"Something went wrong\");\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  };\n\n  useEffect(() => {\n    getBotsData(pageNumber);\n  }, [pageNumber, lastPage]);\n\n  const handleCreateOpen = (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ) => {\n    showModal(() => (\n      <BotCreateModal hideModal={hideModal} handleCreateBot={ handleCreateBot}  />\n    ));\n  };\n\n  const handleEditOpen = (data: BotType) => {\n    showModal(() => (\n      <BotEditModal hideModal={hideModal} bot={data} handleEditBot={handleEditBot} />\n    ));\n  };\n\n  const handleDeleteConfirmation = (data: BotType) => {\n    showModal(() => (\n      <BotDeleteModal\n        hideModal={hideModal} bot={data} handleDeleteBot={handleDeleteBot}\n      />\n    ));\n  };\n\n  const handlePageChange = (pageNumber: number) => {\n    setPageNumber(pageNumber);\n  };\n\n  const handleCreateBot = (newBot: BotType) => { \n    const newBotList = bots.concat(newBot);\n    setBots(newBotList)\n  }\n\n  const handleEditBot = (data) => {\n    const botId = bots.findIndex(\n      (obj) => obj.id == data.id\n    );\n    setBots(bots.map((item, index) => {\n      if (index == botId) {\n        item.name = data.name\n      }\n      return item;\n    }));\n  }\n\n  const handleDeleteBot = (id) => {\n    const botId = bots.findIndex(\n      (obj) => obj.id == id\n    );\n    bots.splice(botId, 1);\n  }\n  \n  const getContent = () => {\n    if (bots.length < 1) {\n      return (\n        <div className=\"empty-data\">\n          <img className=\"no-data-image\" src={noData} alt=\"Empty Bots\"></img>\n          <h3>No Bots</h3>\n          </div>\n      );\n    } else {\n      return (\n        <React.Fragment>\n           <div className=\"container\">\n          <TableWrapper>\n            <li className=\"table-header\">\n              <div className=\"col col-1 flex-basis-50\">Name</div>\n              <div className=\"col col-2 flex-basis-20\">Channels</div>\n              <div className=\"col col-3 flex-basis-20\">Modified</div>\n              <div className=\"col col-4 flex-basis-10\">Action</div>\n            </li>\n            {bots &&\n              bots.map((data: BotType) => {\n                return (\n                  <React.Fragment key={data.id}>\n                    <Link to={\"bot/\" + data.id} className=\"table-row table-row-data\" >\n                      <li className=\"table-row\">\n                        <div className=\"col col-1 flex-basis-50\" data-label=\"name\">{data.name}</div>\n                        <div className=\"col col-2 flex-basis-20\" data-label=\"channels\">-</div>\n                        <div className=\"col col-3 flex-basis-20\" data-label=\"last_modified\">{data.last_modified}</div>\n                        <div className=\"col col-4 flex-basis-10\" data-label=\"action\">\n                          <DropdownWrapper>\n                            <label className=\"dropbtn\">\n                              <HiDotsVertical />\n                            </label>\n                            <div className=\"dropdown-content\">\n                              <p\n                                onClick={(e) => {\n                                  e.preventDefault();\n                                  handleEditOpen(data);\n                                }}>\n                                Edit\n                        </p>\n                              <p\n                                onClick={(e) => {\n                                  e.preventDefault()\n                                  handleDeleteConfirmation(data);\n                                }}>\n                                Delete\n                        </p>\n                            </div>\n                          </DropdownWrapper>\n                        </div>\n                      </li>\n                    </Link>\n                  </React.Fragment>\n                );\n              })}\n          </TableWrapper>\n        </div>\n\n        <Pagination\n          activePage={pageNumber}\n          total={lastPage}\n          onChange={handlePageChange}\n        />\n        </React.Fragment>\n      );\n    }\n  }\n  if (isLoading) {\n    return (\n      <div className=\"loader-wrapper\">\n        <PuffLoader color={' #5850EC'} size={75} />\n      </div>\n    );\n  } else {\n    return (\n      <React.Fragment>\n        <div className=\"page-header\">\n          <h1 className=\"main-heading\">Bots</h1>\n          <PrimaryButton onClick={handleCreateOpen}>Add Bots</PrimaryButton>\n        </div>\n       {getContent()}\n      </React.Fragment>\n    );\n  }\n};\n\nexport default Bots;\n","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/common/buttons.ts",["339"],"import styled from 'styled-components';\nimport Toolbar from '../dashboard/builder/Toolbar/index';\n\nexport const StyledButton = styled.button`\n  display:flex;\n  align-items:center;\n  justify-content:center;\n  background: #ffffff;\n  border-radius: 12px 12px 12px 0px;\n  border: 2px solid #5850eb;\n  box-sizing: border-box;\n  cursor: pointer;\n  font-family: Comic Neue, Roboto, sans-serif;\n  font-size: 1.5rem;\n  padding:.9rem;\n  width: 10rem;\n  outline: none;\n  button {\n    text-decoration: none;\n  }\n  &:visited, :focus, :active {\n   button {\n    text-decoration: none;\n   }\n  }\n`;\n\nexport const PrimaryButton = styled(StyledButton)`\n  background-color: #5850eb;\n  height: 2.5rem;\n  color: #ffffff;\n  margin-right: 0rem;\n  &:focus {\n    background-color: #251DCA\n  }\n`;\n\nexport const FormButton = styled(PrimaryButton)`\n  width: 100%;\n  height: 3.5rem;\n  font-size: 1.6rem;\n  font-weight: 600;\n  margin-top: 1.5rem;\n`;\n\nexport const AuthButton = styled(StyledButton)`\n  width: 20rem;\n  font-size: 1.6rem;\n`;\n\n\nexport const ToolbarButton = styled.button < { height?: string, width?: string, fontSize?: string}>`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: ${props => props.height ? props.height : '2rem'};\n  width: ${props => props.width ? props.width : '2rem'};\n  border: none;\n  outline: none;\n  padding: 0;\n  background: #ffffff;\n  color: #8392AB;\n  font-family: Roboto, sans-serif;\n  font-weight: 400;\n  font-size: ${props => props.fontSize ? props.fontSize : '1.6rem'};\n  margin: .8rem;\n  cursor: pointer;\n  background-image: url(\"data:image/svg+xml,%3csvg width='100%25' height='100%25' xmlns='http://www.w3.org/2000/svg'%3e%3crect width='100%25' height='100%25' fill='none' rx='7' ry='7' stroke='%238392ABFF' stroke-width='4' stroke-dasharray='10%2c10' stroke-dashoffset='23' stroke-linecap='round'/%3e%3c/svg%3e\");\n  border-radius: 0px 0px 7px 7px;\n  &:hover {\n    background-image: url(\"data:image/svg+xml,%3csvg width='100%25' height='100%25' xmlns='http://www.w3.org/2000/svg'%3e%3crect width='100%25' height='100%25' fill='none' rx='7' ry='7' stroke='%235850EBFF' stroke-width='4' stroke-dasharray='10%2c10' stroke-dashoffset='23' stroke-linecap='round'/%3e%3c/svg%3e\");\n    color: #5850EB;\n  }\n`;\n\nexport const AddTextButton = styled(ToolbarButton)`\n  margin: 0rem;\n  width: 100%;\n`;\n\nexport const ContentButton = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 3rem;\n  width:  90%;\n  border: none;\n  padding: 0;\n  background: #E1E5EA;\n  color: black;\n  border: none;\n  outline: none;\n  font-family: Roboto, sans-serif;\n  font-weight: 400;\n  font-size: 1.4rem;\n  margin: .4rem;\n  cursor: pointer;\n  border-radius: 7px;\n`;\n\n","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/common/form.ts",["340"],"import styled from 'styled-components'\nimport { grey } from '../../styles/theme';\n\nexport const InputField = styled.input<{isError?: boolean}>`\n  background: ${props => props.isError ? '#FFE4E4' : '#F7F7F7'};\n  border-radius: 7px;\n  border: 1px solid rgba(0, 0, 0, 0.1);\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.1);\n  box-sizing: border-box;\n  min-height: 3.8rem;\n  min-width: 30rem;\n  padding: .8rem;\n  outline: none;\n  font-family: Roboto, sans-serif;\n  font-style: normal;\n  font-weight: 400;\n  font-size: 1.4rem;\n  color: #000;\n  width: 100%;\n\n\n  &:focus {\n    font-weight: 400;\n    box-shadow: 0 0 0 3px rgba(164, 202, 254, 0.45);\n    border-color: #5850EC;\n  }\n\n  &::placeholder {\n    color: #d7d7d7;\n    font-size: 1.2rem;\n  }\n`;\n\nexport const SelectField = styled.select<{isError?: boolean}>`\n  background: ${props => props.isError ? '#FFE4E4' : '#F7F7F7'};\n  border-radius: 7px;\n  border: 1px solid rgba(0, 0, 0, 0.1);\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.1);\n  box-sizing: border-box;\n  min-height: 3.8rem;\n  min-width: 30rem;\n  padding: .8rem;\n  outline: none;\n  font-family: Roboto, sans-serif;\n  font-style: normal;\n  font-weight: 400;\n  font-size: 1.4rem;\n  color: #000;\n  width: 100%;\n\n\n  &:focus {\n    font-weight: 400;\n    box-shadow: 0 0 0 3px rgba(164, 202, 254, 0.45);\n    border-color: #5850EC;\n  }\n\n  &::placeholder {\n    color: #d7d7d7;\n    font-size: 1.2rem;\n  }\n`;\n\nexport const FormLink = styled.a`\n  text-decoration: none;\n  font-size: 1.2rem;\n  font-family: Roboto, sans-serif;\n  color: #565252;\n\n  &:hover{\n    text-decoration-line: underline;\n    color: #000;\n  }\n`;\n",["341","342"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/main/Dashboard/styles.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/common/Dropdown/styles.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/layout/AppLayout.tsx",["343","344"],"import React from 'react';\nimport styled from 'styled-components';\nimport Sidebar from '../dashboard/Sidebar';\nimport Breadcrumb from '../dashboard/Breadcrumb';\nimport { BuilderProvider } from '../../services/Builder/BuilderProvider';\n\ninterface LayoutProps {\n  children?: any;\n}\n\nconst AppLayout: React.FC<LayoutProps> = (props) => {\n  const [isOpen, setIsOpen] = React.useState<boolean>(true);\n  const sidebarState = React.useRef();\n\n  const handleSidebarState = React.useCallback((isOpen) => {\n    setIsOpen(isOpen);\n  }, []);\n\n  return (\n    <LayoutWrapper>\n      <Sidebar handleSidebarState={handleSidebarState} />\n      <BuilderProvider sidebar={isOpen}>\n        <AppContainer>\n          {/* <Breadcrumb /> */}\n          {props.children}\n        </AppContainer>\n      </BuilderProvider>\n    </LayoutWrapper>\n  );\n};\n\nexport default AppLayout;\n\nconst LayoutWrapper = styled.div`\n  display: flex;\n  min-height: 100vh;\n`;\n\nconst AppContainer = styled.div`\n  margin-left: -2rem;\n  flex-grow: 1;\n  position: relative;\n\n  .page-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin: 2rem;\n\n    .button {\n      align-self: center;\n    }\n  }\n\n  .container {\n    margin: 0 4rem;\n  }\n`;\n","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Bots/CreateModal.tsx",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/common/Pagination/index.tsx",["345","346","347","348"],"import React, { useState, useEffect } from 'react';\nimport { PaginationItem, PaginationWrapper } from './styles';\nimport { BiChevronLeft, BiChevronRight } from 'react-icons/bi';\nimport pagination from '../../../utils/pagination';\n\ninterface PaginationPropsInteface {\n  total: number;\n  activePage: number;\n  onChange: (pageNumber: number) => void;\n}\n\nconst Pagination: React.FC<PaginationPropsInteface> = (props) => {\n  const pageBtns = pagination(props.activePage, props.total);\n\n  return (\n    <PaginationWrapper>\n      <PaginationItem>\n        <BiChevronLeft\n          onClick={() => {\n            if (props.activePage != 0) {\n              props.onChange(props.activePage - 1);\n            }\n          }}\n        />\n      </PaginationItem>\n      {pageBtns &&\n        pageBtns.map((page, index) => {\n          if (typeof page !== 'string') {\n            var isActive = page === props.activePage ? 1 : 0;\n            return (\n              <PaginationItem\n                isActive={isActive}\n                onClick={() => {\n                  props.onChange(page);\n                }}\n              key={index}>\n                {page}\n              </PaginationItem>\n            );\n          } else {\n            return <PaginationItem>...</PaginationItem>;\n          }\n        })}\n      <PaginationItem>\n        <BiChevronRight\n          onClick={() => {\n            if (props.activePage != props.total) {\n              props.onChange(props.activePage + 1);\n            }\n          }}\n        />\n      </PaginationItem>\n    </PaginationWrapper>\n  );\n};\n\nexport default Pagination;\n","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Flows/CreateModal.tsx",["349","350"],"import React, { useState, useRef, useEffect } from 'react';\nimport { FormHeader } from '../../common/typography';\nimport { InputField } from '../../common/form';\nimport { FormButton } from '../../common/buttons';\nimport { useForm } from \"react-hook-form\";\nimport { saveFlow } from './../../../apis/flows';\nimport { toast } from 'react-toastify';\n\nconst FlowCreateModal = ({bot, hideModal, handleCreateFlow}) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const { register, handleSubmit, errors, setError } = useForm();  \n\n  const onSubmit = data => {\n    setIsLoading(true);\n    saveFlow({ name: data.name, bot: bot })\n      .then((response) => {\n        hideModal();\n        toast.success(response.message);\n        handleCreateFlow(response.data)\n      }).catch((err) => { \n        if (err.response.status === 422) {\n          if (err.response.data.errors.name) {\n            setError('name', {\n              type: 'server',\n              message: err.response.data.errors.name[0]\n            })\n          } \n        } else {\n          toast.error('Something went wrong')\n        }\n      }).finally(() => { \n        setIsLoading(false);\n      })\n  }\n\n  return (\n    <React.Fragment>\n      <div className=\"modal-body\">\n        <button className=\"modal-exit\" onClick={hideModal}></button>\n        <div className=\"modal-title\">\n          <FormHeader>Create Flow</FormHeader>\n        </div>\n        <div className=\"modal-content\">\n          <form className=\"bot-create-form\" onSubmit={handleSubmit(onSubmit)}>\n            <InputField\n              isError={!!errors.name}\n              name=\"name\"\n              placeholder=\"Enter flow name\"\n              ref={register({required: true, minLength: 3})}\n            />\n            {errors.name && errors.name.type === 'required' && (<p className=\"form-error\">This field is required</p>)}\n            {errors.name && errors.name.type === 'minLength' && (<p className=\"form-error\">This field is required min length of 3</p>)}\n            {errors.name && errors.name.type === 'server' && (<p className=\"form-error\">{ errors.name.message}</p>)}\n\n            <FormButton type=\"submit\" disabled={isLoading}>\n              {isLoading ? 'Loading...' : 'Save'}\n            </FormButton>\n          </form>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default FlowCreateModal;\n","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Bots/Configure/Slack.tsx",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/apis/buttons.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/services/Builder/BuilderProvider.tsx",["351","352"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/front/header/styles.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/front/feature/index.tsx",["353"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/common/Pagination/styles.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Bots/Configure/styles.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/apis/images.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/front/footer/styles.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/front/info/styles.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Text/index.tsx",["354","355","356","357","358","359","360","361","362","363"],"import React, { useEffect, useState, useRef, useContext } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { BuilderContext } from '../../../../../services/Builder/BuilderProvider';\nimport { AddTextWrapper } from './styles';\nimport { AddTextButton, ContentButton } from '../../../../common/buttons';\nimport { BiTrash } from 'react-icons/bi';\nimport Textarea from 'react-expanding-textarea';\nimport { updateText, deleteText } from '../../../../../apis/texts';\nimport { toast } from 'react-toastify';\nimport { saveButton } from '../../../../../apis/buttons';\nimport { v4 as uuidv4 } from 'uuid';\n\n\nconst FormText = ({ messageId, childId , showBtnEditor, setEditorContent}) => {\n  const [builderState, setBuilderState] = useContext(BuilderContext);\n  const { register, handleSubmit } = useForm({ mode: 'onChange' });\n  const [isChangingBody, setIsChangingBody] = useState(false);\n\n  const textAreaRef = useRef<HTMLTextAreaElement>(null);\n  const buttonRef = useRef<HTMLButtonElement>(null);\n\n  //Find index of specific object using findIndex method.\n  const childIndex = builderState[messageId].children.findIndex(\n    (obj) => obj.id == childId\n  );\n\n  const onTextChange = (data) => {\n    var height = textAreaRef.current.scrollHeight;\n    updateText({\n      text: data.text,\n      height: height\n    }, childId).then((response) => {\n      setBuilderState(\n        builderState.map((item, index) => {\n          if (index == messageId) {\n            item.children.map((child, ind) => {\n              if (ind == childIndex) {\n                child.value = data.text;\n                child.height = height;\n              }\n            });\n          }\n          return item;\n        })\n      );\n    }).catch((err) => {\n      toast.error(\"Something went wrong\");\n    })\n  };\n\n  const handleDelete = () => {\n    var height = builderState[messageId].height - textAreaRef.current.scrollHeight;\n    deleteText(childId)\n      .then(() => {\n        setBuilderState(\n          builderState.map((item, index) => {\n            if (index == messageId) {\n              item.height = height;\n              item.children.splice(childIndex,1)\n            }\n            return item;\n          })\n        );\n      })\n      .catch((err) => {\n        toast.error(\"Something went wrong\");\n    })\n  };\n\n  const handleAddButton = () => {\n    const buttonNumber = builderState[messageId].children[childIndex].buttons.length + 1;\n    saveButton({\n      name: 'Button #' + buttonNumber,\n      parent_type: 'text',\n      parent: childId\n    }).then((response) => {\n      setBuilderState(\n        builderState.map((item, index) => {\n          if (index == messageId) {\n            item.children.map((child) => {\n              if (child.id == childId) {\n                child.buttons.push(response.data);\n              }\n            });\n          }\n          return item;\n        })\n      );\n    }).catch((err) => {\n      toast.error(\"Something went wrong\")\n    })      \n  }\n\n  useEffect(() => {\n    if (textAreaRef.current) {\n      register(textAreaRef.current, {required: true, minLength: 3});\n    }\n  }, []);\n\n  return (\n    <AddTextWrapper>\n      <button className=\"action-btn\">\n        <BiTrash onClick={handleDelete} />\n      </button>\n      <div className={isChangingBody ? 'card-body active' : 'card-body'}>\n        <form onBlur={handleSubmit(onTextChange)}>\n          <Textarea\n            maxLength={500}\n            placeholder=\"Enter your text here\"\n            onBlur={() => setIsChangingBody(false)}\n            defaultValue={builderState[messageId].children[childIndex].value}\n            id=\"text\"\n            name=\"text\"\n            ref={textAreaRef}\n            onClick={() => setIsChangingBody(true)}\n          />\n        </form>\n      </div>\n      <div className=\"card-base\">\n        {builderState[messageId].children[childIndex].buttons && builderState[messageId].children[childIndex].buttons.map((button, index) => {\n          return (\n            <React.Fragment key={button.id}>\n              <ContentButton\n                ref={buttonRef}\n                onClick={(event) => {\n                setEditorContent({\n                  name: button.name,\n                  id: button.id,\n                  messageId: builderState[messageId].id,\n                  childId: childId,\n                  type: 'text',\n                  url: button.url,\n                  next: button.next\n                });\n                showBtnEditor();\n            }}>{button.name}</ContentButton>\n            </React.Fragment>\n          );\n        })}\n        <AddTextButton height=\"4rem\" width=\"100%\" onClick={handleAddButton}>\n          Add Button\n        </AddTextButton>\n      </div>\n    </AddTextWrapper>\n  );\n};\n\nexport default FormText;\n","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Card/index.tsx",["364","365","366","367","368","369","370","371","372","373","374","375","376","377","378","379","380","381","382","383","384","385","386","387","388","389","390","391","392","393","394","395","396","397","398","399","400"],"import React, { useState, useEffect, useRef, useContext } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { CardSlider, CardWrapper } from './styles';\nimport { BuilderContext } from '../../../../../services/Builder/BuilderProvider';\nimport { AddTextButton, ContentButton } from '../../../../common/buttons';\nimport { ImageWrapper } from '../Image/styles';\nimport { v4 as uuidv4 } from 'uuid';\nimport Textarea from 'react-expanding-textarea';\nimport {\n  BiImageAdd,\n  BiTrash,\n  BiChevronRight,\n  BiChevronLeft,\n  BiPlus,\n} from 'react-icons/bi';\nimport { addCard, deleteCardGroup, updateCard, uploadImage } from '../../../../../apis/cards';\nimport { toast } from 'react-toastify';\nimport { saveButton } from '../../../../../apis/buttons';\n\nconst FormCard = ({ messageId, childId, showBtnEditor, setEditorContent }) => {\n  const [builderState, setBuilderState] = useContext(BuilderContext);\n  const { register, handleSubmit } = useForm({ mode: 'onChange' });\n  const [isChangingHeading, setIsChangingHeading] = useState(false);\n  const [isChangingBody, setIsChangingBody] = useState(false);\n  const [activeCardIndex, setActiveCardIndex] = useState(0);\n\n  const headingRef = useRef<HTMLInputElement>(null);\n  const paragraphRef = useRef<HTMLTextAreaElement>(null);\n  const cardRef = useRef<HTMLDivElement>(null);\n  const buttonRef = useRef<HTMLButtonElement>(null);\n\n  //Find index of specific object using findIndex method.\n  const childIndex = builderState[messageId].children.findIndex(\n    (obj) => obj.id == childId\n  );\n\n  //Card Navigation functions\n  const handleNextButton = (id) => {\n    const cards = builderState[messageId].children[childIndex].cards;\n    const length = cards.length - 1;\n    const activeCardIndex = getActiveCardIndex(cards);\n    setActiveCardIndex(activeCardIndex + 1);\n\n    if (activeCardIndex == length) {\n      makeCardActive(activeCardIndex + 1, activeCardIndex, length + 2, true);\n    } else {\n      makeCardActive(activeCardIndex + 1, activeCardIndex);\n    }\n  };\n\n  const handlePreviousButton = () => {\n    const cards = builderState[messageId].children[childIndex].cards;\n    const activeCardIndex = getActiveCardIndex(cards);\n    setActiveCardIndex(activeCardIndex - 1);\n    if (activeCardIndex != 0) {\n      makeCardActive(activeCardIndex - 1, activeCardIndex);\n    }\n  };\n\n  const makeCardActive = (\n    cardIndex,\n    activeCardIndex,\n    length = 0,\n    addNew = false\n  ) => {\n    if (addNew) {\n      addCard(childId).then((response) => {\n        setBuilderState(\n          builderState.map((message, index) => { \n            if (index == messageId) { \n              message.children.map((child, ind) => { \n                if (ind == childIndex) {\n                  //First set active card to inactive\n                  child.cards.map((card, inx) => {\n                    if (inx == activeCardIndex) {\n                      card.active = false\n                    }\n                    return card;\n                })\n                //Then push a new card with active true;\n                  child.cards.push(response.data)\n                }\n              })\n            }\n            return message;\n          })\n        );\n      }).catch((err) => {\n        toast.error(\"Something went wrong\");\n      });\n    } else {\n      setBuilderState(\n        builderState.map((message, index) => { \n          if (index == messageId) { \n            message.children.map((child, ind) => { \n              if (ind == childIndex) {\n                child.cards.map((card, inx) => { \n                  if (inx == cardIndex) { \n                    card.active = true\n                  }\n                  if (inx == activeCardIndex) { \n                    card.active = false\n                  }\n                  return card;\n                })\n              }\n              return child;\n            })\n          }\n          return message;\n        })\n      );\n    }\n  };\n\n  const getActiveCardIndex = (cards) => {\n    return cards.findIndex((obj) => obj.active == true);\n  };\n\n  const getCardIndex = (id) => {\n    return builderState[messageId].children[childIndex].cards.findIndex(\n      (obj) => obj.id === id\n    );\n  };\n\n  const isLastCard = () => {\n    const cards = builderState[messageId].children[childIndex].cards;\n    const length = cards.length - 1;\n    const activeCardIndex = getActiveCardIndex(cards);\n    return activeCardIndex == length;\n  };\n\n  //Form input submit methods\n  const onUploadImage = (data, id) => {\n    let cardIndex = getCardIndex(id);\n    let reader = new FileReader();\n    const formData = new FormData();\n    formData.append('image', data.image[0]);\n    formData.append('name', data.image[0].name);\n\n    reader.onloadend = () => {\n      var paragraphHeight = paragraphRef.current.scrollHeight;\n      uploadImage(formData, id).then((response) => {\n        setBuilderState(\n          builderState.map((item, index) => {\n            if (index == messageId) {\n              item.children.map((child, ind) => {\n                if (ind == childIndex) {\n                  child.cards.map((card, s) => {\n                    if (s == cardIndex) {\n                      card.selectedImage = data.image[0];\n                      card.imagePreviewUrl = reader.result;\n                      card.height = paragraphHeight + 200;\n                    }\n                    return card;\n                  });\n                }\n                return child;\n              });\n            }\n            return item;\n          })\n        );\n      }).catch((err) => {\n        toast.error(\"Something went wrong\");\n      })\n    };\n\n    reader.readAsDataURL(data.image[0]);\n  };\n\n  const onHeadingChange = (data, id) => {\n    let cardIndex = getCardIndex(id);\n    var paragraphHeight = paragraphRef.current.scrollHeight;\n\n    updateCard({\n      heading: data.heading,\n      height: paragraphHeight + 200\n    }, id).then((response) => {\n      setBuilderState(\n        builderState.map((item, index) => {\n          if (index == messageId) {\n            item.children.map((child, ind) => {\n              if (ind == childIndex) {\n                child.cards.map((card, s) => {\n                  if (s == cardIndex) {\n                    card.heading = data.heading;\n                    card.height = paragraphHeight + 200;\n                  }\n                });\n              }\n            });\n          }\n          return item;\n        })\n      );\n    }).catch((err) => {\n      toast.error(\"Something went wrong\");\n    })\n  };\n\n  const onParagraphChange = (data, id) => {\n    let cardIndex = getCardIndex(id);\n\n    var paragraphHeight = paragraphRef.current.scrollHeight;\n\n    updateCard({\n      body: data.body,\n      height: paragraphHeight + 200\n    }, id).then((response) => {\n      setBuilderState(\n        builderState.map((item, index) => {\n          if (index == messageId) {\n            item.children.map((child, ind) => {\n              if (ind == childIndex) {\n                child.cards.map((card, s) => {\n                  if (s == cardIndex) {\n                    card.body = data.body;\n                    card.height = paragraphHeight + 200;\n                  }\n                });\n              }\n            });\n          }\n          return item;\n        })\n      );\n    }).catch((err) => {\n      toast.error(\"Something went wrong\");\n    })\n  };\n\n  const handleAddButton = () => {\n    const cards = builderState[messageId].children[childIndex].cards;\n    const activeCardIndex = getActiveCardIndex(cards);\n    const activeCard = builderState[messageId].children[childIndex].cards[activeCardIndex];\n    const buttonNumber = activeCard.buttons.length + 1;\n    saveButton({\n      name: 'Button #' + buttonNumber,\n      parent_type: 'card',\n      parent: activeCard.id\n    }).then((response) => {\n      setBuilderState(\n        builderState.map((item, index) => {\n          if (index == messageId) {\n            item.children.map((child) => {\n              if (child.id == childId) {\n                child.cards.map((card, inx) => {\n                  if (card.active == true) {\n                    card.buttons.push(response.data);\n                  }\n                })\n              }\n            });\n          }\n          return item;\n        })\n      );\n    }).catch((err) => {\n      toast.error(\"Something went wrong\")\n    })      \n  }\n\n  const handleDelete = () => {\n    deleteCardGroup(childId).then((response) => {\n      setBuilderState(\n        builderState.map((item, index) => {\n          if (index == messageId) {\n            item.height -= 250;\n            item.children.splice(childIndex, 1);\n          }\n          return item;\n        })\n      );\n    }).catch((err) => {\n      toast.error(\"Something went wrong\");\n    })\n  };\n\n  useEffect(() => {\n    if (paragraphRef.current) {\n      register(paragraphRef.current,  {required: true, minLength: 3})\n    }\n  }, [activeCardIndex]);\n\n  return (\n    <CardSlider>\n      <div className=\"navigation_btn previous\" onClick={handlePreviousButton}>\n        <BiChevronLeft />\n      </div>\n      <div className=\"navigation_btn next\" onClick={handleNextButton}>\n        {isLastCard() ? <BiPlus /> : <BiChevronRight />}\n      </div>\n      <button className=\"action-btn\" onClick={handleDelete}>\n        <BiTrash />\n      </button>\n      {builderState[messageId].children[childIndex].cards.map((card) => {\n        if (card.active) {\n          return (\n            <CardWrapper ref={cardRef}>\n              <div className=\"card-image\">\n                <ImageWrapper>\n                  {card.imagePreviewUrl ? (\n                    <div>\n                      <img src={card.imagePreviewUrl} alt=\"card-image\" />\n                    </div>\n                  ) : (\n                    <form\n                      onChange={handleSubmit((data) =>\n                        onUploadImage(data, card.id)\n                      )}>\n                      <input\n                        ref={register}\n                        type=\"file\"\n                        id={'card_image' + getCardIndex(card.id)}\n                        name=\"image\"\n                        accept=\"image/*\"\n                      />\n                      <label htmlFor={'card_image' + getCardIndex(card.id)}>\n                        <BiImageAdd />\n                        <p>Upload image</p>\n                      </label>\n                    </form>\n                  )}\n                </ImageWrapper>\n              </div>\n              <div className=\"card-text\">\n                <div\n                  className={\n                    isChangingHeading ? 'card-heading active' : 'card-heading'\n                  }>\n                  <form\n                    onBlur={handleSubmit((data) =>\n                      onHeadingChange(data, card.id)\n                    )}>\n                    <input\n                      className=\"card-title\"\n                      ref={register({required: true, minLength: 3 })}\n                      maxLength={27}\n                      id=\"heading\"\n                      name=\"heading\"\n                      defaultValue={card.heading}\n                      onBlur={() => setIsChangingHeading(false)}\n                      onClick={() => {\n                        setIsChangingBody(false);\n                        setIsChangingHeading(true);\n                      }}\n                    />\n                  </form>\n                </div>\n                <div\n                  className={isChangingBody ? 'card-body active' : 'card-body'}>\n                  <form\n                    onBlur={handleSubmit((data) =>\n                      onParagraphChange(data, card.id)\n                    )}>\n                    <Textarea\n                      className=\"card-paragraph\"\n                      maxLength={200}\n                      placeholder=\"Enter your text here\"\n                      onBlur={() => setIsChangingBody(false)}\n                      defaultValue={card.body}\n                      id=\"body\"\n                      name=\"body\"\n                      ref={paragraphRef}\n                      onClick={() => {\n                        setIsChangingHeading(false);\n                        setIsChangingBody(true);\n                      }}\n                    />\n                  </form>\n                </div>\n                <div className=\"card-base\">\n                {card.buttons && card.buttons.map((button, index) => {\n                    return (\n                      <React.Fragment key={button.id}>\n                        <ContentButton\n                          ref={buttonRef}\n                          onClick={(event) => {\n                          setEditorContent({\n                            name: button.name,\n                            id: button.id,\n                            messageId: builderState[messageId].id,\n                            childId: childId,\n                            activeCardId: card.id,\n                            type: 'card'\n                          });\n                          showBtnEditor();\n                      }}>{button.name}</ContentButton>\n                      </React.Fragment>\n                    );\n                  })}\n                </div>\n                <AddTextButton height=\"4rem\" width=\"100%\" onClick={handleAddButton}>\n                  Add Button\n                </AddTextButton>\n              </div>\n            </CardWrapper>\n          );\n        }\n      })}\n    </CardSlider>\n  );\n};\n\nexport default FormCard;\n","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Sidebar/styles.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/index.tsx",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/styles/mediaQueries.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/LandingPage.tsx",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/auth/LoginPage.tsx",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/common/typography.ts",["401","402"],"import styled from 'styled-components';\nimport { darkerGrey } from '../../styles/theme';\nimport { media } from '../../styles/mediaQueries';\n\nexport const PrimaryHeader = styled.h1`\n  font-family: Comic Neue, Roboto, sans-serif;\n  font-weight: 700;\n  font-size: 3.6rem;\n  color: #000;\n`;\n\nexport const FormHeader = styled(PrimaryHeader)`\n  font-size: 2.6rem;\n  text-align: center;\n`;\n\nexport const FormSubHeader = styled.h2`\n  font-family: Roboto, sans-serif;\n  font-weight: 300;\n  font-size: 1.6rem;\n  color: #000;\n  text-align: center;\n`;\n\nexport const SecondaryHeader = styled.h1`\n  font-family: Roboto, sans-serif;\n  font-weight: 500;\n  line-height: 5.6rem;\n  color: #000;\n  font-size: 2.4rem;\n`; \n\nexport const Paragraph = styled.p`\n  font-family: inherit;\n  font-size: 1.5rem;\n  color: ${(props) => props.theme.darkerGrey};\n  line-height: 2.8rem;\n`;\n\nexport const ToolbarHeading = styled.h2`\n  font-family: Roboto, sans-serif;\n  font-style: normal;\n  font-weight: 500;\n  font-size: 1.8rem;\n  line-height: 2.1rem;\n  color: #797979;\n`;\n\nexport const VerticalGap = styled.div<{size: string}>`\n  width: auto;\n  height: ${(props) => props.size}rem;\n  display: block;\n  flex-shrink: 0;\n`;\n\nexport const HorizontalGap = styled.div<{size: string}>`\n  width: ${(props) => props.size}rem;\n  height: auto;\n  display: block;\n`;","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/common/table.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/layout/AuthLayout.tsx",["403"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Bots/DeleteModal.tsx",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Flows/DeleteModal.tsx",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Bots/Configure/Messenger.tsx",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/constants/urls.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/front/footer/index.tsx",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Toolbar/index.tsx",["404","405","406","407","408","409","410","411","412","413","414","415"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Toolbar/styles.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/front/navbar/styles.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Image/styles.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/services/Auth/AuthProvider.tsx",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/services/Modal/ModalProvider.tsx",["416"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/main/Dashboard/index.tsx",["417","418","419","420"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/apis/auth.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/main/Flows/styles.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Bots/Configure/Telegram.tsx",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/front/info/index.tsx",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/front/feature/styles.ts",["421"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Sidebar/index.tsx",["422","423","424","425","426"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/apis/texts.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Card/styles.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Image/index.tsx",["427","428","429","430","431","432","433"],{"ruleId":"434","severity":1,"message":"435","line":4,"column":30,"nodeType":"436","messageId":"437","endLine":4,"endColumn":35},{"ruleId":"434","severity":1,"message":"438","line":44,"column":10,"nodeType":"436","messageId":"437","endLine":44,"endColumn":22},{"ruleId":"434","severity":1,"message":"439","line":47,"column":17,"nodeType":"436","messageId":"437","endLine":47,"endColumn":25},{"ruleId":"440","severity":1,"message":"441","line":57,"column":64,"nodeType":"442","messageId":"443","endLine":57,"endColumn":66},{"ruleId":"440","severity":1,"message":"441","line":58,"column":21,"nodeType":"442","messageId":"443","endLine":58,"endColumn":23},{"ruleId":"440","severity":1,"message":"441","line":311,"column":21,"nodeType":"442","messageId":"443","endLine":311,"endColumn":23},{"ruleId":"440","severity":1,"message":"441","line":314,"column":21,"nodeType":"442","messageId":"443","endLine":314,"endColumn":23},{"ruleId":"440","severity":1,"message":"441","line":323,"column":21,"nodeType":"442","messageId":"443","endLine":323,"endColumn":23},{"ruleId":"440","severity":1,"message":"441","line":337,"column":21,"nodeType":"442","messageId":"443","endLine":337,"endColumn":23},{"ruleId":"440","severity":1,"message":"441","line":340,"column":21,"nodeType":"442","messageId":"443","endLine":340,"endColumn":23},{"ruleId":"440","severity":1,"message":"441","line":349,"column":21,"nodeType":"442","messageId":"443","endLine":349,"endColumn":23},{"ruleId":"440","severity":1,"message":"441","line":361,"column":19,"nodeType":"442","messageId":"443","endLine":361,"endColumn":21},{"ruleId":"440","severity":1,"message":"441","line":378,"column":23,"nodeType":"442","messageId":"443","endLine":378,"endColumn":25},{"ruleId":"440","severity":1,"message":"441","line":398,"column":23,"nodeType":"442","messageId":"443","endLine":398,"endColumn":25},{"ruleId":"440","severity":1,"message":"441","line":399,"column":22,"nodeType":"442","messageId":"443","endLine":399,"endColumn":24},{"ruleId":"444","severity":1,"message":"445","line":400,"column":41,"nodeType":"446","messageId":"447","endLine":400,"endColumn":43},{"ruleId":"440","severity":1,"message":"441","line":401,"column":30,"nodeType":"442","messageId":"443","endLine":401,"endColumn":32},{"ruleId":"440","severity":1,"message":"441","line":403,"column":35,"nodeType":"442","messageId":"443","endLine":403,"endColumn":37},{"ruleId":"440","severity":1,"message":"441","line":410,"column":29,"nodeType":"442","messageId":"443","endLine":410,"endColumn":31},{"ruleId":"444","severity":1,"message":"445","line":411,"column":41,"nodeType":"446","messageId":"447","endLine":411,"endColumn":43},{"ruleId":"440","severity":1,"message":"441","line":412,"column":30,"nodeType":"442","messageId":"443","endLine":412,"endColumn":32},{"ruleId":"444","severity":1,"message":"445","line":414,"column":47,"nodeType":"446","messageId":"447","endLine":414,"endColumn":49},{"ruleId":"440","severity":1,"message":"441","line":415,"column":29,"nodeType":"442","messageId":"443","endLine":415,"endColumn":31},{"ruleId":"444","severity":1,"message":"445","line":416,"column":49,"nodeType":"446","messageId":"447","endLine":416,"endColumn":51},{"ruleId":"440","severity":1,"message":"441","line":417,"column":39,"nodeType":"442","messageId":"443","endLine":417,"endColumn":41},{"ruleId":"440","severity":1,"message":"448","line":449,"column":30,"nodeType":"442","messageId":"443","endLine":449,"endColumn":32},{"ruleId":"440","severity":1,"message":"441","line":456,"column":31,"nodeType":"442","messageId":"443","endLine":456,"endColumn":33},{"ruleId":"440","severity":1,"message":"441","line":473,"column":31,"nodeType":"442","messageId":"443","endLine":473,"endColumn":33},{"ruleId":"444","severity":1,"message":"445","line":474,"column":47,"nodeType":"446","messageId":"447","endLine":474,"endColumn":49},{"ruleId":"440","severity":1,"message":"441","line":475,"column":36,"nodeType":"442","messageId":"443","endLine":475,"endColumn":38},{"ruleId":"444","severity":1,"message":"445","line":476,"column":52,"nodeType":"446","messageId":"447","endLine":476,"endColumn":54},{"ruleId":"440","severity":1,"message":"441","line":477,"column":41,"nodeType":"442","messageId":"443","endLine":477,"endColumn":43},{"ruleId":"440","severity":1,"message":"441","line":527,"column":26,"nodeType":"442","messageId":"443","endLine":527,"endColumn":28},{"ruleId":"444","severity":1,"message":"445","line":530,"column":38,"nodeType":"446","messageId":"447","endLine":530,"endColumn":40},{"ruleId":"440","severity":1,"message":"441","line":531,"column":26,"nodeType":"442","messageId":"443","endLine":531,"endColumn":28},{"ruleId":"444","severity":1,"message":"445","line":532,"column":40,"nodeType":"446","messageId":"447","endLine":532,"endColumn":42},{"ruleId":"440","severity":1,"message":"441","line":533,"column":31,"nodeType":"442","messageId":"443","endLine":533,"endColumn":33},{"ruleId":"440","severity":1,"message":"441","line":537,"column":33,"nodeType":"442","messageId":"443","endLine":537,"endColumn":35},{"ruleId":"444","severity":1,"message":"445","line":538,"column":36,"nodeType":"446","messageId":"447","endLine":538,"endColumn":38},{"ruleId":"444","severity":1,"message":"445","line":539,"column":41,"nodeType":"446","messageId":"447","endLine":539,"endColumn":43},{"ruleId":"440","severity":1,"message":"441","line":540,"column":33,"nodeType":"442","messageId":"443","endLine":540,"endColumn":35},{"ruleId":"440","severity":1,"message":"441","line":572,"column":17,"nodeType":"442","messageId":"443","endLine":572,"endColumn":19},{"ruleId":"440","severity":1,"message":"441","line":607,"column":27,"nodeType":"442","messageId":"443","endLine":607,"endColumn":29},{"ruleId":"440","severity":1,"message":"441","line":626,"column":27,"nodeType":"442","messageId":"443","endLine":626,"endColumn":29},{"ruleId":"440","severity":1,"message":"441","line":628,"column":32,"nodeType":"442","messageId":"443","endLine":628,"endColumn":34},{"ruleId":"440","severity":1,"message":"441","line":629,"column":35,"nodeType":"442","messageId":"443","endLine":629,"endColumn":37},{"ruleId":"440","severity":1,"message":"441","line":631,"column":39,"nodeType":"442","messageId":"443","endLine":631,"endColumn":41},{"ruleId":"440","severity":1,"message":"441","line":636,"column":43,"nodeType":"442","messageId":"443","endLine":636,"endColumn":45},{"ruleId":"444","severity":1,"message":"445","line":638,"column":51,"nodeType":"446","messageId":"447","endLine":638,"endColumn":53},{"ruleId":"440","severity":1,"message":"441","line":639,"column":33,"nodeType":"442","messageId":"443","endLine":639,"endColumn":35},{"ruleId":"444","severity":1,"message":"445","line":640,"column":53,"nodeType":"446","messageId":"447","endLine":640,"endColumn":55},{"ruleId":"440","severity":1,"message":"441","line":641,"column":43,"nodeType":"442","messageId":"443","endLine":641,"endColumn":45},{"ruleId":"440","severity":1,"message":"441","line":683,"column":25,"nodeType":"442","messageId":"443","endLine":683,"endColumn":27},{"ruleId":"440","severity":1,"message":"441","line":703,"column":27,"nodeType":"442","messageId":"443","endLine":703,"endColumn":29},{"ruleId":"440","severity":1,"message":"441","line":705,"column":32,"nodeType":"442","messageId":"443","endLine":705,"endColumn":34},{"ruleId":"440","severity":1,"message":"441","line":706,"column":35,"nodeType":"442","messageId":"443","endLine":706,"endColumn":37},{"ruleId":"440","severity":1,"message":"441","line":708,"column":39,"nodeType":"442","messageId":"443","endLine":708,"endColumn":41},{"ruleId":"440","severity":1,"message":"441","line":713,"column":43,"nodeType":"442","messageId":"443","endLine":713,"endColumn":45},{"ruleId":"444","severity":1,"message":"445","line":715,"column":51,"nodeType":"446","messageId":"447","endLine":715,"endColumn":53},{"ruleId":"440","severity":1,"message":"441","line":716,"column":33,"nodeType":"442","messageId":"443","endLine":716,"endColumn":35},{"ruleId":"444","severity":1,"message":"445","line":717,"column":53,"nodeType":"446","messageId":"447","endLine":717,"endColumn":55},{"ruleId":"440","severity":1,"message":"441","line":718,"column":43,"nodeType":"442","messageId":"443","endLine":718,"endColumn":45},{"ruleId":"440","severity":1,"message":"441","line":750,"column":23,"nodeType":"442","messageId":"443","endLine":750,"endColumn":25},{"ruleId":"440","severity":1,"message":"441","line":760,"column":25,"nodeType":"442","messageId":"443","endLine":760,"endColumn":27},{"ruleId":"440","severity":1,"message":"441","line":762,"column":32,"nodeType":"442","messageId":"443","endLine":762,"endColumn":34},{"ruleId":"440","severity":1,"message":"441","line":763,"column":32,"nodeType":"442","messageId":"443","endLine":763,"endColumn":34},{"ruleId":"440","severity":1,"message":"441","line":765,"column":37,"nodeType":"442","messageId":"443","endLine":765,"endColumn":39},{"ruleId":"440","severity":1,"message":"441","line":771,"column":39,"nodeType":"442","messageId":"443","endLine":771,"endColumn":41},{"ruleId":"444","severity":1,"message":"445","line":773,"column":49,"nodeType":"446","messageId":"447","endLine":773,"endColumn":51},{"ruleId":"440","severity":1,"message":"441","line":774,"column":31,"nodeType":"442","messageId":"443","endLine":774,"endColumn":33},{"ruleId":"444","severity":1,"message":"445","line":775,"column":49,"nodeType":"446","messageId":"447","endLine":775,"endColumn":51},{"ruleId":"440","severity":1,"message":"441","line":776,"column":39,"nodeType":"442","messageId":"443","endLine":776,"endColumn":41},{"ruleId":"449","severity":1,"message":"450","line":822,"column":6,"nodeType":"451","endLine":822,"endColumn":8,"suggestions":"452"},{"ruleId":"440","severity":1,"message":"441","line":1121,"column":19,"nodeType":"442","messageId":"443","endLine":1121,"endColumn":21},{"ruleId":"440","severity":1,"message":"441","line":1123,"column":26,"nodeType":"442","messageId":"443","endLine":1123,"endColumn":28},{"ruleId":"440","severity":1,"message":"441","line":1191,"column":19,"nodeType":"442","messageId":"443","endLine":1191,"endColumn":21},{"ruleId":"440","severity":1,"message":"441","line":1193,"column":26,"nodeType":"442","messageId":"443","endLine":1193,"endColumn":28},{"ruleId":"440","severity":1,"message":"441","line":1198,"column":19,"nodeType":"442","messageId":"443","endLine":1198,"endColumn":21},{"ruleId":"440","severity":1,"message":"441","line":1200,"column":26,"nodeType":"442","messageId":"443","endLine":1200,"endColumn":28},{"ruleId":"440","severity":1,"message":"441","line":1209,"column":50,"nodeType":"442","messageId":"443","endLine":1209,"endColumn":52},{"ruleId":"434","severity":1,"message":"453","line":1212,"column":7,"nodeType":"436","messageId":"437","endLine":1212,"endColumn":50},{"ruleId":"440","severity":1,"message":"441","line":1213,"column":44,"nodeType":"442","messageId":"443","endLine":1213,"endColumn":46},{"ruleId":"440","severity":1,"message":"441","line":1218,"column":47,"nodeType":"442","messageId":"443","endLine":1218,"endColumn":49},{"ruleId":"454","replacedBy":"455"},{"ruleId":"456","replacedBy":"457"},{"ruleId":"434","severity":1,"message":"458","line":2,"column":43,"nodeType":"436","messageId":"437","endLine":2,"endColumn":49},{"ruleId":"440","severity":1,"message":"441","line":110,"column":56,"nodeType":"442","messageId":"443","endLine":110,"endColumn":58},{"ruleId":"434","severity":1,"message":"459","line":234,"column":7,"nodeType":"436","messageId":"437","endLine":234,"endColumn":17},{"ruleId":"434","severity":1,"message":"460","line":1,"column":27,"nodeType":"436","messageId":"437","endLine":1,"endColumn":33},{"ruleId":"434","severity":1,"message":"461","line":1,"column":35,"nodeType":"436","messageId":"437","endLine":1,"endColumn":44},{"ruleId":"434","severity":1,"message":"462","line":7,"column":10,"nodeType":"436","messageId":"437","endLine":7,"endColumn":26},{"ruleId":"434","severity":1,"message":"463","line":2,"column":8,"nodeType":"436","messageId":"437","endLine":2,"endColumn":17},{"ruleId":"434","severity":1,"message":"464","line":2,"column":27,"nodeType":"436","messageId":"437","endLine":2,"endColumn":33},{"ruleId":"434","severity":1,"message":"465","line":2,"column":41,"nodeType":"436","messageId":"437","endLine":2,"endColumn":46},{"ruleId":"434","severity":1,"message":"466","line":2,"column":48,"nodeType":"436","messageId":"437","endLine":2,"endColumn":54},{"ruleId":"434","severity":1,"message":"467","line":14,"column":8,"nodeType":"436","messageId":"437","endLine":14,"endColumn":20},{"ruleId":"440","severity":1,"message":"441","line":85,"column":23,"nodeType":"442","messageId":"443","endLine":85,"endColumn":25},{"ruleId":"440","severity":1,"message":"441","line":88,"column":17,"nodeType":"442","messageId":"443","endLine":88,"endColumn":19},{"ruleId":"440","severity":1,"message":"441","line":97,"column":23,"nodeType":"442","messageId":"443","endLine":97,"endColumn":25},{"ruleId":"434","severity":1,"message":"468","line":2,"column":8,"nodeType":"436","messageId":"437","endLine":2,"endColumn":15},{"ruleId":"434","severity":1,"message":"469","line":2,"column":10,"nodeType":"436","messageId":"437","endLine":2,"endColumn":14},{"ruleId":"454","replacedBy":"470"},{"ruleId":"456","replacedBy":"471"},{"ruleId":"434","severity":1,"message":"472","line":4,"column":8,"nodeType":"436","messageId":"437","endLine":4,"endColumn":18},{"ruleId":"434","severity":1,"message":"473","line":13,"column":9,"nodeType":"436","messageId":"437","endLine":13,"endColumn":21},{"ruleId":"434","severity":1,"message":"474","line":1,"column":17,"nodeType":"436","messageId":"437","endLine":1,"endColumn":25},{"ruleId":"434","severity":1,"message":"461","line":1,"column":27,"nodeType":"436","messageId":"437","endLine":1,"endColumn":36},{"ruleId":"440","severity":1,"message":"448","line":20,"column":34,"nodeType":"442","messageId":"443","endLine":20,"endColumn":36},{"ruleId":"440","severity":1,"message":"448","line":47,"column":34,"nodeType":"442","messageId":"443","endLine":47,"endColumn":36},{"ruleId":"434","severity":1,"message":"460","line":1,"column":27,"nodeType":"436","messageId":"437","endLine":1,"endColumn":33},{"ruleId":"434","severity":1,"message":"461","line":1,"column":35,"nodeType":"436","messageId":"437","endLine":1,"endColumn":44},{"ruleId":"434","severity":1,"message":"475","line":2,"column":10,"nodeType":"436","messageId":"437","endLine":2,"endColumn":23},{"ruleId":"434","severity":1,"message":"476","line":3,"column":16,"nodeType":"436","messageId":"437","endLine":3,"endColumn":22},{"ruleId":"434","severity":1,"message":"477","line":10,"column":8,"nodeType":"436","messageId":"437","endLine":10,"endColumn":16},{"ruleId":"434","severity":1,"message":"476","line":11,"column":16,"nodeType":"436","messageId":"437","endLine":11,"endColumn":22},{"ruleId":"440","severity":1,"message":"441","line":24,"column":21,"nodeType":"442","messageId":"443","endLine":24,"endColumn":23},{"ruleId":"440","severity":1,"message":"441","line":35,"column":21,"nodeType":"442","messageId":"443","endLine":35,"endColumn":23},{"ruleId":"444","severity":1,"message":"445","line":36,"column":44,"nodeType":"446","messageId":"447","endLine":36,"endColumn":46},{"ruleId":"440","severity":1,"message":"441","line":37,"column":23,"nodeType":"442","messageId":"443","endLine":37,"endColumn":25},{"ruleId":"440","severity":1,"message":"441","line":57,"column":23,"nodeType":"442","messageId":"443","endLine":57,"endColumn":25},{"ruleId":"440","severity":1,"message":"441","line":79,"column":21,"nodeType":"442","messageId":"443","endLine":79,"endColumn":23},{"ruleId":"444","severity":1,"message":"445","line":80,"column":39,"nodeType":"446","messageId":"447","endLine":80,"endColumn":41},{"ruleId":"440","severity":1,"message":"441","line":81,"column":28,"nodeType":"442","messageId":"443","endLine":81,"endColumn":30},{"ruleId":"449","severity":1,"message":"478","line":98,"column":6,"nodeType":"451","endLine":98,"endColumn":8,"suggestions":"479"},{"ruleId":"434","severity":1,"message":"476","line":7,"column":16,"nodeType":"436","messageId":"437","endLine":7,"endColumn":22},{"ruleId":"434","severity":1,"message":"480","line":27,"column":9,"nodeType":"436","messageId":"437","endLine":27,"endColumn":19},{"ruleId":"440","severity":1,"message":"441","line":34,"column":21,"nodeType":"442","messageId":"443","endLine":34,"endColumn":23},{"ruleId":"440","severity":1,"message":"441","line":44,"column":25,"nodeType":"442","messageId":"443","endLine":44,"endColumn":27},{"ruleId":"440","severity":1,"message":"448","line":55,"column":25,"nodeType":"442","messageId":"443","endLine":55,"endColumn":27},{"ruleId":"440","severity":1,"message":"441","line":70,"column":23,"nodeType":"442","messageId":"443","endLine":70,"endColumn":25},{"ruleId":"444","severity":1,"message":"445","line":71,"column":49,"nodeType":"446","messageId":"447","endLine":71,"endColumn":51},{"ruleId":"440","severity":1,"message":"441","line":72,"column":25,"nodeType":"442","messageId":"443","endLine":72,"endColumn":27},{"ruleId":"440","severity":1,"message":"441","line":75,"column":29,"nodeType":"442","messageId":"443","endLine":75,"endColumn":31},{"ruleId":"440","severity":1,"message":"441","line":94,"column":21,"nodeType":"442","messageId":"443","endLine":94,"endColumn":23},{"ruleId":"440","severity":1,"message":"441","line":96,"column":23,"nodeType":"442","messageId":"443","endLine":96,"endColumn":25},{"ruleId":"440","severity":1,"message":"441","line":98,"column":27,"nodeType":"442","messageId":"443","endLine":98,"endColumn":29},{"ruleId":"440","severity":1,"message":"441","line":101,"column":27,"nodeType":"442","messageId":"443","endLine":101,"endColumn":29},{"ruleId":"440","severity":1,"message":"441","line":117,"column":48,"nodeType":"442","messageId":"443","endLine":117,"endColumn":50},{"ruleId":"440","severity":1,"message":"441","line":130,"column":28,"nodeType":"442","messageId":"443","endLine":130,"endColumn":30},{"ruleId":"440","severity":1,"message":"441","line":146,"column":23,"nodeType":"442","messageId":"443","endLine":146,"endColumn":25},{"ruleId":"440","severity":1,"message":"441","line":148,"column":25,"nodeType":"442","messageId":"443","endLine":148,"endColumn":27},{"ruleId":"440","severity":1,"message":"441","line":150,"column":27,"nodeType":"442","messageId":"443","endLine":150,"endColumn":29},{"ruleId":"440","severity":1,"message":"441","line":182,"column":21,"nodeType":"442","messageId":"443","endLine":182,"endColumn":23},{"ruleId":"444","severity":1,"message":"445","line":183,"column":44,"nodeType":"446","messageId":"447","endLine":183,"endColumn":46},{"ruleId":"440","severity":1,"message":"441","line":184,"column":23,"nodeType":"442","messageId":"443","endLine":184,"endColumn":25},{"ruleId":"444","severity":1,"message":"445","line":185,"column":43,"nodeType":"446","messageId":"447","endLine":185,"endColumn":45},{"ruleId":"440","severity":1,"message":"441","line":186,"column":25,"nodeType":"442","messageId":"443","endLine":186,"endColumn":27},{"ruleId":"440","severity":1,"message":"441","line":213,"column":21,"nodeType":"442","messageId":"443","endLine":213,"endColumn":23},{"ruleId":"444","severity":1,"message":"445","line":214,"column":44,"nodeType":"446","messageId":"447","endLine":214,"endColumn":46},{"ruleId":"440","severity":1,"message":"441","line":215,"column":23,"nodeType":"442","messageId":"443","endLine":215,"endColumn":25},{"ruleId":"444","severity":1,"message":"445","line":216,"column":43,"nodeType":"446","messageId":"447","endLine":216,"endColumn":45},{"ruleId":"440","severity":1,"message":"441","line":217,"column":25,"nodeType":"442","messageId":"443","endLine":217,"endColumn":27},{"ruleId":"440","severity":1,"message":"441","line":245,"column":21,"nodeType":"442","messageId":"443","endLine":245,"endColumn":23},{"ruleId":"444","severity":1,"message":"445","line":246,"column":39,"nodeType":"446","messageId":"447","endLine":246,"endColumn":41},{"ruleId":"440","severity":1,"message":"441","line":247,"column":28,"nodeType":"442","messageId":"443","endLine":247,"endColumn":30},{"ruleId":"444","severity":1,"message":"445","line":248,"column":45,"nodeType":"446","messageId":"447","endLine":248,"endColumn":47},{"ruleId":"440","severity":1,"message":"441","line":249,"column":35,"nodeType":"442","messageId":"443","endLine":249,"endColumn":37},{"ruleId":"440","severity":1,"message":"441","line":268,"column":21,"nodeType":"442","messageId":"443","endLine":268,"endColumn":23},{"ruleId":"449","severity":1,"message":"478","line":284,"column":6,"nodeType":"451","endLine":284,"endColumn":23,"suggestions":"481"},{"ruleId":"444","severity":1,"message":"482","line":297,"column":70,"nodeType":"446","messageId":"483","endLine":297,"endColumn":72},{"ruleId":"484","severity":1,"message":"485","line":305,"column":23,"nodeType":"486","endLine":305,"endColumn":74},{"ruleId":"434","severity":1,"message":"487","line":2,"column":10,"nodeType":"436","messageId":"437","endLine":2,"endColumn":20},{"ruleId":"434","severity":1,"message":"488","line":3,"column":10,"nodeType":"436","messageId":"437","endLine":3,"endColumn":15},{"ruleId":"434","severity":1,"message":"489","line":5,"column":10,"nodeType":"436","messageId":"437","endLine":5,"endColumn":20},{"ruleId":"434","severity":1,"message":"460","line":1,"column":39,"nodeType":"436","messageId":"437","endLine":1,"endColumn":45},{"ruleId":"434","severity":1,"message":"461","line":1,"column":47,"nodeType":"436","messageId":"437","endLine":1,"endColumn":56},{"ruleId":"434","severity":1,"message":"490","line":3,"column":59,"nodeType":"436","messageId":"437","endLine":3,"endColumn":75},{"ruleId":"440","severity":1,"message":"441","line":52,"column":59,"nodeType":"442","messageId":"443","endLine":52,"endColumn":61},{"ruleId":"440","severity":1,"message":"441","line":60,"column":19,"nodeType":"442","messageId":"443","endLine":60,"endColumn":21},{"ruleId":"440","severity":1,"message":"441","line":84,"column":21,"nodeType":"442","messageId":"443","endLine":84,"endColumn":23},{"ruleId":"440","severity":1,"message":"441","line":101,"column":21,"nodeType":"442","messageId":"443","endLine":101,"endColumn":23},{"ruleId":"449","severity":1,"message":"491","line":111,"column":6,"nodeType":"451","endLine":111,"endColumn":35,"suggestions":"492"},{"ruleId":"449","severity":1,"message":"493","line":111,"column":7,"nodeType":"494","endLine":111,"endColumn":34},{"ruleId":"440","severity":1,"message":"441","line":224,"column":19,"nodeType":"442","messageId":"443","endLine":224,"endColumn":21},{"ruleId":"440","severity":1,"message":"441","line":250,"column":19,"nodeType":"442","messageId":"443","endLine":250,"endColumn":21},{"ruleId":"440","severity":1,"message":"441","line":273,"column":19,"nodeType":"442","messageId":"443","endLine":273,"endColumn":21},{"ruleId":"434","severity":1,"message":"495","line":28,"column":25,"nodeType":"436","messageId":"437","endLine":28,"endColumn":39},{"ruleId":"434","severity":1,"message":"496","line":2,"column":31,"nodeType":"436","messageId":"437","endLine":2,"endColumn":38},{"ruleId":"434","severity":1,"message":"497","line":9,"column":7,"nodeType":"436","messageId":"437","endLine":9,"endColumn":20},{"ruleId":"434","severity":1,"message":"498","line":24,"column":7,"nodeType":"436","messageId":"437","endLine":24,"endColumn":13},{"ruleId":"434","severity":1,"message":"499","line":26,"column":9,"nodeType":"436","messageId":"437","endLine":26,"endColumn":16},{"ruleId":"434","severity":1,"message":"487","line":2,"column":10,"nodeType":"436","messageId":"437","endLine":2,"endColumn":20},{"ruleId":"434","severity":1,"message":"500","line":1,"column":36,"nodeType":"436","messageId":"437","endLine":1,"endColumn":39},{"ruleId":"434","severity":1,"message":"501","line":7,"column":10,"nodeType":"436","messageId":"437","endLine":7,"endColumn":21},{"ruleId":"434","severity":1,"message":"502","line":9,"column":10,"nodeType":"436","messageId":"437","endLine":9,"endColumn":25},{"ruleId":"449","severity":1,"message":"503","line":41,"column":6,"nodeType":"451","endLine":41,"endColumn":14,"suggestions":"504"},{"ruleId":"505","severity":1,"message":"506","line":62,"column":13,"nodeType":"486","endLine":62,"endColumn":45},{"ruleId":"434","severity":1,"message":"507","line":5,"column":10,"nodeType":"436","messageId":"437","endLine":5,"endColumn":23},{"ruleId":"440","severity":1,"message":"441","line":18,"column":21,"nodeType":"442","messageId":"443","endLine":18,"endColumn":23},{"ruleId":"440","severity":1,"message":"441","line":35,"column":23,"nodeType":"442","messageId":"443","endLine":35,"endColumn":25},{"ruleId":"444","severity":1,"message":"445","line":36,"column":46,"nodeType":"446","messageId":"447","endLine":36,"endColumn":48},{"ruleId":"440","severity":1,"message":"441","line":37,"column":25,"nodeType":"442","messageId":"443","endLine":37,"endColumn":27},{"ruleId":"440","severity":1,"message":"441","line":59,"column":21,"nodeType":"442","messageId":"443","endLine":59,"endColumn":23},{"ruleId":"484","severity":1,"message":"485","line":82,"column":11,"nodeType":"486","endLine":82,"endColumn":58},"@typescript-eslint/no-unused-vars","'Image' is defined but never used.","Identifier","unusedVar","'isPublishing' is assigned a value but never used.","'setState' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Expected '!==' and instead saw '!='.","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'props.match.params.id' and 'setBuilderState'. Either include them or remove the dependency array.","ArrayExpression",["508"],"'getMessageIndexWhichHasNextOfGivenMessageId' is assigned a value but never used.","no-native-reassign",["509"],"no-negated-in-lhs",["510"],"'Circle' is defined but never used.","'onTouchEnd' is assigned a value but never used.","'useRef' is defined but never used.","'useEffect' is defined but never used.","'RegistrationData' is defined but never used.","'AppLayout' is defined but never used.","'Router' is defined but never used.","'Route' is defined but never used.","'Switch' is defined but never used.","'ConfigureBot' is defined but never used.","'Toolbar' is defined but never used.","'grey' is defined but never used.",["509"],["510"],"'Breadcrumb' is defined but never used.","'sidebarState' is assigned a value but never used.","'useState' is defined but never used.","'FlowStateType' is defined but never used.","'uuidv4' is defined but never used.","'feature2' is defined but never used.","React Hook useEffect has a missing dependency: 'register'. Either include it or remove the dependency array.",["511"],"'headingRef' is assigned a value but never used.",["512"],"Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'darkerGrey' is defined but never used.","'media' is defined but never used.","'AuthButton' is defined but never used.","'BtnEditorWrapper' is defined but never used.","React Hook React.useEffect has missing dependencies: 'builderState', 'objIndex', and 'setValue'. Either include them or remove the dependency array.",["513"],"React Hook React.useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","MemberExpression","'onRequestClose' is assigned a value but never used.","'Tooltip' is defined but never used.","'CustomTooltip' is assigned a value but never used.","'COLORS' is assigned a value but never used.","'pieData' is assigned a value but never used.","'Ref' is defined but never used.","'TiFlowMerge' is defined but never used.","'IoSettingsSharp' is defined but never used.","React Hook useEffect has a missing dependency: 'handleSidebarState'. Either include it or remove the dependency array. If 'handleSidebarState' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["514"],"jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","'AddTextButton' is defined but never used.",{"desc":"515","fix":"516"},"no-global-assign","no-unsafe-negation",{"desc":"517","fix":"518"},{"desc":"519","fix":"520"},{"desc":"521","fix":"522"},{"desc":"523","fix":"524"},"Update the dependencies array to be: [props.match.params.id, setBuilderState]",{"range":"525","text":"526"},"Update the dependencies array to be: [register]",{"range":"527","text":"528"},"Update the dependencies array to be: [activeCardIndex, register]",{"range":"529","text":"530"},"Update the dependencies array to be: [builderState, objIndex, setValue]",{"range":"531","text":"532"},"Update the dependencies array to be: [handleSidebarState, isOpen]",{"range":"533","text":"534"},[25949,25951],"[props.match.params.id, setBuilderState]",[3089,3091],"[register]",[8845,8862],"[activeCardIndex, register]",[3358,3387],"[builderState, objIndex, setValue]",[1369,1377],"[handleSidebarState, isOpen]"]