[{"/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/main/Flows/builder.tsx":"1","/home/rabinson/Freelancing/ShipboardBot/frontend/src/apis/bots.ts":"2","/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/main/Flows/index.tsx":"3","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Flows/CreateModal.tsx":"4","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Flows/EditModal.tsx":"5","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Bots/Configure/Messenger.tsx":"6","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Bots/Configure/Slack.tsx":"7","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Flows/DeleteModal.tsx":"8","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Bots/Configure/Telegram.tsx":"9"},{"size":29509,"mtime":1612884490775,"results":"10","hashOfConfig":"11"},{"size":1387,"mtime":1612885626225,"results":"12","hashOfConfig":"11"},{"size":8928,"mtime":1612887533074,"results":"13","hashOfConfig":"11"},{"size":2347,"mtime":1611495697651,"results":"14","hashOfConfig":"11"},{"size":2316,"mtime":1612681211971,"results":"15","hashOfConfig":"11"},{"size":6221,"mtime":1612887705333,"results":"16","hashOfConfig":"11"},{"size":4631,"mtime":1612887686855,"results":"17","hashOfConfig":"11"},{"size":1488,"mtime":1611506630557,"results":"18","hashOfConfig":"11"},{"size":4972,"mtime":1612887697390,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":46,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"v8ty68",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/main/Flows/builder.tsx",["42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/apis/bots.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/main/Flows/index.tsx",["88","89","90","91","92"],"import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { GridWrapper } from '../../../components/common/grid';\nimport { PrimaryButton } from './../../../components/common/buttons';\nimport { HiDotsVertical } from 'react-icons/hi';\nimport { DropdownWrapper } from '../../../components/common/Dropdown/styles';\nimport { useModal } from '../../../services/Modal/ModalProvider';\nimport { getFlows } from '../../../apis/flows';\nimport {withRouter} from 'react-router-dom'\nimport FlowCreateModal from '../../../components/dashboard/Flows/CreateModal';\nimport FlowEditModal from '../../../components/dashboard/Flows/EditModal';\nimport FlowDeleteModal from '../../../components/dashboard/Flows/DeleteModal';\nimport Pagination from '../../../components/common/Pagination/index';\nimport flowCover from '../../../assets/images/flow-cover.png';\nimport { PlatformWrapper } from './styles';\nimport messengerLogo from '../../../assets/images/platforms/messenger.png';\nimport telegramLogo from '../../../assets/images/platforms/telegram.png';\nimport slackLogo from '../../../assets/images/platforms/slack.png';\nimport MessengerConfigure from '../../../components/dashboard/Bots/Configure/Messenger';\nimport TelegramConfigure from '../../../components/dashboard/Bots/Configure/Telegram';\nimport SlackConfigure from '../../../components/dashboard/Bots/Configure/Slack';\nimport PuffLoader from \"react-spinners/PuffLoader\";\nimport { getPlatformConfigurations } from '../../../apis/bots';\nimport { toast } from 'react-toastify';\n\n\ntype FlowType = {\n  id: string;\n  name: string;\n  last_modified: string;\n};\n\nconst Flows = (props) => {\n  const { showModal, hideModal } = useModal();\n  const [flows, setFlows] = useState<Array<FlowType>>();\n  const [pageNumber, setPageNumber] = useState(1);\n  const [isLoading, setIsLoading] = useState(true);\n  const [lastPage, setLastPage] = useState(1);\n  const [messengerConfigurations, setMessengerConfigurations] = useState(null);\n  const [telegramConfigurations, setTelegramConfigurations] = useState(null);\n  const [slackConfigurations, setSlackConfigurations] = useState(null);\n\n  const botId = props.match.params.id;\n\n  const getFlowsData = (bot:string, pageNumber: number) => {\n    getFlows(bot, pageNumber)\n      .then((response) => {\n        setFlows(response.data);\n        setPageNumber(response.meta.current_page);\n        setLastPage(response.meta.last_page);\n      })\n      .catch((err) => {\n        console.log(\"Something went wrong\");\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  };\n  /**\n   * Flow Operations Starts\n   */\n  const handleCreateOpen = (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ) => {\n    showModal(() => (\n      <FlowCreateModal bot={botId} hideModal={hideModal} handleCreateFlow={ handleCreateFlow } />\n    ));\n  };\n\n  const handleEditOpen = (data: FlowType) => {\n    showModal(() => (\n      <FlowEditModal hideModal={hideModal} flow={data} handleEditFlow={ handleEditFlow } />\n    ));\n  };\n\n  const handleDeleteConfirmation = (data: FlowType) => {\n    showModal(() => (\n      <FlowDeleteModal hideModal={hideModal} flow={data} handleDeleteFlow={ handleDeleteFlow }/>\n    ));\n  };\n\n  const handlePageChange = (pageNumber: number) => {\n    setPageNumber(pageNumber);\n  };\n\n  const handleCreateFlow = (newFlow: FlowType) => { \n    const newFlowList = flows.concat(newFlow);\n    setFlows(newFlowList)\n  }\n\n  const handleEditFlow = (data) => {\n    const flowId = flows.findIndex(\n      (obj) => obj.id == data.id\n    );\n    setFlows(flows.map((item, index) => {\n      if (index == flowId) {\n        item.name = data.name\n      }\n      return item;\n    }));\n  }\n\n  const handleDeleteFlow = (id) => {\n    const flowId = flows.findIndex(\n      (obj) => obj.id == id\n    );\n    flows.splice(flowId, 1);\n  }\n  /**\n   * Flow Operations Ends\n   */\n\n  /**\n   * Configure Operations Starts\n   */\n\n  const handleMessengerConfigurationUpdate = (config) => {\n    setMessengerConfigurations(config);\n  }\n\n  const handleTelegramConfigurationUpdate = (config) => {\n    setTelegramConfigurations(config);\n  }\n\n  const handleSlackConfigurationUpdate = (config) => {\n    setSlackConfigurations(config);\n  }\n\n  const openMessengerConfigure = () => {\n    showModal(() => (\n      <MessengerConfigure hideModal={hideModal} botId={botId} configuration={ messengerConfigurations } changeConfiguration={handleMessengerConfigurationUpdate} />\n    ));\n  }\n\n  const openTelegramConfigure = () => {\n    showModal(() => (\n      <TelegramConfigure hideModal={hideModal} botId={botId} configuration={ telegramConfigurations } changeConfiguration={handleTelegramConfigurationUpdate}/>\n    ));\n  }\n\n  const openSlackConfigure = () => {\n    showModal(() => (\n      <SlackConfigure hideModal={hideModal} botId={botId} configuration={ slackConfigurations} changeConfiguration={handleSlackConfigurationUpdate}/>\n    ));\n  }\n  /**\n   * Configure Operations Ends\n   */\n  \n  \n  useEffect(() => {\n    getFlowsData(botId, pageNumber);\n  }, [pageNumber, lastPage]);\n\n  useEffect(() => {\n    getPlatformConfigurations(botId)\n      .then((response) => {\n        \n        var indexOfMessengerConfig = response.data.findIndex(config => config.platform === 'messenger');\n        setMessengerConfigurations(response.data[indexOfMessengerConfig]);\n\n        var indexOfTelegramConfig = response.data.findIndex(config => config.platform === 'telegram');\n        setTelegramConfigurations(response.data[indexOfTelegramConfig]);\n\n        var indexOfSlackConfig = response.data.findIndex(config => config.platform === 'slack');\n        setSlackConfigurations(response.data[indexOfSlackConfig]);\n      })\n      .catch((err) => toast.error(\"Something went wrong\"));    \n  }, [])\n\n  if (isLoading) {\n    return (\n      <div className=\"loader-wrapper\">\n          <PuffLoader color={' #5850EC'}  size={75} />\n      </div>\n    );\n  } else {\n    return (\n      <React.Fragment>\n        <div className=\"page-header\">\n          <h1 className=\"main-heading\">Bot Details</h1>\n            <PrimaryButton onClick={handleCreateOpen}>Add Flow</PrimaryButton>\n          </div>\n          <PlatformWrapper>\n            <div className=\"platform_btn\" onClick={openMessengerConfigure}>\n              <img src={messengerLogo} alt=\"Messenger Logo\" />\n              <p>Messenger</p>\n            </div>\n            <div className=\"platform_btn\" onClick={openTelegramConfigure}>\n              <img src={telegramLogo} alt=\"Telegram Logo\" />\n              <p>Telegram</p>\n            </div>\n            <div className=\"platform_btn\" onClick={openSlackConfigure}>\n              <img src={slackLogo} alt=\"Slack Logo\" />\n              <p>Slack</p>\n            </div>\n          </PlatformWrapper>\n          <GridWrapper>\n            <div className=\"grid-row\">\n              {flows && flows.map((data: FlowType) => {\n                return (\n                  <React.Fragment key={data.id}>\n                    <Link to={'flow/' + data.id}>\n                      <div className=\"grid-item\">\n                        <div className=\"grid-item-wrapper\">\n                          <div className=\"grid-item-container\">\n                            <div className=\"image\">\n                              <img src={flowCover} alt=\"Flow Cover\" />\n                            </div>\n                            <div className=\"tag\">\n                              <p>{data.name}</p>\n                              <DropdownWrapper>\n                                <label className=\"dropbtn\">\n                                  <HiDotsVertical />\n                                </label>\n                                <div className=\"dropdown-content\">\n                                  <p\n                                    onClick={(e) => {\n                                      e.preventDefault();\n                                      handleEditOpen(data);\n                                    }}>\n                                    Edit\n                                  </p>\n                                  <p\n                                    onClick={(e) => {\n                                      e.preventDefault();\n                                      handleDeleteConfirmation(data);\n                                    }}>\n                                    Delete\n                                  </p>\n                                </div>\n                              </DropdownWrapper>\n                            </div>           \n                        </div>\n                      </div>\n                    </div>\n                    </Link>\n                  </React.Fragment>\n                );\n              })}\n          </div>\n        </GridWrapper>\n    \n        <Pagination\n          activePage={pageNumber}\n          total={lastPage}\n          onChange={handlePageChange}\n        />\n      </React.Fragment>\n    );\n  }\n};\n\nexport default withRouter(Flows);\n","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Flows/CreateModal.tsx",["93","94"],"import React, { useState, useRef, useEffect } from 'react';\nimport { FormHeader } from '../../common/typography';\nimport { InputField } from '../../common/form';\nimport { FormButton } from '../../common/buttons';\nimport { useForm } from \"react-hook-form\";\nimport { saveFlow } from './../../../apis/flows';\nimport { toast } from 'react-toastify';\n\nconst FlowCreateModal = ({bot, hideModal, handleCreateFlow}) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const { register, handleSubmit, errors, setError } = useForm();  \n\n  const onSubmit = data => {\n    setIsLoading(true);\n    saveFlow({ name: data.name, bot: bot })\n      .then((response) => {\n        hideModal();\n        toast.success(response.message);\n        handleCreateFlow(response.data)\n      }).catch((err) => { \n        if (err.response.status === 422) {\n          if (err.response.data.errors.name) {\n            setError('name', {\n              type: 'server',\n              message: err.response.data.errors.name[0]\n            })\n          } \n        } else {\n          toast.error('Something went wrong')\n        }\n      }).finally(() => { \n        setIsLoading(false);\n      })\n  }\n\n  return (\n    <React.Fragment>\n      <div className=\"modal-body\">\n        <button className=\"modal-exit\" onClick={hideModal}></button>\n        <div className=\"modal-title\">\n          <FormHeader>Create Flow</FormHeader>\n        </div>\n        <div className=\"modal-content\">\n          <form className=\"bot-create-form\" onSubmit={handleSubmit(onSubmit)}>\n            <InputField\n              isError={!!errors.name}\n              name=\"name\"\n              placeholder=\"Enter flow name\"\n              ref={register({required: true, minLength: 3})}\n            />\n            {errors.name && errors.name.type === 'required' && (<p className=\"form-error\">This field is required</p>)}\n            {errors.name && errors.name.type === 'minLength' && (<p className=\"form-error\">This field is required min length of 3</p>)}\n            {errors.name && errors.name.type === 'server' && (<p className=\"form-error\">{ errors.name.message}</p>)}\n\n            <FormButton type=\"submit\" disabled={isLoading}>\n              {isLoading ? 'Loading...' : 'Save'}\n            </FormButton>\n          </form>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default FlowCreateModal;\n","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Flows/EditModal.tsx",["95","96"],"import React, { useState, useRef, useEffect } from 'react';\nimport { FormHeader } from '../../common/typography';\nimport { InputField } from '../../common/form';\nimport { FormButton } from '../../common/buttons';\nimport { useForm } from \"react-hook-form\";\nimport { updateFlow } from './../../../apis/flows';\nimport { toast } from 'react-toastify';\n\nconst FlowCreateModal = ({flow, hideModal, handleEditFlow}) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const { register, handleSubmit, errors, setError } = useForm();  \n\n  const onSubmit = data => {\n    updateFlow({ name: data.name }, flow.id)\n      .then((response) => {\n        hideModal();\n        toast.success(response.message);\n        handleEditFlow(response.data)\n      }).catch((err) => { \n        if (err.response.status === 422) {\n          if (err.response.data.errors.name) {\n            setError('name', {\n              type: 'server',\n              message: err.response.data.errors.name[0]\n            })\n          } \n        } else {\n          toast.error('Something went wrong')\n        }\n      }).finally(() => { \n        setIsLoading(false);\n      })\n  }\n\n  return (\n    <React.Fragment>\n      <div className=\"modal-body\">\n        <button className=\"modal-exit\" onClick={hideModal}></button>\n        <div className=\"modal-title\">\n          <FormHeader>Edit Flow</FormHeader>\n        </div>\n        <div className=\"modal-content\">\n          <form className=\"bot-create-form\" onSubmit={handleSubmit(onSubmit)}>\n            <InputField\n              isError={!!errors.name}\n              defaultValue={flow.name}\n              name=\"name\"\n              ref={register({required: true, minLength: 3})}\n            />\n            {errors.name && errors.name.type === 'required' && (<p className=\"form-error\">This field is required</p>)}\n            {errors.name && errors.name.type === 'minLength' && (<p className=\"form-error\">This field is required min length of 3</p>)}\n            {errors.name && errors.name.type === 'server' && (<p className=\"form-error\">{ errors.name.message}</p>)}\n\n            <FormButton type=\"submit\" disabled={isLoading}>\n              {isLoading ? 'Loading...' : 'Save'}\n            </FormButton>\n          </form>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default FlowCreateModal;\n",["97","98"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Bots/Configure/Messenger.tsx",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Bots/Configure/Slack.tsx",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Flows/DeleteModal.tsx",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Bots/Configure/Telegram.tsx",[],{"ruleId":"99","severity":1,"message":"100","line":4,"column":30,"nodeType":"101","messageId":"102","endLine":4,"endColumn":35},{"ruleId":"99","severity":1,"message":"103","line":44,"column":17,"nodeType":"101","messageId":"102","endLine":44,"endColumn":25},{"ruleId":"104","severity":1,"message":"105","line":54,"column":64,"nodeType":"106","messageId":"107","endLine":54,"endColumn":66},{"ruleId":"104","severity":1,"message":"105","line":55,"column":21,"nodeType":"106","messageId":"107","endLine":55,"endColumn":23},{"ruleId":"104","severity":1,"message":"105","line":181,"column":21,"nodeType":"106","messageId":"107","endLine":181,"endColumn":23},{"ruleId":"104","severity":1,"message":"105","line":184,"column":21,"nodeType":"106","messageId":"107","endLine":184,"endColumn":23},{"ruleId":"104","severity":1,"message":"105","line":193,"column":21,"nodeType":"106","messageId":"107","endLine":193,"endColumn":23},{"ruleId":"104","severity":1,"message":"105","line":207,"column":21,"nodeType":"106","messageId":"107","endLine":207,"endColumn":23},{"ruleId":"104","severity":1,"message":"105","line":210,"column":21,"nodeType":"106","messageId":"107","endLine":210,"endColumn":23},{"ruleId":"104","severity":1,"message":"105","line":219,"column":21,"nodeType":"106","messageId":"107","endLine":219,"endColumn":23},{"ruleId":"104","severity":1,"message":"105","line":231,"column":19,"nodeType":"106","messageId":"107","endLine":231,"endColumn":21},{"ruleId":"104","severity":1,"message":"105","line":248,"column":23,"nodeType":"106","messageId":"107","endLine":248,"endColumn":25},{"ruleId":"104","severity":1,"message":"105","line":268,"column":23,"nodeType":"106","messageId":"107","endLine":268,"endColumn":25},{"ruleId":"104","severity":1,"message":"105","line":270,"column":28,"nodeType":"106","messageId":"107","endLine":270,"endColumn":30},{"ruleId":"104","severity":1,"message":"105","line":272,"column":33,"nodeType":"106","messageId":"107","endLine":272,"endColumn":35},{"ruleId":"104","severity":1,"message":"108","line":303,"column":30,"nodeType":"106","messageId":"107","endLine":303,"endColumn":32},{"ruleId":"104","severity":1,"message":"105","line":310,"column":31,"nodeType":"106","messageId":"107","endLine":310,"endColumn":33},{"ruleId":"104","severity":1,"message":"105","line":327,"column":31,"nodeType":"106","messageId":"107","endLine":327,"endColumn":33},{"ruleId":"109","severity":1,"message":"110","line":328,"column":47,"nodeType":"111","messageId":"112","endLine":328,"endColumn":49},{"ruleId":"104","severity":1,"message":"105","line":329,"column":36,"nodeType":"106","messageId":"107","endLine":329,"endColumn":38},{"ruleId":"109","severity":1,"message":"110","line":330,"column":52,"nodeType":"111","messageId":"112","endLine":330,"endColumn":54},{"ruleId":"104","severity":1,"message":"105","line":331,"column":41,"nodeType":"106","messageId":"107","endLine":331,"endColumn":43},{"ruleId":"104","severity":1,"message":"105","line":380,"column":19,"nodeType":"106","messageId":"107","endLine":380,"endColumn":21},{"ruleId":"104","severity":1,"message":"105","line":407,"column":17,"nodeType":"106","messageId":"107","endLine":407,"endColumn":19},{"ruleId":"104","severity":1,"message":"105","line":441,"column":27,"nodeType":"106","messageId":"107","endLine":441,"endColumn":29},{"ruleId":"104","severity":1,"message":"105","line":458,"column":27,"nodeType":"106","messageId":"107","endLine":458,"endColumn":29},{"ruleId":"104","severity":1,"message":"105","line":460,"column":32,"nodeType":"106","messageId":"107","endLine":460,"endColumn":34},{"ruleId":"104","severity":1,"message":"105","line":462,"column":37,"nodeType":"106","messageId":"107","endLine":462,"endColumn":39},{"ruleId":"104","severity":1,"message":"105","line":500,"column":25,"nodeType":"106","messageId":"107","endLine":500,"endColumn":27},{"ruleId":"104","severity":1,"message":"105","line":518,"column":27,"nodeType":"106","messageId":"107","endLine":518,"endColumn":29},{"ruleId":"104","severity":1,"message":"105","line":520,"column":32,"nodeType":"106","messageId":"107","endLine":520,"endColumn":34},{"ruleId":"104","severity":1,"message":"105","line":522,"column":37,"nodeType":"106","messageId":"107","endLine":522,"endColumn":39},{"ruleId":"104","severity":1,"message":"105","line":551,"column":23,"nodeType":"106","messageId":"107","endLine":551,"endColumn":25},{"ruleId":"104","severity":1,"message":"105","line":561,"column":25,"nodeType":"106","messageId":"107","endLine":561,"endColumn":27},{"ruleId":"104","severity":1,"message":"105","line":563,"column":30,"nodeType":"106","messageId":"107","endLine":563,"endColumn":32},{"ruleId":"104","severity":1,"message":"105","line":565,"column":35,"nodeType":"106","messageId":"107","endLine":565,"endColumn":37},{"ruleId":"113","severity":1,"message":"114","line":600,"column":6,"nodeType":"115","endLine":600,"endColumn":8,"suggestions":"116"},{"ruleId":"104","severity":1,"message":"105","line":899,"column":19,"nodeType":"106","messageId":"107","endLine":899,"endColumn":21},{"ruleId":"104","severity":1,"message":"105","line":901,"column":26,"nodeType":"106","messageId":"107","endLine":901,"endColumn":28},{"ruleId":"104","severity":1,"message":"105","line":965,"column":19,"nodeType":"106","messageId":"107","endLine":965,"endColumn":21},{"ruleId":"104","severity":1,"message":"105","line":967,"column":26,"nodeType":"106","messageId":"107","endLine":967,"endColumn":28},{"ruleId":"104","severity":1,"message":"105","line":972,"column":19,"nodeType":"106","messageId":"107","endLine":972,"endColumn":21},{"ruleId":"104","severity":1,"message":"105","line":974,"column":26,"nodeType":"106","messageId":"107","endLine":974,"endColumn":28},{"ruleId":"104","severity":1,"message":"105","line":983,"column":50,"nodeType":"106","messageId":"107","endLine":983,"endColumn":52},{"ruleId":"104","severity":1,"message":"105","line":987,"column":44,"nodeType":"106","messageId":"107","endLine":987,"endColumn":46},{"ruleId":"104","severity":1,"message":"105","line":992,"column":47,"nodeType":"106","messageId":"107","endLine":992,"endColumn":49},{"ruleId":"104","severity":1,"message":"105","line":93,"column":23,"nodeType":"106","messageId":"107","endLine":93,"endColumn":25},{"ruleId":"104","severity":1,"message":"105","line":96,"column":17,"nodeType":"106","messageId":"107","endLine":96,"endColumn":19},{"ruleId":"104","severity":1,"message":"105","line":105,"column":23,"nodeType":"106","messageId":"107","endLine":105,"endColumn":25},{"ruleId":"113","severity":1,"message":"117","line":153,"column":6,"nodeType":"115","endLine":153,"endColumn":28,"suggestions":"118"},{"ruleId":"113","severity":1,"message":"117","line":169,"column":6,"nodeType":"115","endLine":169,"endColumn":8,"suggestions":"119"},{"ruleId":"99","severity":1,"message":"120","line":1,"column":27,"nodeType":"101","messageId":"102","endLine":1,"endColumn":33},{"ruleId":"99","severity":1,"message":"121","line":1,"column":35,"nodeType":"101","messageId":"102","endLine":1,"endColumn":44},{"ruleId":"99","severity":1,"message":"120","line":1,"column":27,"nodeType":"101","messageId":"102","endLine":1,"endColumn":33},{"ruleId":"99","severity":1,"message":"121","line":1,"column":35,"nodeType":"101","messageId":"102","endLine":1,"endColumn":44},{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","replacedBy":"125"},"@typescript-eslint/no-unused-vars","'Image' is defined but never used.","Identifier","unusedVar","'setState' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'props.match.params.id' and 'setBuilderState'. Either include them or remove the dependency array.","ArrayExpression",["126"],"React Hook useEffect has a missing dependency: 'botId'. Either include it or remove the dependency array.",["127"],["128"],"'useRef' is defined but never used.","'useEffect' is defined but never used.","no-native-reassign",["129"],"no-negated-in-lhs",["130"],{"desc":"131","fix":"132"},{"desc":"133","fix":"134"},{"desc":"135","fix":"136"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [props.match.params.id, setBuilderState]",{"range":"137","text":"138"},"Update the dependencies array to be: [pageNumber, lastPage, botId]",{"range":"139","text":"140"},"Update the dependencies array to be: [botId]",{"range":"141","text":"142"},[18323,18325],"[props.match.params.id, setBuilderState]",[5033,5055],"[pageNumber, lastPage, botId]",[5753,5755],"[botId]"]