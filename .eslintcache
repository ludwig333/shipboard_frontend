[{"/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/main/Flows/index.tsx":"1","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/layout/AppLayout.tsx":"2","/home/rabinson/Freelancing/ShipboardBot/frontend/src/styles/global.ts":"3","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Toolbar/index.tsx":"4","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Image/index.tsx":"5","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Card/index.tsx":"6","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Text/index.tsx":"7","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Image/styles.ts":"8","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Sidebar/index.tsx":"9","/home/rabinson/Freelancing/ShipboardBot/frontend/src/services/Builder/BuilderProvider.tsx":"10","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Text/styles.ts":"11","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Toolbar/styles.ts":"12"},{"size":5908,"mtime":1610799288716,"results":"13","hashOfConfig":"14"},{"size":1191,"mtime":1610798953328,"results":"15","hashOfConfig":"14"},{"size":1061,"mtime":1610799779110,"results":"16","hashOfConfig":"14"},{"size":5076,"mtime":1610799925750,"results":"17","hashOfConfig":"14"},{"size":2371,"mtime":1610680844027,"results":"18","hashOfConfig":"14"},{"size":8781,"mtime":1610680746817,"results":"19","hashOfConfig":"14"},{"size":2428,"mtime":1610380915083,"results":"20","hashOfConfig":"14"},{"size":1664,"mtime":1610076394115,"results":"21","hashOfConfig":"14"},{"size":3609,"mtime":1608218330018,"results":"22","hashOfConfig":"14"},{"size":1021,"mtime":1610799054253,"results":"23","hashOfConfig":"14"},{"size":1065,"mtime":1610160837489,"results":"24","hashOfConfig":"14"},{"size":1696,"mtime":1610799998816,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"v8ty68",{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"37"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"37"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/main/Flows/index.tsx",["54","55","56","57","58","59","60"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/layout/AppLayout.tsx",["61"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/styles/global.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Toolbar/index.tsx",["62","63","64","65"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Image/index.tsx",["66","67","68"],"import React, { useEffect, useRef, useContext } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { ImageWrapper } from './styles';\nimport { BuilderContext } from '../../../../../services/Builder/BuilderProvider';\nimport { AddTextButton } from '../../../../common/buttons';\nimport { BiImageAdd, BiTrash } from 'react-icons/bi';\n\n\nconst FormImage = ({ messageId, childId }) => {\n  const [builderState, setBuilderState] = useContext(BuilderContext);\n  const { register, handleSubmit } = useForm({ mode: 'onChange' });\n\n  const imageRef = useRef<HTMLInputElement>(null);\n\n  //Find index of specific object using findIndex method.\n  const childIndex = builderState[messageId].children.findIndex(\n    (obj) => obj.id == childId\n  );\n  \n  const image = builderState[messageId].children[childIndex];\n\n  const onSubmit = (data) => {  \n    let reader = new FileReader();\n\n    reader.onloadend = () => {\n      var height = 180\n      var updatedChildren = { ...builderState[messageId].children[childIndex], selectedImage: data.image[0], imagePreviewUrl: reader.result, height }  \n      \n      setBuilderState([\n        ...builderState,\n        builderState[messageId].children[childIndex] = updatedChildren\n      ]);\n    };\n\n    reader.readAsDataURL(data.image[0]);\n  };\n\n  const handleDelete = () => {\n    \n    setBuilderState([\n      ...builderState,\n      builderState[messageId].height -= 150,\n      builderState[messageId].children.splice(childIndex, 1),\n    ]);\n  };\n\n  useEffect(() => {\n    if (imageRef.current) {\n      register(imageRef.current);\n    }\n  });\n\n  return (\n    <ImageWrapper>\n      {image.imagePreviewUrl ? (\n        <div>\n          <img src={image.imagePreviewUrl} alt=\"image\"/>\n          {/* <AddTextButton height=\"4rem\" width=\"100%\">\n            Add Button\n          </AddTextButton> */}\n        </div>\n      ) : (\n        <form onChange={handleSubmit(onSubmit)}>\n          <input\n            ref={imageRef}\n            type=\"file\"\n              id={\"file\"+ childIndex}\n            name=\"image\"\n            accept=\"image/*\"\n          />\n            <label htmlFor={\"file\" + childIndex}>\n            <BiImageAdd />\n            <p>Upload image</p>\n          </label>\n        </form>\n      )}\n      <button className=\"action-btn\">\n        <BiTrash onClick={handleDelete} />\n      </button>\n    </ImageWrapper>\n  );\n};\n\nexport default FormImage;\n",["69","70"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Card/index.tsx",["71","72","73","74","75","76","77","78","79","80"],"import React, { useState, useEffect, useRef, useContext } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { CardSlider, CardWrapper } from './styles';\nimport { BuilderContext } from '../../../../../services/Builder/BuilderProvider';\nimport { AddTextButton } from '../../../../common/buttons';\nimport { ImageWrapper } from '../Image/styles';\nimport { v4 as uuidv4 } from 'uuid';\nimport Textarea from 'react-expanding-textarea';\nimport {\n  BiImageAdd,\n  BiTrash,\n  BiChevronRight,\n  BiChevronLeft,\n  BiPlus,\n} from 'react-icons/bi';\n\nconst FormCard = ({ messageId, childId }) => {\n  const [builderState, setBuilderState] = useContext(BuilderContext);\n  const { register, handleSubmit } = useForm({ mode: 'onChange' });\n  const [isChangingHeading, setIsChangingHeading] = useState(false);\n  const [isChangingBody, setIsChangingBody] = useState(false);\n\n  const headingRef = useRef<HTMLInputElement>(null);\n  const paragraphRef = useRef<HTMLTextAreaElement>(null);\n  const cardRef = useRef<HTMLDivElement>(null);\n\n  //Find index of specific object using findIndex method.\n  const childIndex = builderState[messageId].children.findIndex(\n    (obj) => obj.id == childId\n  );\n\n  //Card Navigation functions\n  const handleNextButton = (id) => {\n    const cards = builderState[messageId].children[childIndex].cards;\n    const length = cards.length - 1;\n    const activeCardIndex = getActiveCardIndex(cards);\n\n    if (activeCardIndex == length) {\n      makeCardActive(activeCardIndex + 1, activeCardIndex, length + 2, true);\n    } else {\n      makeCardActive(activeCardIndex + 1, activeCardIndex);\n    }\n  };\n\n  const handlePreviousButton = () => {\n    const cards = builderState[messageId].children[childIndex].cards;\n    const activeCardIndex = getActiveCardIndex(cards);\n    if (activeCardIndex != 0) {\n      makeCardActive(activeCardIndex - 1, activeCardIndex);\n    }\n  };\n\n  const makeCardActive = (\n    cardIndex,\n    activeCardIndex,\n    length = 0,\n    addNew = false\n  ) => {\n    if (addNew) {\n      setBuilderState([\n        ...builderState,\n        (builderState[messageId].children[childIndex].cards[\n          activeCardIndex\n        ].active = false),\n        builderState[messageId].children[childIndex].cards.push({\n          id: uuidv4(),\n          active: true,\n          selectedImage: null,\n          imagePreviewUrl: '',\n          heading: 'Subtitle #' + length,\n          body: 'This is body paragraph',\n          height: 290,\n        }),\n      ]);\n    } else {\n      setBuilderState([\n        ...builderState,\n        (builderState[messageId].children[childIndex].cards[\n          cardIndex\n        ].active = true),\n        (builderState[messageId].children[childIndex].cards[\n          activeCardIndex\n        ].active = false),\n      ]);\n    }\n  };\n\n  const getActiveCardIndex = (cards) => {\n    return cards.findIndex((obj) => obj.active == true);\n  };\n\n  const getCardIndex = (id) => {\n    return builderState[messageId].children[childIndex].cards.findIndex(\n      (obj) => obj.id === id\n    );\n  };\n\n  const isLastCard = () => {\n    const cards = builderState[messageId].children[childIndex].cards;\n    const length = cards.length - 1;\n    const activeCardIndex = getActiveCardIndex(cards);\n    return activeCardIndex == length;\n  };\n\n  //Form input submit methods\n  const onUploadImage = (data, id) => {\n    let cardIndex = getCardIndex(id);\n\n    let reader = new FileReader();\n\n    reader.onloadend = () => {\n      var height = cardRef.current.scrollHeight;\n      var updatedCard = {\n        ...builderState[messageId].children[childIndex].cards[cardIndex],\n        selectedImage: data.image[0],\n        imagePreviewUrl: reader.result,\n        height,\n      };\n\n      setBuilderState([\n        ...builderState,\n        (builderState[messageId].children[childIndex].cards[\n          cardIndex\n        ] = updatedCard),\n      ]);\n    };\n\n    reader.readAsDataURL(data.image[0]);\n  };\n\n  const onHeadingChange = (data, id) => {\n    let cardIndex = getCardIndex(id);\n    var height = cardRef.current.scrollHeight;\n    var updatedCard = {\n      ...builderState[messageId].children[childIndex].cards[cardIndex],\n      heading: data.heading,\n      height,\n    };\n    setBuilderState([\n      ...builderState,\n      (builderState[messageId].children[childIndex].cards[\n        cardIndex\n      ] = updatedCard),\n    ]);\n  };\n\n  const onParagraphChange = (data, id) => {\n    let cardIndex = getCardIndex(id);\n    var height = cardRef.current.scrollHeight;\n    var updatedCard = {\n      ...builderState[messageId].children[childIndex].cards[cardIndex],\n      body: data.body,\n      height,\n    };\n    setBuilderState([\n      ...builderState,\n      (builderState[messageId].children[childIndex].cards[\n        cardIndex\n      ] = updatedCard),\n    ]);\n  };\n\n  const handleDelete = () => {\n    setBuilderState([\n      ...builderState,\n      builderState[messageId].height -= 250,\n      builderState[messageId].children.splice(childIndex, 1),\n    ]);\n  };\n  //UseEffects\n  useEffect(() => {\n    if (headingRef.current) {\n      register(headingRef.current);\n      headingRef.current.focus();\n    }\n  }, [isChangingHeading]);\n\n  useEffect(() => {\n    if (paragraphRef.current) {\n      register(paragraphRef.current);\n      paragraphRef.current.focus();\n    }\n  }, [isChangingBody]);\n\n  return (\n    <CardSlider>\n      <div className=\"navigation_btn previous\" onClick={handlePreviousButton}>\n        <BiChevronLeft />\n      </div>\n      <div className=\"navigation_btn next\" onClick={handleNextButton}>\n        {isLastCard() ? <BiPlus /> : <BiChevronRight />}\n      </div>\n      <button className=\"action-btn\" onClick={handleDelete}>\n        <BiTrash />\n      </button>\n      {builderState[messageId].children[childIndex].cards.map((card) => {\n        if (card.active) {\n          return (\n            <CardWrapper ref={cardRef}>\n              <div className=\"card-image\">\n                <ImageWrapper>\n                  {card.imagePreviewUrl ? (\n                    <div>\n                      <img src={card.imagePreviewUrl} alt=\"card-image\" />\n                    </div>\n                  ) : (\n                    <form\n                      onChange={handleSubmit((data) =>\n                        onUploadImage(data, card.id)\n                      )}>\n                      <input\n                        ref={register}\n                        type=\"file\"\n                        id={'card_image' + getCardIndex(card.id)}\n                        name=\"image\"\n                        accept=\"image/*\"\n                      />\n                      <label htmlFor={'card_image' + getCardIndex(card.id)}>\n                        <BiImageAdd />\n                        <p>Upload image</p>\n                      </label>\n                    </form>\n                  )}\n                </ImageWrapper>\n              </div>\n              <div className=\"card-text\">\n                <div\n                  className={\n                    isChangingHeading ? 'card-heading active' : 'card-heading'\n                  }>\n                  <form\n                    onBlur={handleSubmit((data) =>\n                      onHeadingChange(data, card.id)\n                    )}>\n                    <Textarea\n                      className=\"card-title\"\n                      ref={headingRef}\n                      maxLength={27}\n                      id=\"heading\"\n                      name=\"heading\"\n                      defaultValue={card.heading}\n                      onBlur={() => setIsChangingHeading(false)}\n                      onClick={() => {\n                        setIsChangingBody(false);\n                        setIsChangingHeading(true);\n                      }}\n                    />\n                  </form>\n                </div>\n                <div\n                  className={isChangingBody ? 'card-body active' : 'card-body'}>\n                  <form\n                    onBlur={handleSubmit((data) =>\n                      onParagraphChange(data, card.id)\n                    )}>\n                    <Textarea\n                      className=\"card-paragraph\"\n                      maxLength={200}\n                      placeholder=\"Enter your text here\"\n                      onBlur={() => setIsChangingBody(false)}\n                      defaultValue={card.body}\n                      id=\"body\"\n                      name=\"body\"\n                      ref={paragraphRef}\n                      onClick={() => {\n                        setIsChangingHeading(false);\n                        setIsChangingBody(true);\n                      }}\n                    />\n                  </form>\n                </div>\n              </div>\n            </CardWrapper>\n          );\n        }\n      })}\n    </CardSlider>\n  );\n};\n\nexport default FormCard;\n","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Text/index.tsx",["81","82","83"],"import React, { useEffect, useState, useRef, useContext } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { BuilderContext } from '../../../../../services/Builder/BuilderProvider';\nimport { AddTextWrapper } from './styles';\nimport { AddTextButton } from '../../../../common/buttons';\nimport { BiTrash } from 'react-icons/bi';\nimport Textarea from 'react-expanding-textarea';\n\nconst FormText = ({ messageId, childId }) => {\n  const [builderState, setBuilderState] = useContext(BuilderContext);\n  const { register, handleSubmit } = useForm({ mode: 'onChange' });\n  const [isChangingBody, setIsChangingBody] = useState(false);\n\n  const textAreaRef = useRef<HTMLTextAreaElement>(null);\n\n  //Find index of specific object using findIndex method.\n  const childIndex = builderState[messageId].children.findIndex(\n    (obj) => obj.id == childId\n  );\n\n  const onTextChange = (data) => {\n    var height = textAreaRef.current.scrollHeight;\n\n    var updatedCard = {\n      ...builderState[messageId].children[childIndex],\n      value: data.text, height\n    };\n    setBuilderState([\n      ...builderState,\n      (builderState[messageId].children[childIndex] = updatedCard),\n    ]);\n  };\n\n  const handleDelete = () => {\n    var height = builderState[messageId].height - textAreaRef.current.scrollHeight;\n\n    setBuilderState([\n      ...builderState, builderState[messageId].height = height,\n      builderState[messageId].children.splice(childIndex, 1),\n    ]);\n  };\n\n  useEffect(() => {\n    if (textAreaRef.current) {\n      register(textAreaRef.current);\n      textAreaRef.current.focus();\n    }\n  }, [isChangingBody]);\n\n  return (\n    <AddTextWrapper>\n       <button className=\"action-btn\">\n        <BiTrash onClick={handleDelete} />\n      </button>\n      <div className={isChangingBody ? 'card-body active' : 'card-body'}>\n        <form onBlur={handleSubmit(onTextChange)}>\n          <Textarea\n            maxLength={500}\n            placeholder=\"Enter your text here\"\n            onBlur={() => setIsChangingBody(false)}\n            defaultValue={builderState[messageId].children[childIndex].value}\n            id=\"text\"\n            name=\"text\"\n            ref={textAreaRef}\n            onClick={() => setIsChangingBody(true)}\n          />\n        </form>\n      </div>\n\n      {/* <AddTextButton height=\"4rem\" width=\"100%\">\n        Add Button\n      </AddTextButton> */}\n    </AddTextWrapper>\n  );\n};\n\nexport default FormText;\n","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Image/styles.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/Sidebar/index.tsx",["84","85","86"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/services/Builder/BuilderProvider.tsx",["87"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Text/styles.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Toolbar/styles.ts",[],{"ruleId":"88","severity":1,"message":"89","line":1,"column":27,"nodeType":"90","messageId":"91","endLine":1,"endColumn":36},{"ruleId":"88","severity":1,"message":"92","line":1,"column":38,"nodeType":"90","messageId":"91","endLine":1,"endColumn":48},{"ruleId":"88","severity":1,"message":"93","line":1,"column":50,"nodeType":"90","messageId":"91","endLine":1,"endColumn":58},{"ruleId":"88","severity":1,"message":"94","line":3,"column":30,"nodeType":"90","messageId":"91","endLine":3,"endColumn":35},{"ruleId":"88","severity":1,"message":"95","line":12,"column":3,"nodeType":"90","messageId":"91","endLine":12,"endColumn":17},{"ruleId":"88","severity":1,"message":"96","line":21,"column":17,"nodeType":"90","messageId":"91","endLine":21,"endColumn":25},{"ruleId":"88","severity":1,"message":"97","line":37,"column":9,"nodeType":"90","messageId":"91","endLine":37,"endColumn":28},{"ruleId":"88","severity":1,"message":"98","line":13,"column":9,"nodeType":"90","messageId":"91","endLine":13,"endColumn":21},{"ruleId":"88","severity":1,"message":"99","line":4,"column":10,"nodeType":"90","messageId":"91","endLine":4,"endColumn":24},{"ruleId":"88","severity":1,"message":"100","line":11,"column":10,"nodeType":"90","messageId":"91","endLine":11,"endColumn":20},{"ruleId":"101","severity":1,"message":"102","line":22,"column":59,"nodeType":"103","messageId":"104","endLine":22,"endColumn":61},{"ruleId":"105","severity":1,"message":"106","line":37,"column":6,"nodeType":"107","endLine":37,"endColumn":23,"suggestions":"108"},{"ruleId":"88","severity":1,"message":"109","line":5,"column":10,"nodeType":"90","messageId":"91","endLine":5,"endColumn":23},{"ruleId":"101","severity":1,"message":"102","line":17,"column":21,"nodeType":"103","messageId":"104","endLine":17,"endColumn":23},{"ruleId":"110","severity":1,"message":"111","line":57,"column":11,"nodeType":"112","endLine":57,"endColumn":57},{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","replacedBy":"116"},{"ruleId":"88","severity":1,"message":"109","line":5,"column":10,"nodeType":"90","messageId":"91","endLine":5,"endColumn":23},{"ruleId":"101","severity":1,"message":"102","line":29,"column":21,"nodeType":"103","messageId":"104","endLine":29,"endColumn":23},{"ruleId":"101","severity":1,"message":"102","line":38,"column":25,"nodeType":"103","messageId":"104","endLine":38,"endColumn":27},{"ruleId":"101","severity":1,"message":"117","line":48,"column":25,"nodeType":"103","messageId":"104","endLine":48,"endColumn":27},{"ruleId":"101","severity":1,"message":"102","line":89,"column":48,"nodeType":"103","messageId":"104","endLine":89,"endColumn":50},{"ruleId":"101","severity":1,"message":"102","line":102,"column":28,"nodeType":"103","messageId":"104","endLine":102,"endColumn":30},{"ruleId":"105","severity":1,"message":"106","line":176,"column":6,"nodeType":"107","endLine":176,"endColumn":25,"suggestions":"118"},{"ruleId":"105","severity":1,"message":"106","line":183,"column":6,"nodeType":"107","endLine":183,"endColumn":22,"suggestions":"119"},{"ruleId":"120","severity":1,"message":"121","line":196,"column":70,"nodeType":"122","messageId":"123","endLine":196,"endColumn":72},{"ruleId":"110","severity":1,"message":"111","line":204,"column":23,"nodeType":"112","endLine":204,"endColumn":74},{"ruleId":"88","severity":1,"message":"109","line":5,"column":10,"nodeType":"90","messageId":"91","endLine":5,"endColumn":23},{"ruleId":"101","severity":1,"message":"102","line":18,"column":21,"nodeType":"103","messageId":"104","endLine":18,"endColumn":23},{"ruleId":"105","severity":1,"message":"106","line":48,"column":6,"nodeType":"107","endLine":48,"endColumn":22,"suggestions":"124"},{"ruleId":"88","severity":1,"message":"125","line":1,"column":36,"nodeType":"90","messageId":"91","endLine":1,"endColumn":39},{"ruleId":"105","severity":1,"message":"126","line":41,"column":6,"nodeType":"107","endLine":41,"endColumn":14,"suggestions":"127"},{"ruleId":"128","severity":1,"message":"129","line":62,"column":13,"nodeType":"112","endLine":62,"endColumn":45},{"ruleId":"88","severity":1,"message":"130","line":2,"column":10,"nodeType":"90","messageId":"91","endLine":2,"endColumn":23},"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useContext' is defined but never used.","'Children' is defined but never used.","'Image' is defined but never used.","'BuilderContext' is defined but never used.","'setState' is assigned a value but never used.","'calculateCardHeight' is assigned a value but never used.","'sidebarState' is assigned a value but never used.","'ToolbarHeading' is defined but never used.","'InputField' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'register'. Either include it or remove the dependency array.","ArrayExpression",["131"],"'AddTextButton' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","no-native-reassign",["132"],"no-negated-in-lhs",["133"],"Expected '!==' and instead saw '!='.",["134"],["135"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",["136"],"'Ref' is defined but never used.","React Hook useEffect has a missing dependency: 'handleSidebarState'. Either include it or remove the dependency array. If 'handleSidebarState' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["137"],"jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","'FlowStateType' is defined but never used.",{"desc":"138","fix":"139"},"no-global-assign","no-unsafe-negation",{"desc":"140","fix":"141"},{"desc":"142","fix":"143"},{"desc":"142","fix":"144"},{"desc":"145","fix":"146"},"Update the dependencies array to be: [isChangingTitle, register]",{"range":"147","text":"148"},"Update the dependencies array to be: [isChangingHeading, register]",{"range":"149","text":"150"},"Update the dependencies array to be: [isChangingBody, register]",{"range":"151","text":"152"},{"range":"153","text":"152"},"Update the dependencies array to be: [handleSidebarState, isOpen]",{"range":"154","text":"155"},[1379,1396],"[isChangingTitle, register]",[5124,5143],"[isChangingHeading, register]",[5284,5300],"[isChangingBody, register]",[1602,1618],[1369,1377],"[handleSidebarState, isOpen]"]