[{"/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/main/Flows/index.tsx":"1","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Card/index.tsx":"2","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Toolbar/index.tsx":"3","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Card/styles.ts":"4","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Image/index.tsx":"5","/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/main/Flows/helper.tsx":"6","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Image/styles.ts":"7","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Toolbar/styles.ts":"8","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Text/index.tsx":"9"},{"size":7000,"mtime":1610942364239,"results":"10","hashOfConfig":"11"},{"size":8781,"mtime":1610680746817,"results":"12","hashOfConfig":"11"},{"size":5076,"mtime":1610799925750,"results":"13","hashOfConfig":"11"},{"size":2734,"mtime":1610160143779,"results":"14","hashOfConfig":"11"},{"size":2371,"mtime":1610680844027,"results":"15","hashOfConfig":"11"},{"size":6422,"mtime":1610942309482,"results":"16","hashOfConfig":"11"},{"size":1664,"mtime":1610076394115,"results":"17","hashOfConfig":"11"},{"size":1746,"mtime":1610853991933,"results":"18","hashOfConfig":"11"},{"size":2428,"mtime":1610380915083,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},"v8ty68",{"filePath":"23","messages":"24","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/main/Flows/index.tsx",["44","45","46","47","48","49","50","51","52"],"import React, { useState, useEffect, useContext, Children } from 'react';\nimport { FlowBuilderWrapper } from './styles';\nimport { Stage, Layer, Rect, Image, Text, Group, Circle } from 'react-konva';\nimport Toolbar from '../../../components/dashboard/builder/Toolbar/index';\nimport { v4 as uuidv4 } from 'uuid';\nimport {\n  handleRenderingChildrens,\n  calculateHeightOfMessageBox,\n  handleWheel,\n  Edge,\n} from './helper';\nimport {\n  BuilderContext,\n  useBuilder,\n} from '../../../services/Builder/BuilderProvider';\nimport { BiMessageSquareAdd } from 'react-icons/bi';\n\nconst Flows = (props: any) => {\n  const [isToolbarActive, setIsToolbarActive] = useState(null);\n  const [builderState, setBuilderState, sidebar] = useBuilder();\n  const [id, setId] = useState(null);\n\n  const [state, setState] = useState({\n    layerScale: 1,\n    layerX: 0,\n    layerY: 0,\n  });\n\n  const getNextNode = (id) => {\n    if (id) {\n      const nextIndex = builderState.findIndex((obj) => obj.id == id);\n      return builderState[nextIndex].position;\n    }\n    return null;\n  };\n\n  const hideToolbar = () => {\n    setIsToolbarActive(false);\n    setId(0);\n  };\n\n  const showToolbar = (id) => {\n    setId(id);\n    setIsToolbarActive(true);\n  };\n\n  const calculateCardHeight = (state) => {\n    // var height;\n    // state.foreach(item => {\n    //     if(item.type == )\n    // })\n    return 100;\n  };\n\n  const getStageWidth = () => {\n    return sidebar ? window.innerWidth - 280 : window.innerWidth - 90;\n  };\n  return (\n    <FlowBuilderWrapper>\n      <div className=\"header\">Flows</div>\n      <div className=\"stage-action\">\n        <BiMessageSquareAdd\n          onClick={() => {\n            let number = builderState.length + 1;\n            const newState = {\n              id: uuidv4(),\n              name: 'Send Message #' + number,\n              position: {\n                x: 1200,\n                y: 50,\n              },\n              height: 200,\n              children: [],\n            };\n            setBuilderState([...builderState, newState]);\n          }}\n        />\n      </div>\n\n      {isToolbarActive && <Toolbar id={id} hideToolbar={hideToolbar} />}\n      <Stage\n        width={getStageWidth()}\n        height={window.innerHeight - 70}\n        scaleX={state.layerScale}\n        scaleY={state.layerScale}\n        x={0}\n        y={0}>\n        <Layer name=\"layer_1\" draggable onWheel={handleWheel}>\n          <Rect\n            x={-window.innerWidth}\n            y={-window.innerHeight}\n            width={window.innerWidth * 3}\n            height={window.innerHeight * 3}\n            fill=\"\"\n          />\n          <Group draggable x={200} y={200}>\n            <Rect\n              cornerRadius={16}\n              width={300}\n              height={100}\n              fill=\"#FDFDFD\"\n              strokeWidth={2}\n              shadowColor=\"gray\"\n              shadowOpacity={0.7}\n              shadowBlur={2}\n            />\n            <Circle x={30} y={30} radius={15} fill=\"green\" />\n            <Text\n              x={55}\n              y={22}\n              text=\"Starting Step\"\n              fontFamily={'Roboto'}\n              fontSize={20}\n              fill={'gray'}\n            />\n            <Circle x={280} y={80} radius={9} fill=\"#8392AB\" strokeWidth={1} />\n            <Text\n              x={195}\n              y={72}\n              text=\"Next Step\"\n              fontFamily={'Roboto'}\n              fontSize={15}\n              fontWeight={300}\n              fill={'gray'}\n            />\n          </Group>\n          {builderState &&\n            typeof builderState == 'object' &&\n            builderState.map((item) => {\n              return (\n                <React.Fragment>\n                   {item.next ? (\n                  <Edge\n                    node1={item.position}\n                    node2={getNextNode(item.next)}\n                  />\n                ) : null}\n                <Group\n                  x={item.position?.x}\n                  y={item.position?.y}\n                  draggable\n                  onClick={(e) => showToolbar(item.id)}\n                  hitOnDragEnabled={true}\n                  onDragMove={(e) => {\n                    var updatedPosition = {\n                      x: e.target.x(),\n                      y: e.target.y(),\n                    };\n                    var index = builderState.findIndex(\n                      (obj) => obj.id == item.id\n                    );\n                    setBuilderState([\n                      ...builderState,\n                      (builderState[index].position = updatedPosition),\n                    ]);\n                  }}>\n                  <Rect\n                    cornerRadius={16}\n                    height={calculateHeightOfMessageBox(item.children)}\n                    width={340}\n                    fill=\"#FDFDFD\"\n                    strokeWidth={1}\n                    shadowColor=\"black\"\n                    shadowOpacity={0.5}\n                    shadowBlur={7}\n                  />\n                  <Circle x={30} y={30} radius={15} fill=\"#5850EB\" />\n                  <Text\n                    x={55}\n                    y={22}\n                    text={item.name}\n                    fontFamily={'Roboto'}\n                    fontSize={20}\n                    fill={'gray'}\n                  />\n                  <Circle\n                    x={280}\n                    y={item.height - 20}\n                    radius={9}\n                    fill=\"#8392AB\"\n                    strokeWidth={1}\n                  />\n                  <Text\n                    x={195}\n                    y={item.height - 25}\n                    text=\"Next Step\"\n                    fontFamily={'Roboto'}\n                    fontSize={15}\n                    fontWeight={300}\n                    fill={'gray'}\n                  />\n                  {typeof item.children == 'object' ? (\n                    <>\n                      {item.children.length > 0 ? (\n                        handleRenderingChildrens(item)\n                      ) : (\n                        <Group>\n                          <Rect\n                            x={20}\n                            y={75}\n                            height={60}\n                            width={300}\n                            fill=\"#EEF1F4\"\n                            cornerRadius={16}\n                          />\n                          <Text\n                            text=\"No Content\"\n                            x={110}\n                            y={95}\n                            fontFamily={'Roboto'}\n                            fontSize={20}\n                            fontWeight={300}\n                            fill={'blue'}\n                          />\n                        </Group>\n                      )}\n                    </>\n                  ) : null}\n                </Group>\n              </React.Fragment>\n              );\n            })}\n        </Layer>\n      </Stage>\n    </FlowBuilderWrapper>\n  );\n};\n\nexport default Flows;\n","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Card/index.tsx",["53","54","55","56","57","58","59","60","61","62"],"import React, { useState, useEffect, useRef, useContext } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { CardSlider, CardWrapper } from './styles';\nimport { BuilderContext } from '../../../../../services/Builder/BuilderProvider';\nimport { AddTextButton } from '../../../../common/buttons';\nimport { ImageWrapper } from '../Image/styles';\nimport { v4 as uuidv4 } from 'uuid';\nimport Textarea from 'react-expanding-textarea';\nimport {\n  BiImageAdd,\n  BiTrash,\n  BiChevronRight,\n  BiChevronLeft,\n  BiPlus,\n} from 'react-icons/bi';\n\nconst FormCard = ({ messageId, childId }) => {\n  const [builderState, setBuilderState] = useContext(BuilderContext);\n  const { register, handleSubmit } = useForm({ mode: 'onChange' });\n  const [isChangingHeading, setIsChangingHeading] = useState(false);\n  const [isChangingBody, setIsChangingBody] = useState(false);\n\n  const headingRef = useRef<HTMLInputElement>(null);\n  const paragraphRef = useRef<HTMLTextAreaElement>(null);\n  const cardRef = useRef<HTMLDivElement>(null);\n\n  //Find index of specific object using findIndex method.\n  const childIndex = builderState[messageId].children.findIndex(\n    (obj) => obj.id == childId\n  );\n\n  //Card Navigation functions\n  const handleNextButton = (id) => {\n    const cards = builderState[messageId].children[childIndex].cards;\n    const length = cards.length - 1;\n    const activeCardIndex = getActiveCardIndex(cards);\n\n    if (activeCardIndex == length) {\n      makeCardActive(activeCardIndex + 1, activeCardIndex, length + 2, true);\n    } else {\n      makeCardActive(activeCardIndex + 1, activeCardIndex);\n    }\n  };\n\n  const handlePreviousButton = () => {\n    const cards = builderState[messageId].children[childIndex].cards;\n    const activeCardIndex = getActiveCardIndex(cards);\n    if (activeCardIndex != 0) {\n      makeCardActive(activeCardIndex - 1, activeCardIndex);\n    }\n  };\n\n  const makeCardActive = (\n    cardIndex,\n    activeCardIndex,\n    length = 0,\n    addNew = false\n  ) => {\n    if (addNew) {\n      setBuilderState([\n        ...builderState,\n        (builderState[messageId].children[childIndex].cards[\n          activeCardIndex\n        ].active = false),\n        builderState[messageId].children[childIndex].cards.push({\n          id: uuidv4(),\n          active: true,\n          selectedImage: null,\n          imagePreviewUrl: '',\n          heading: 'Subtitle #' + length,\n          body: 'This is body paragraph',\n          height: 290,\n        }),\n      ]);\n    } else {\n      setBuilderState([\n        ...builderState,\n        (builderState[messageId].children[childIndex].cards[\n          cardIndex\n        ].active = true),\n        (builderState[messageId].children[childIndex].cards[\n          activeCardIndex\n        ].active = false),\n      ]);\n    }\n  };\n\n  const getActiveCardIndex = (cards) => {\n    return cards.findIndex((obj) => obj.active == true);\n  };\n\n  const getCardIndex = (id) => {\n    return builderState[messageId].children[childIndex].cards.findIndex(\n      (obj) => obj.id === id\n    );\n  };\n\n  const isLastCard = () => {\n    const cards = builderState[messageId].children[childIndex].cards;\n    const length = cards.length - 1;\n    const activeCardIndex = getActiveCardIndex(cards);\n    return activeCardIndex == length;\n  };\n\n  //Form input submit methods\n  const onUploadImage = (data, id) => {\n    let cardIndex = getCardIndex(id);\n\n    let reader = new FileReader();\n\n    reader.onloadend = () => {\n      var height = cardRef.current.scrollHeight;\n      var updatedCard = {\n        ...builderState[messageId].children[childIndex].cards[cardIndex],\n        selectedImage: data.image[0],\n        imagePreviewUrl: reader.result,\n        height,\n      };\n\n      setBuilderState([\n        ...builderState,\n        (builderState[messageId].children[childIndex].cards[\n          cardIndex\n        ] = updatedCard),\n      ]);\n    };\n\n    reader.readAsDataURL(data.image[0]);\n  };\n\n  const onHeadingChange = (data, id) => {\n    let cardIndex = getCardIndex(id);\n    var height = cardRef.current.scrollHeight;\n    var updatedCard = {\n      ...builderState[messageId].children[childIndex].cards[cardIndex],\n      heading: data.heading,\n      height,\n    };\n    setBuilderState([\n      ...builderState,\n      (builderState[messageId].children[childIndex].cards[\n        cardIndex\n      ] = updatedCard),\n    ]);\n  };\n\n  const onParagraphChange = (data, id) => {\n    let cardIndex = getCardIndex(id);\n    var height = cardRef.current.scrollHeight;\n    var updatedCard = {\n      ...builderState[messageId].children[childIndex].cards[cardIndex],\n      body: data.body,\n      height,\n    };\n    setBuilderState([\n      ...builderState,\n      (builderState[messageId].children[childIndex].cards[\n        cardIndex\n      ] = updatedCard),\n    ]);\n  };\n\n  const handleDelete = () => {\n    setBuilderState([\n      ...builderState,\n      builderState[messageId].height -= 250,\n      builderState[messageId].children.splice(childIndex, 1),\n    ]);\n  };\n  //UseEffects\n  useEffect(() => {\n    if (headingRef.current) {\n      register(headingRef.current);\n      headingRef.current.focus();\n    }\n  }, [isChangingHeading]);\n\n  useEffect(() => {\n    if (paragraphRef.current) {\n      register(paragraphRef.current);\n      paragraphRef.current.focus();\n    }\n  }, [isChangingBody]);\n\n  return (\n    <CardSlider>\n      <div className=\"navigation_btn previous\" onClick={handlePreviousButton}>\n        <BiChevronLeft />\n      </div>\n      <div className=\"navigation_btn next\" onClick={handleNextButton}>\n        {isLastCard() ? <BiPlus /> : <BiChevronRight />}\n      </div>\n      <button className=\"action-btn\" onClick={handleDelete}>\n        <BiTrash />\n      </button>\n      {builderState[messageId].children[childIndex].cards.map((card) => {\n        if (card.active) {\n          return (\n            <CardWrapper ref={cardRef}>\n              <div className=\"card-image\">\n                <ImageWrapper>\n                  {card.imagePreviewUrl ? (\n                    <div>\n                      <img src={card.imagePreviewUrl} alt=\"card-image\" />\n                    </div>\n                  ) : (\n                    <form\n                      onChange={handleSubmit((data) =>\n                        onUploadImage(data, card.id)\n                      )}>\n                      <input\n                        ref={register}\n                        type=\"file\"\n                        id={'card_image' + getCardIndex(card.id)}\n                        name=\"image\"\n                        accept=\"image/*\"\n                      />\n                      <label htmlFor={'card_image' + getCardIndex(card.id)}>\n                        <BiImageAdd />\n                        <p>Upload image</p>\n                      </label>\n                    </form>\n                  )}\n                </ImageWrapper>\n              </div>\n              <div className=\"card-text\">\n                <div\n                  className={\n                    isChangingHeading ? 'card-heading active' : 'card-heading'\n                  }>\n                  <form\n                    onBlur={handleSubmit((data) =>\n                      onHeadingChange(data, card.id)\n                    )}>\n                    <Textarea\n                      className=\"card-title\"\n                      ref={headingRef}\n                      maxLength={27}\n                      id=\"heading\"\n                      name=\"heading\"\n                      defaultValue={card.heading}\n                      onBlur={() => setIsChangingHeading(false)}\n                      onClick={() => {\n                        setIsChangingBody(false);\n                        setIsChangingHeading(true);\n                      }}\n                    />\n                  </form>\n                </div>\n                <div\n                  className={isChangingBody ? 'card-body active' : 'card-body'}>\n                  <form\n                    onBlur={handleSubmit((data) =>\n                      onParagraphChange(data, card.id)\n                    )}>\n                    <Textarea\n                      className=\"card-paragraph\"\n                      maxLength={200}\n                      placeholder=\"Enter your text here\"\n                      onBlur={() => setIsChangingBody(false)}\n                      defaultValue={card.body}\n                      id=\"body\"\n                      name=\"body\"\n                      ref={paragraphRef}\n                      onClick={() => {\n                        setIsChangingHeading(false);\n                        setIsChangingBody(true);\n                      }}\n                    />\n                  </form>\n                </div>\n              </div>\n            </CardWrapper>\n          );\n        }\n      })}\n    </CardSlider>\n  );\n};\n\nexport default FormCard;\n",["63","64"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Toolbar/index.tsx",["65","66","67","68"],"import React, { useContext, useState, useRef, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { ToolbarWrapper, ToolbarMenu, ToolbarButtonGroup } from './styles';\nimport { ToolbarHeading, VerticalGap } from '../../../common/typography';\nimport { ToolbarButton } from '../../../common/buttons';\nimport { BuilderContext } from '../../../../services/Builder/BuilderProvider';\nimport { v4 as uuidv4 } from 'uuid';\nimport FormImage from '../Form/Image/index';\nimport FormText from '../Form/Text/index';\nimport FormCard from '../Form/Card/index';\nimport { InputField } from '../../../common/form';\nimport Textarea from 'react-expanding-textarea';\n\nconst Toolbar = ({ id, hideToolbar }) => {\n  const [builderState, setBuilderState] = useContext(BuilderContext);\n  const [isChangingTitle, setIsChangingTitle] = useState(false);\n  const { register, handleSubmit } = useForm({ mode: 'onChange' });\n\n  const titleRef = useRef<HTMLInputElement>(null);\n\n  //Find index of specific object using findIndex method.\n  const objIndex = builderState.findIndex((obj) => obj.id == id);\n\n  const onChangeTitle = (data) => {\n    setBuilderState([\n      ...builderState,\n      (builderState[objIndex].name = data.title),\n    ]);\n  };\n\n  //UseEffects\n  useEffect(() => {\n    if (titleRef.current) {\n      register(titleRef.current);\n      titleRef.current.focus();\n    }\n  }, [isChangingTitle]);\n\n  return (\n    <ToolbarWrapper>\n      <ToolbarMenu>\n        <div className={isChangingTitle ? 'header active' : 'header'}>\n          <form onBlur={handleSubmit(onChangeTitle)}>\n            <Textarea\n              maxLength={35}\n              className=\"heading-input\"\n              ref={titleRef}\n              id=\"title\"\n              name=\"title\"\n              defaultValue={builderState[objIndex].name}\n              onBlur={() => setIsChangingTitle(false)}\n            />\n          </form>\n        </div>\n        {builderState[objIndex].children.length > 0 ? (\n          builderState[objIndex].children.map((child) => {\n            return (\n              <React.Fragment>\n                <VerticalGap size=\"3\" />\n                {getChildren(child, objIndex)}\n              </React.Fragment>\n            );\n          })\n        ) : (\n          <React.Fragment>\n            <VerticalGap size=\"3\" />\n            <p className=\"no-content-text\">No content</p>\n          </React.Fragment>\n        )}\n        <VerticalGap size=\"3\" />\n        <ToolbarButtons index={objIndex} />\n      </ToolbarMenu>\n    </ToolbarWrapper>\n  );\n};\n\nexport default Toolbar;\n\nconst ToolbarButtons = ({ index }) => {\n  const [builderState, setBuilderState] = useContext(BuilderContext);\n\n  const addText = () => {\n    let height = builderState[index].height;\n    height = height + 30;\n    setBuilderState([\n      ...builderState,\n      (builderState[index].height = height),\n      builderState[index].children.push({\n        id: uuidv4(),\n        type: 'text',\n        value: 'Change text',\n        height: 30,\n      }),\n    ]);\n  };\n\n  const addCard = () => {\n    let height = builderState[index].height;\n    height = height + 150;\n\n    setBuilderState([\n      ...builderState,\n      (builderState[index].height = height),\n      builderState[index].children.push({\n        id: uuidv4(),\n        type: 'card',\n        cards: [\n          {\n            id: uuidv4(),\n            active: true,\n            selectedImage: null,\n            imagePreviewUrl: '',\n            heading: 'subtitle #11',\n            body: 'This is the body paragraph',\n            height: 250,\n          },\n        ],\n      }),\n    ]);\n  };\n\n  const addImage = () => {\n    let height = builderState[index].height;\n    height = height + 150;\n\n    setBuilderState([\n      ...builderState,\n      (builderState[index].height = height),\n      builderState[index].children.push({\n        id: uuidv4(),\n        type: 'image',\n        height: 150,\n        imagePreviewUrl: '',\n        selectedImage: null,\n      }),\n    ]);\n  };\n\n  return (\n    <React.Fragment>\n      <ToolbarButtonGroup>\n        <ToolbarButton\n          height=\"6rem\"\n          width=\"6rem\"\n          fontSize=\"1.2rem\"\n          onClick={addText}>\n          + Text\n        </ToolbarButton>\n        <ToolbarButton\n          height=\"6rem\"\n          width=\"6rem\"\n          fontSize=\"1.2rem\"\n          onClick={addCard}>\n          + Card\n        </ToolbarButton>\n        <ToolbarButton\n          height=\"6rem\"\n          width=\"6rem\"\n          fontSize=\"1.2rem\"\n          onClick={addImage}>\n          + Image\n        </ToolbarButton>\n        <ToolbarButton height=\"4rem\" width=\"25rem\">\n          Next Button\n        </ToolbarButton>\n      </ToolbarButtonGroup>\n    </React.Fragment>\n  );\n};\n\nconst getChildren = (children, messageId) => {\n  if (children.type === 'text') {\n    return <FormText messageId={messageId} childId={children.id} />;\n  } else if (children.type === 'image') {\n    return <FormImage messageId={messageId} childId={children.id} />;\n  } else if (children.type === 'card') {\n    return <FormCard messageId={messageId} childId={children.id} />;\n  }\n};\n","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Card/styles.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Image/index.tsx",["69","70","71"],"import React, { useEffect, useRef, useContext } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { ImageWrapper } from './styles';\nimport { BuilderContext } from '../../../../../services/Builder/BuilderProvider';\nimport { AddTextButton } from '../../../../common/buttons';\nimport { BiImageAdd, BiTrash } from 'react-icons/bi';\n\n\nconst FormImage = ({ messageId, childId }) => {\n  const [builderState, setBuilderState] = useContext(BuilderContext);\n  const { register, handleSubmit } = useForm({ mode: 'onChange' });\n\n  const imageRef = useRef<HTMLInputElement>(null);\n\n  //Find index of specific object using findIndex method.\n  const childIndex = builderState[messageId].children.findIndex(\n    (obj) => obj.id == childId\n  );\n  \n  const image = builderState[messageId].children[childIndex];\n\n  const onSubmit = (data) => {  \n    let reader = new FileReader();\n\n    reader.onloadend = () => {\n      var height = 180\n      var updatedChildren = { ...builderState[messageId].children[childIndex], selectedImage: data.image[0], imagePreviewUrl: reader.result, height }  \n      \n      setBuilderState([\n        ...builderState,\n        builderState[messageId].children[childIndex] = updatedChildren\n      ]);\n    };\n\n    reader.readAsDataURL(data.image[0]);\n  };\n\n  const handleDelete = () => {\n    \n    setBuilderState([\n      ...builderState,\n      builderState[messageId].height -= 150,\n      builderState[messageId].children.splice(childIndex, 1),\n    ]);\n  };\n\n  useEffect(() => {\n    if (imageRef.current) {\n      register(imageRef.current);\n    }\n  });\n\n  return (\n    <ImageWrapper>\n      {image.imagePreviewUrl ? (\n        <div>\n          <img src={image.imagePreviewUrl} alt=\"image\"/>\n          {/* <AddTextButton height=\"4rem\" width=\"100%\">\n            Add Button\n          </AddTextButton> */}\n        </div>\n      ) : (\n        <form onChange={handleSubmit(onSubmit)}>\n          <input\n            ref={imageRef}\n            type=\"file\"\n              id={\"file\"+ childIndex}\n            name=\"image\"\n            accept=\"image/*\"\n          />\n            <label htmlFor={\"file\" + childIndex}>\n            <BiImageAdd />\n            <p>Upload image</p>\n          </label>\n        </form>\n      )}\n      <button className=\"action-btn\">\n        <BiTrash onClick={handleDelete} />\n      </button>\n    </ImageWrapper>\n  );\n};\n\nexport default FormImage;\n",["72","73"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/main/Flows/helper.tsx",["74"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Image/styles.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Toolbar/styles.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Text/index.tsx",["75","76","77"],{"ruleId":"78","severity":1,"message":"79","line":1,"column":27,"nodeType":"80","messageId":"81","endLine":1,"endColumn":36},{"ruleId":"78","severity":1,"message":"82","line":1,"column":38,"nodeType":"80","messageId":"81","endLine":1,"endColumn":48},{"ruleId":"78","severity":1,"message":"83","line":1,"column":50,"nodeType":"80","messageId":"81","endLine":1,"endColumn":58},{"ruleId":"78","severity":1,"message":"84","line":3,"column":30,"nodeType":"80","messageId":"81","endLine":3,"endColumn":35},{"ruleId":"78","severity":1,"message":"85","line":13,"column":3,"nodeType":"80","messageId":"81","endLine":13,"endColumn":17},{"ruleId":"78","severity":1,"message":"86","line":23,"column":17,"nodeType":"80","messageId":"81","endLine":23,"endColumn":25},{"ruleId":"87","severity":1,"message":"88","line":31,"column":64,"nodeType":"89","messageId":"90","endLine":31,"endColumn":66},{"ruleId":"78","severity":1,"message":"91","line":47,"column":9,"nodeType":"80","messageId":"81","endLine":47,"endColumn":28},{"ruleId":"87","severity":1,"message":"88","line":150,"column":39,"nodeType":"89","messageId":"90","endLine":150,"endColumn":41},{"ruleId":"78","severity":1,"message":"92","line":5,"column":10,"nodeType":"80","messageId":"81","endLine":5,"endColumn":23},{"ruleId":"87","severity":1,"message":"88","line":29,"column":21,"nodeType":"89","messageId":"90","endLine":29,"endColumn":23},{"ruleId":"87","severity":1,"message":"88","line":38,"column":25,"nodeType":"89","messageId":"90","endLine":38,"endColumn":27},{"ruleId":"87","severity":1,"message":"93","line":48,"column":25,"nodeType":"89","messageId":"90","endLine":48,"endColumn":27},{"ruleId":"87","severity":1,"message":"88","line":89,"column":48,"nodeType":"89","messageId":"90","endLine":89,"endColumn":50},{"ruleId":"87","severity":1,"message":"88","line":102,"column":28,"nodeType":"89","messageId":"90","endLine":102,"endColumn":30},{"ruleId":"94","severity":1,"message":"95","line":176,"column":6,"nodeType":"96","endLine":176,"endColumn":25,"suggestions":"97"},{"ruleId":"94","severity":1,"message":"95","line":183,"column":6,"nodeType":"96","endLine":183,"endColumn":22,"suggestions":"98"},{"ruleId":"99","severity":1,"message":"100","line":196,"column":70,"nodeType":"101","messageId":"102","endLine":196,"endColumn":72},{"ruleId":"103","severity":1,"message":"104","line":204,"column":23,"nodeType":"105","endLine":204,"endColumn":74},{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"78","severity":1,"message":"110","line":4,"column":10,"nodeType":"80","messageId":"81","endLine":4,"endColumn":24},{"ruleId":"78","severity":1,"message":"111","line":11,"column":10,"nodeType":"80","messageId":"81","endLine":11,"endColumn":20},{"ruleId":"87","severity":1,"message":"88","line":22,"column":59,"nodeType":"89","messageId":"90","endLine":22,"endColumn":61},{"ruleId":"94","severity":1,"message":"95","line":37,"column":6,"nodeType":"96","endLine":37,"endColumn":23,"suggestions":"112"},{"ruleId":"78","severity":1,"message":"92","line":5,"column":10,"nodeType":"80","messageId":"81","endLine":5,"endColumn":23},{"ruleId":"87","severity":1,"message":"88","line":17,"column":21,"nodeType":"89","messageId":"90","endLine":17,"endColumn":23},{"ruleId":"103","severity":1,"message":"104","line":57,"column":11,"nodeType":"105","endLine":57,"endColumn":57},{"ruleId":"106","replacedBy":"113"},{"ruleId":"108","replacedBy":"114"},{"ruleId":"87","severity":1,"message":"88","line":214,"column":56,"nodeType":"89","messageId":"90","endLine":214,"endColumn":58},{"ruleId":"78","severity":1,"message":"92","line":5,"column":10,"nodeType":"80","messageId":"81","endLine":5,"endColumn":23},{"ruleId":"87","severity":1,"message":"88","line":18,"column":21,"nodeType":"89","messageId":"90","endLine":18,"endColumn":23},{"ruleId":"94","severity":1,"message":"95","line":48,"column":6,"nodeType":"96","endLine":48,"endColumn":22,"suggestions":"115"},"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useContext' is defined but never used.","'Children' is defined but never used.","'Image' is defined but never used.","'BuilderContext' is defined but never used.","'setState' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'calculateCardHeight' is assigned a value but never used.","'AddTextButton' is defined but never used.","Expected '!==' and instead saw '!='.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'register'. Either include it or remove the dependency array.","ArrayExpression",["116"],["117"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","no-native-reassign",["118"],"no-negated-in-lhs",["119"],"'ToolbarHeading' is defined but never used.","'InputField' is defined but never used.",["120"],["118"],["119"],["121"],{"desc":"122","fix":"123"},{"desc":"124","fix":"125"},"no-global-assign","no-unsafe-negation",{"desc":"126","fix":"127"},{"desc":"124","fix":"128"},"Update the dependencies array to be: [isChangingHeading, register]",{"range":"129","text":"130"},"Update the dependencies array to be: [isChangingBody, register]",{"range":"131","text":"132"},"Update the dependencies array to be: [isChangingTitle, register]",{"range":"133","text":"134"},{"range":"135","text":"132"},[5124,5143],"[isChangingHeading, register]",[5284,5300],"[isChangingBody, register]",[1379,1396],"[isChangingTitle, register]",[1602,1618]]