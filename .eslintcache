[{"/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/main/Flows/builder.tsx":"1","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Toolbar/index.tsx":"2","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Image/index.tsx":"3","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Card/index.tsx":"4","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Toolbar/styles.ts":"5","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Text/index.tsx":"6","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Modals/ConnectFlow.tsx":"7","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Text/styles.ts":"8","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Modals/styles.ts":"9"},{"size":29299,"mtime":1612720742928,"results":"10","hashOfConfig":"11"},{"size":8252,"mtime":1612622034756,"results":"12","hashOfConfig":"11"},{"size":3108,"mtime":1612614260275,"results":"13","hashOfConfig":"11"},{"size":10853,"mtime":1612614227019,"results":"14","hashOfConfig":"11"},{"size":2865,"mtime":1612600468451,"results":"15","hashOfConfig":"11"},{"size":4192,"mtime":1612622112765,"results":"16","hashOfConfig":"11"},{"size":2919,"mtime":1612694265888,"results":"17","hashOfConfig":"11"},{"size":1226,"mtime":1612623245742,"results":"18","hashOfConfig":"11"},{"size":386,"mtime":1612599018149,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":46,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},"v8ty68",{"filePath":"23","messages":"24","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":34,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/rabinson/Freelancing/ShipboardBot/frontend/src/pages/main/Flows/builder.tsx",["43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88"],"import React, { useState } from 'react';\nimport {withRouter} from 'react-router-dom'\nimport { FlowBuilderWrapper } from './styles';\nimport { Stage, Layer, Rect, Image, Text, Group, Circle } from 'react-konva';\nimport Toolbar from '../../../components/dashboard/builder/Toolbar/index';\nimport PuffLoader from \"react-spinners/PuffLoader\";\n\nimport {\n  handleRenderingCards,\n  getImage,\n  calculateHeightOfMessageBox,\n  handleWheel,\n  Edge,\n  URLImage,\n} from './helper';\nimport {\n  useBuilder,\n} from '../../../services/Builder/BuilderProvider';\nimport { BiMessageSquareAdd } from 'react-icons/bi';\nimport { saveMessage, getMessages, updateMessage, deleteMessage, createAndConnectMessage } from '../../../apis/messages';\nimport { toast } from 'react-toastify';\nimport { getFlow } from '../../../apis/flows';\nimport { createAndConnectWithButton, updateButton } from '../../../apis/buttons';\n\nconst FlowBuilder = (props) => {\n  const [isToolbarActive, setIsToolbarActive] = useState(null);\n  const [builderState, setBuilderState, sidebar] = useBuilder();\n  const [flow, setFlow] = useState(null);\n  const [id, setId] = useState(null);\n  const [mousePosition, setMousePosition] = useState({\n    x: 0,\n    y: 0,\n  });\n  const [isEdging, setIsSetting] = useState(false);\n  const [showToolOption, setShowToolOption] = useState(false);\n  const [edgingMessageId, setEdgingMessageId] = useState(null);\n  const [edgingButtonId, setEdgingButtonId] = useState(null);\n  const [edgingButtonMessageId, setEdgingButtonMessageId] = useState(null);\n  const [edgingButtonChildId, setEdgingButtonChildId] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const [state, setState] = useState({\n    layerScale: 1,\n    layerX: 0,\n    layerY: 0,\n  });\n\n  const TrashIcon = \"data:image/svg+xml;base64,\" + window.btoa('<svg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" viewBox=\"0 0 24 24\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"none\" d=\"M17.004 20L17.003 8h-1-8-1v12H17.004zM13.003 10h2v8h-2V10zM9.003 10h2v8h-2V10zM9.003 4H15.003V6H9.003z\"></path><path d=\"M5.003,20c0,1.103,0.897,2,2,2h10c1.103,0,2-0.897,2-2V8h2V6h-3h-1V4c0-1.103-0.897-2-2-2h-6c-1.103,0-2,0.897-2,2v2h-1h-3 v2h2V20z M9.003,4h6v2h-6V4z M8.003,8h8h1l0.001,12H7.003V8H8.003z\"></path><path d=\"M9.003 10H11.003V18H9.003zM13.003 10H15.003V18H13.003z\"></path></svg>');\n\n  const getNextNode = (id) => {\n    if (id) {\n      const nextIndex = builderState.findIndex((obj) => obj.id == id);\n      if (nextIndex == -1) {\n        return mousePosition;\n      }\n      return builderState[nextIndex].position;\n    }\n  };\n\n  const hideToolbar = () => {\n    setIsToolbarActive(false);\n    setId(0);\n  };\n\n  const showToolbar = (id) => {\n    setId(id);\n    setIsToolbarActive(true);\n  };\n\n \nconst handleRenderingChildrens = (message) => {\n  var lastPosition = 70;\n  return message.children.map(function (child) {\n    var yposition = lastPosition;\n    if (child.type === 'card') {\n      lastPosition = lastPosition + child.cards[0].height;\n    } else if (child.type === 'text') {\n      const buttons = child.buttons.length;\n      lastPosition = lastPosition + child.height + (buttons * 40) + 40;\n    } else if (child.type === 'image') {\n      lastPosition = lastPosition + child.height + 20;\n    }\n    return getChildren(message, child, yposition);\n  });\n};\n  \n  const getChildren = (message, child, lastPosition) => {\n    // var messageHeight = calculateHeightOfMessageBox(message.children);\n  if (child.type === 'text') {\n    var textButtons = child.buttons;\n    var boxHeight = (child.height * 1.05) + (textButtons.length * 40) + 10;\n    return (\n      <Group x={20} y={lastPosition}>\n        <Rect\n          fill=\"#F0F4F7\"\n          cornerRadius={5}\n          height={boxHeight}\n          width={300}\n          stroke=\"lightGrey\"\n          strokeWidth={1}\n          shadowColor=\"#95bbdf\"\n          shadowOpacity={0.5}\n          shadowBlur={7}\n        />\n        <Text\n          x={15}\n          y={7}\n          text={child.value}\n          fontSize={15}\n          lineHeight={1.2}\n          width={280}\n        />\n        {child.buttons.map((button, index) => {\n          var y = (child.height * 1.05) + (40 * index) + 10;\n          var node2 = getNextNode(button.next);\n          return (\n            <Group key={button.id}>\n              { button.next &&\n                  <Edge\n                    height={boxHeight}\n                    node1={{ x: -60, y: - boxHeight + 30 + (y)}}\n                    node2={{ x: node2.x - message.position.x -20, y: node2.y - message.position.y - 80}}\n                    width={20}\n                  />\n              }\n              <Rect\n                x={25}\n                y={y}\n                fill=\"#FFFFFF\"\n                cornerRadius={5}\n                height={30}\n                width={250}\n                shadowOpacity={0.5}\n                shadowBlur={7}\n                align={\"center\"}\n              />\n              <Text\n                x={10}\n                y={y + 3}\n                text={button.name}\n                fontSize={15}\n                width={280}\n                lineHeight={1.5}\n                align={\"center\"}\n              />\n              <Circle x={260} y={y + 14} radius={9} fill=\"#8392AB\" strokeWidth={1}\n                onMouseOver={() => { document.body.style.cursor = 'pointer' }}\n                onMouseOut={() => { document.body.style.cursor = 'default' }}\n                onClick={(e) => {\n                  e.cancelBubble = true;\n                  connectButtonEdge(message.id, child.id, button.id)\n                }}\n             />\n            </Group>\n          );\n         })}\n      </Group>\n    );\n  } else if (child.type === 'image') {\n    return getImage(child, lastPosition);\n  } else if (child.type === 'card') {\n    return (\n      <Group x={20} y={lastPosition}>\n        {handleRenderingCards(child)}\n      </Group>\n    );\n  }\n};\n\n  const getStageWidth = () => {\n    return sidebar ? window.innerWidth - 280 : window.innerWidth - 90;\n  };\n\n  const setSelectedTrue = (messageId) => {\n    var previousSelected = getSelectedNode(builderState);\n    if (previousSelected >= 0) {\n      setBuilderState(\n        builderState.map((item, index) => {\n          if (index == messageId) {\n            item.isSelected = true;\n          }\n          if (index == previousSelected) {\n            item.isSelected = false;\n          }\n          return item;\n        })\n      );\n    } else {\n      setBuilderState(\n        builderState.map((item, index) => {\n          if (index == messageId) {\n            item.isSelected = true;\n          }\n          return item;\n        })\n      );\n    }\n  };\n\n  const setHoverTrue = (messageId) => {\n    var previousHover = getHoveredNode(builderState);\n    if (previousHover >= 0) {\n      setBuilderState(\n        builderState.map((item, index) => {\n          if (index == messageId) {\n            item.isHover = true;\n          }\n          if (index == previousHover) {\n            item.isHover = false;\n          }\n          return item;\n        })\n      );\n    } else {\n      setBuilderState(\n        builderState.map((item, index) => {\n          if (index == messageId) {\n            item.isHover = true;\n          }\n          return item;\n        })\n      );\n    }\n  };\n\n  const setHoverFalse = (messageId) => {\n    setBuilderState(\n      builderState.map((item, index) => {\n        if (index == messageId) {\n          item.isHover = false;\n        }\n        return item;\n      })\n    );\n  };\n\n  const connectEdge = (messageId) => {\n    setEdgingButtonId(null);\n    setEdgingMessageId(null);\n\n    if (!showToolOption) {\n      setIsSetting(true);\n      setEdgingMessageId(messageId);\n      setBuilderState(\n        builderState.map((item) => {\n          if (item.id == messageId) {\n            item.next = 'dummy';\n          }\n          return item;\n        })\n      );\n    }\n  };\n\n  const connectButtonEdge = (messageId, childId, buttonId) => {\n    setEdgingButtonId(null);\n    setEdgingMessageId(null);\n    if (!showToolOption) {\n      setIsSetting(true);\n      setEdgingButtonId(buttonId);\n      setEdgingButtonMessageId(messageId);\n      setEdgingButtonChildId(childId);\n\n      setBuilderState(\n        builderState.map((item) => {\n          if (item.id == messageId) {\n            item.children.map((child) => {\n              if (child.id == childId) {\n                child.buttons.map((button) => {\n                  if (button.id == buttonId) {\n                    button.next = \"dummy\"\n                  }\n                  return button;\n                })\n              }\n              return child;\n            })\n          }\n          return item;\n        })\n      );\n    }\n  }\n\n  const handleMousePosition = (event) => {\n    if (!showToolOption) {\n      var point = event.target.getStage().getPointerPosition();\n      setMousePosition({\n        x: point.x,\n        y: point.y,\n      });\n    }\n  };\n\n  const handleClickOnCanvas = () => {\n    if (isEdging) {\n      var hoveredIndex = getHoveredNode(builderState);\n      if (hoveredIndex > 0) {\n        //If the edging is hovered over another message and connect that message\n        var messageIdOfHover = builderState[hoveredIndex].id\n        if (messageIdOfHover != edgingMessageId) {\n          if (edgingMessageId) {\n            updateMessage({\n              next: messageIdOfHover\n            }, edgingMessageId).then((response) => { \n              setBuilderState(\n                builderState.map((item, index) => {\n                  if (item.id == edgingMessageId) {\n                    item.next = messageIdOfHover\n                  }\n                  return item;\n                })\n              );\n            }).catch((err) => {\n              toast.error(\"Something went wrong\");\n            }).finally(() => {\n              setEdgingMessageId(null);\n            })\n           } else if (edgingButtonId) {\n            updateButton({\n              next: messageIdOfHover\n            }, edgingButtonId).then((response) => {\n              setBuilderState(\n                builderState.map((item, index) => {\n                  if (item.id == edgingButtonMessageId) {\n                    item.children.map((child) => {\n                      if (child.id == edgingButtonChildId) {\n                        child.buttons.map((button) => {\n                          if (button.id == edgingButtonId) {\n                            button.next = messageIdOfHover\n                          }\n                        })\n                      }\n                    })\n                  }  \n                  return item;\n                })\n              );\n            }).catch((err) => {\n              toast.error(\"Something went wrong\")\n            }).finally(() => {\n              setEdgingButtonId(null);\n            })\n          }\n        } \n      } else {\n        setShowToolOption(true);\n      }\n    }\n  };\n\n  const handleAddMessage = () => {\n    let number = builderState.length + 1;\n    saveMessage({\n      name: 'Send Message #' + number,\n      type: 'default',\n      position_x: 1200,\n      position_y: 60,\n      flow: props.match.params.id\n    }).then((response) => {\n       setBuilderState([...builderState, response.data]);\n\n    }).catch((err) => {\n      toast.error(\"Something went wrong\")\n    })\n  }\n\n  const handleDeleteMessage = (item, index) => {\n    if (index > 0) {\n      //Delete the message\n    builderState.splice(index, 1);\n    //Delete the edging where this message belongs to\n    const messageIndexHavingNextOfDeleteMessage = getMessageIndexWhichHasNextOfGivenMessageId(builderState, item.id);\n    setBuilderState(\n      builderState.map((item, index) => {\n        if (index == messageIndexHavingNextOfDeleteMessage) {\n          item.next = \"\"\n        }\n        return item;\n      })\n    );\n    deleteMessage(item.id).then(() => {\n      setShowToolOption(false);\n      setEdgingMessageId(null);\n      setEdgingButtonId(null);\n      setIsSetting(false);\n    }).catch((err) => {\n        toast.error(\"Something went wrong\");\n      })\n    } else {\n      toast.info(\"You cannot delete the start message\")\n    }\n  }\n\n  const handleDragMessage = (e, item, index) =>  {\n    var updatedPosition = {\n      x: e.target.x(),\n      y: e.target.y(),\n    };\n\n    setBuilderState(\n      builderState.map((item, ind) => {\n        if (ind == index) {\n          item.position = updatedPosition;\n        }\n        return item;\n      })\n    );\n  }\n\n  const updateMessagePosition = (item) => {\n    updateMessage({\n      position_x: item.position.x,\n      position_y: item.position.y\n    }, item.id).catch((err) => {\n      toast.error('Something went wrong')\n    })    \n  }\n\n  const handleToolOptionNewMessageAction = () => {\n    setIsSetting(false);\n    setShowToolOption(false);\n    let number = builderState.length + 1;\n    var newMessage = {\n      name: 'Send Message #' + number,\n      type: 'default',\n      position_x: mousePosition.x,\n      position_y: mousePosition.y,\n      flow: props.match.params.id\n    }\n\n    if (edgingMessageId) {\n      createAndConnectMessage(newMessage, edgingMessageId)\n        .then((response) => {\n          setBuilderState(\n            builderState.map((item) => {\n              if (item.id == edgingMessageId) {\n                item.next = response.data.id;\n              }\n              return item;\n            })\n          );\n          setBuilderState([...builderState, response.data]);\n        }).catch((err) => {\n          toast.error(\"Something went wrong\")\n        }).finally(() => {\n          setEdgingMessageId(null);\n        })\n    } else if (edgingButtonId) {\n      createAndConnectWithButton(newMessage, edgingButtonId)\n        .then((response) => {\n          setBuilderState(\n            builderState.map((item) => {\n              if (item.id == edgingButtonMessageId) {\n                item.children.map((child) => {\n                  if (child.id == edgingButtonChildId) {\n                    child.buttons.map((button) => {\n                      if (button.id == edgingButtonId) {\n                        button.next = response.data.id\n                      }\n                      return button;\n                    })\n                  }\n                  return child;\n                })\n              }\n              return item;\n            })\n          );\n          setBuilderState([...builderState, response.data]);\n        }).catch((err) => {\n          toast.error(\"Something went wrong\")\n        }).finally(() => {\n          setEdgingButtonId(null);\n          setEdgingButtonMessageId(null);\n          setEdgingButtonChildId(null);\n        })\n    }\n  }\n\n  const handleToolOptionConnectFlow = () => {\n    setIsSetting(false);\n    setShowToolOption(false);\n    let number = builderState.length + 1;\n    var newFlow = {\n      name: 'Connect Flow #' + number,\n      type: 'flow',\n      position_x: mousePosition.x,\n      position_y: mousePosition.y,\n      flow: props.match.params.id\n    }\n    if (edgingMessageId) {\n      createAndConnectMessage(newFlow, edgingMessageId).then((response) => {\n        setBuilderState(\n          builderState.map((item) => {\n            if (item.id == edgingMessageId) {\n              item.next = response.data.id;\n            }\n            return item;\n          })\n        );\n        setBuilderState([...builderState, response.data]);\n       \n      }).catch((err) => {\n        toast.error(\"Something went wrong\")\n      }).finally(() => {\n        setEdgingMessageId(null);\n      });\n    } else if (edgingButtonId) {\n      createAndConnectWithButton(newFlow, edgingButtonId)\n        .then((response) => {\n          setBuilderState(\n            builderState.map((item) => {\n              if (item.id == edgingButtonMessageId) {\n                item.children.map((child) => {\n                  if (child.id == edgingButtonChildId) {\n                    child.buttons.map((button) => {\n                      if (button.id == edgingButtonId) {\n                        button.next = response.data.id\n                      }\n                      return button;\n                    })\n                  }\n                  return child;\n                })\n              }\n              return item;\n            })\n          );\n          setBuilderState([...builderState, response.data]);\n        }).catch((err) => {\n          toast.error(\"Something went wrong\")\n        }).finally(() => {\n          setEdgingButtonId(null);\n          setEdgingButtonMessageId(null);\n          setEdgingButtonChildId(null);\n        })\n    }\n  }\n\n  const handleToolOptionCancel = () => {\n    setShowToolOption(false);\n    if (isEdging) setIsSetting(false);\n    if (edgingMessageId) {\n      setBuilderState(\n        builderState.map((item) => {\n          if (item.id == edgingMessageId) {\n            item.next = \"\"\n          }\n          return item;\n        })\n      );\n      if (edgingMessageId) setEdgingMessageId(null);\n    } else if (edgingButtonId) {\n        setBuilderState(\n          builderState.map((item) => {\n            if (item.id == edgingButtonMessageId) {\n              item.children.map((child) => {\n                if (child.id == edgingButtonChildId) {\n                  child.buttons.map((button) => {\n                    if (button.id == edgingButtonId) {\n                      button.next = null\n                    }\n                    return button;\n                  })\n                }\n                return child;\n              })\n            }\n            return item;\n          })\n        );\n        if(edgingButtonId) setEdgingButtonId(null);\n        if(edgingButtonChildId) setEdgingButtonChildId(null);\n        if(edgingButtonMessageId) setEdgingButtonMessageId(null);\n      }          \n    }\n  React.useEffect(() => {\n    setIsLoading(true);\n    getMessages(props.match.params.id)\n      .then((response) => {\n        setBuilderState(response.data)\n      })\n      .catch((err) => {\n        toast.error(\"Something went wrong\")\n      }).finally(() => {\n        setIsLoading(false);\n      })\n    getFlow(props.match.params.id)\n      .then((response) => {  \n        setFlow(response.data);\n    }).catch((err) => {\n      toast.error(\"Something went wrong\")\n    })\n  }, []);\n\n  const getToolOption = () => {\n    return (\n      <Group  x={mousePosition.x} y={mousePosition.y} zIndex={200}\n        onMouseOver={() => { document.body.style.cursor = 'pointer' }}\n        onMouseOut={() => { document.body.style.cursor = 'default' }}\n      >\n        <Group onClick={handleToolOptionNewMessageAction}>\n          <Rect\n            width={200}\n            height={50}\n            fill=\"#FDFDFD\"\n            strokeWidth={2}\n            shadowColor=\"gray\"\n            shadowOpacity={0.7}\n            shadowBlur={2}\n            onMouseDown={(e) => {\n              e.target.setAttr('fill', ' #eef1f4');\n            }}\n          />\n          <Text\n            x={15}\n            y={15}\n            text=\"+ New Message\"\n            fontFamily={'Roboto'}\n            fontSize={20}\n            fill={'#5850eb'}\n          />\n        </Group>\n        <Group y={50} onClick={handleToolOptionConnectFlow}>\n          <Rect\n            width={200}\n            height={50}\n            fill=\"#FDFDFD\"\n            strokeWidth={2}\n            shadowColor=\"gray\"\n            shadowOpacity={0.7}\n            shadowBlur={2}\n            onMouseDown={(e) => {\n              e.target.setAttr('fill', ' #eef1f4');\n            }}\n          />\n          <Text\n            x={15}\n            y={15}\n            text=\"+ Connect Flow\"\n            fontFamily={'Roboto'}\n            fontSize={20}\n            fill={'#5850eb'}\n          />\n        </Group>\n        <Group y={100}  onClick={handleToolOptionCancel}>\n          <Rect\n            width={200}\n            height={50}\n            fill=\"#FDFDFD\"\n            strokeWidth={2}\n            shadowColor=\"gray\"\n            shadowOpacity={0.7}\n            shadowBlur={2}\n            onMouseDown={(e) => {\n              e.target.setAttr('fill', ' #eef1f4');\n            }}\n          />\n          <Text\n            x={15}\n            y={15}\n            text=\"- Cancel\"\n            fontFamily={'Roboto'}\n            fontSize={20}\n            fill={'#5850eb'}\n          />\n        </Group>\n      </Group>\n    );\n  }\n  const getDefaultMessage = (item, index, messageHeight) => {\n    return (\n      <Group\n        x={item.position?.x}\n        y={item.position?.y}\n        draggable\n        onClick={(e) => {\n          showToolbar(item.id);\n          setSelectedTrue(index);\n        }}\n        onMouseEnter={(e) => {\n          setHoverTrue(index);\n        }}\n        onMouseLeave={(e) => {\n          setHoverFalse(index);\n        }}\n        hitOnDragEnabled={true}\n        onDragMove={(e) => {\n          handleDragMessage(e, item, index)\n        }}\n        onDragEnd={() => { updateMessagePosition(item) }}\n      >\n        {index === 0 &&\n          <Group x={10} y={-40}>\n            <Rect cornerRadius={7} stroke={\"green\"} strokeWidth={2} fill=\"#FDFDFD\" width={60} height={30} />\n            <Text\n              x={13}\n              y={8}\n              text={\"Start\"}\n              fontFamily={'Roboto'}\n              fontSize={15}\n              fill={'green'}\n            />\n          </Group>\n        }\n        <Rect\n          cornerRadius={16}\n          height={messageHeight}\n          width={340}\n          fill=\"#FDFDFD\"\n          strokeWidth={1}\n          stroke={ \"#5850EB\"}\n          shadowColor={getShadowColor(item)}\n          shadowOpacity={1}\n          shadowBlur={7}\n        />\n        {item.isHover &&\n          <>\n            <Rect\n              width={50} height={30} x={330} y={10} />\n            <URLImage\n              onMouseOver={() => { document.body.style.cursor = 'pointer' }}\n              onMouseOut={() => { document.body.style.cursor = 'default' }}\n              onClick={() => { handleDeleteMessage(item, index) }}\n              image={TrashIcon} x={345} y={10} height={25} width={25} />\n          </>\n        }\n        <Circle x={30} y={30} radius={15} fill=\"#5850EB\" />\n        <Text\n          x={55}\n          y={22}\n          text={item.name}\n          fontFamily={'Roboto'}\n          fontSize={20}\n          fill={'gray'}\n        />\n        <Group\n          x={340}\n          y={messageHeight - 20}\n          onMouseOver={() => { document.body.style.cursor = 'pointer' }}\n          onMouseOut={() => { document.body.style.cursor = 'default' }}\n          onClick={(e) => {\n            e.cancelBubble = true;\n            connectEdge(item.id)\n          }}>\n          <Circle radius={9} fill=\"#8392AB\" strokeWidth={1} />\n          <Text\n            x={-80}\n            y={-8}\n            text=\"Next Step\"\n            fontFamily={'Roboto'}\n            fontSize={15}\n            fontWeight={300}\n            fill={'gray'}\n          />\n        </Group>\n        {typeof item.children == 'object' ? (\n          <>\n            {item.children.length > 0 ? (\n              handleRenderingChildrens(item)\n            ) : (\n                <React.Fragment key={item}>\n                  <Group>\n                    <Rect\n                      x={20}\n                      y={75}\n                      height={60}\n                      width={300}\n                      fill=\"#EEF1F4\"\n                      cornerRadius={16}\n                    />\n                    <Text\n                      text=\"No Content\"\n                      x={110}\n                      y={95}\n                      fontFamily={'Roboto'}\n                      fontSize={20}\n                      fontWeight={300}\n                      fill={'blue'}\n                    />\n                  </Group>\n                </React.Fragment>\n              )}\n          </>\n        ) : null}\n      </Group>\n    );\n  }\n  const getFlowMessage = (item, index) => {\n    return (\n      <Group\n      x={item.position?.x}\n      y={item.position?.y}\n      draggable\n      onClick={(e) => {\n        showToolbar(item.id);\n        setSelectedTrue(index);\n      }}\n      onMouseEnter={(e) => {\n        setHoverTrue(index);\n      }}\n      onMouseLeave={(e) => {\n        setHoverFalse(index);\n      }}\n      hitOnDragEnabled={true}\n      onDragMove={(e) => {\n        handleDragMessage(e, item, index)\n      }}\n      onDragEnd={() => { updateMessagePosition(item) }}\n    >\n      <Rect\n        cornerRadius={16}\n        height={200}\n        width={340}\n        fill=\"#FDFDFD\"\n        stroke={ \"#f9bf3b\"}\n        strokeWidth={1}\n        shadowColor={getShadowColor(item)}\n        shadowOpacity={1}\n        shadowBlur={7}\n      />\n      {item.isHover &&\n        <>\n          <Rect\n            width={50} height={30} x={330} y={10} />\n          <URLImage\n            onMouseOver={() => { document.body.style.cursor = 'pointer' }}\n            onMouseOut={() => { document.body.style.cursor = 'default' }}\n            onClick={() => { handleDeleteMessage(item, index) }}\n            image={TrashIcon} x={345} y={10} height={25} width={25} />\n        </>\n      }\n      <Circle x={30} y={30} radius={15} fill=\"#f9bf3b\" />\n      <Text\n        x={55}\n        y={22}\n        text={item.name}\n        fontFamily={'Roboto'}\n        fontSize={20}\n        fill={'gray'}\n        />\n        {item.children.length > 0 ? (\n          <Group>\n          <Rect\n            x={20}\n            y={75}\n            height={60}\n            width={300}\n            stroke=\"green\"\n            strokeWidth={1}\n            fill=\"#EEF1F4\"\n            cornerRadius={16}\n          />\n          <Text\n            text={item.children[0].name}\n            x={40}\n            y={95}\n            fontFamily={'Roboto'}\n            fontSize={20}\n            fontWeight={300}\n              fill={\"#f9bf3b\"}\n              align={\"center\"}\n          />\n        </Group>\n        ) : (\n            <React.Fragment key={item}>\n              <Group>\n                <Rect\n                  x={20}\n                  y={75}\n                  height={60}\n                  width={300}\n                  fill=\"#EEF1F4\"\n                  cornerRadius={16}\n                />\n                <Text\n                  text=\"Select Flow\"\n                  x={110}\n                  y={95}\n                  fontFamily={'Roboto'}\n                  fontSize={20}\n                  fontWeight={300}\n                  fill={\"#f9bf3b\"}\n                  align={\"center\"}\n                />\n              </Group>\n            </React.Fragment>\n          )}\n    </Group>\n    );\n  }\n  const getMessageBox = (item, index, messageHeight) => {\n    if (item.type == \"default\") {\n      return getDefaultMessage(item, index, messageHeight);\n    } else if (item.type == \"flow\") {\n      return getFlowMessage(item, index);\n    }\n  }\n  \n  if (isLoading) {\n    return (\n      <div className=\"loader-wrapper\">\n        <PuffLoader color={' #5850EC'} loading={isLoading} size={75} />\n      </div>\n    );\n  } else {\n    return (\n      <FlowBuilderWrapper>\n        {flow && <div className=\"header\">{flow.name}</div>}\n        <div className=\"stage-action\">\n          <BiMessageSquareAdd\n            onClick={handleAddMessage}\n          />\n        </div>\n        {isToolbarActive && <Toolbar id={id} hideToolbar={hideToolbar} bot={flow.bot} flow={flow.id} />}\n        <Stage\n          width={getStageWidth()}\n          height={window.innerHeight - 70}\n          scaleX={state.layerScale}\n          scaleY={state.layerScale}\n          onMouseMove={handleMousePosition}\n          x={0}\n          y={0}\n          onClick={handleClickOnCanvas}>\n          <Layer name=\"layer_1\" draggable onWheel={handleWheel}>\n            <Rect\n              x={-window.innerWidth}\n              y={-window.innerHeight}\n              width={window.innerWidth * 3}\n              height={window.innerHeight * 3}\n              fill=\"\"\n            />\n            {showToolOption && getToolOption()}\n            {builderState &&\n              typeof builderState == 'object' &&\n              builderState.map((item, index) => {\n                var messageHeight = calculateHeightOfMessageBox(item.children);\n                return (\n                  <React.Fragment key={item.id}>\n                    {(item.type === \"default\" && item.next) ? (\n                      <Edge\n                        height={messageHeight}\n                        node1={item.position}\n                        node2={getNextNode(item.next)}\n                      />\n                    ) : null}\n                    {getMessageBox(item, index, messageHeight)}\n                  </React.Fragment>\n                );\n              })}\n          </Layer>\n        </Stage>\n      </FlowBuilderWrapper>\n    );\n  }\n};\nconst getShadowColor = (item) => {\n  if (item.isSelected) {\n    if (item.type == \"default\") {\n      return '#1e824c';\n    } else if (item.type == \"flow\") {\n      return \"#f9ae23\";\n    }\n   \n  } else if (item.isHover) {\n    if (item.type == \"default\") {\n      return '#8078FF';\n    } else if (item.type == \"flow\") {\n      return \"#f9bf3b\";\n    }\n  } else {\n    return '#95bbdf';\n  }\n};\n\nconst getSelectedNode = (state) => {\n  return state.findIndex((obj) => obj.isSelected == true);\n};\n\nconst getMessageIndexWhichHasNextOfGivenMessageId = (state, messageId) => {\n  return state.findIndex((obj) => obj.next == messageId);\n}\n\nconst getHoveredNode = (state) => {\n  return state.findIndex((obj) => obj.isHover == true);\n};\n\nexport default withRouter(FlowBuilder);\n","/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Toolbar/index.tsx",["89","90","91","92","93","94","95","96","97"],"import React, { useContext, useState, useRef, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { ToolbarWrapper, ToolbarMenu, ToolbarButtonGroup } from './styles';\nimport { VerticalGap } from '../../../common/typography';\nimport { ToolbarButton } from '../../../common/buttons';\nimport { BuilderContext } from '../../../../services/Builder/BuilderProvider';\nimport { GiCancel } from 'react-icons/gi';\nimport FormImage from '../Form/Image/index';\nimport FormText from '../Form/Text/index';\nimport FormCard from '../Form/Card/index';\nimport { connectFlowToMessage, updateMessage } from '../../../../apis/messages';\nimport { toast } from 'react-toastify';\nimport { saveText } from '../../../../apis/texts';\nimport { saveImage } from '../../../../apis/images';\nimport { addCardGroup } from '../../../../apis/cards';\nimport { useModal } from '../../../../services/Modal/ModalProvider';\nimport ConnectFlowModal from '../Modals/ConnectFlow';\n\n\nconst Toolbar = ({ id, hideToolbar, bot, flow }) => {\n  const [builderState, setBuilderState] = useContext(BuilderContext);\n  const [isChangingTitle, setIsChangingTitle] = useState(false);\n  const { register, handleSubmit } = useForm({ mode: 'onChange' });\n  const { showModal, hideModal } = useModal();\n\n  // const titleRef = useRef<HTMLInputElement>(null);\n\n  //Find index of specific object using findIndex method.\n  const objIndex = builderState.findIndex((obj) => obj.id == id);\n\n  const onChangeTitle = (data) => {\n    updateMessage({\n      name: data.title\n    }, id).then((response) => {\n      setBuilderState(\n        builderState.map((item, ind) => {\n          if (ind == objIndex) {\n           item.name = data.title\n          }\n          return item;\n        })\n      );\n    }).catch((err) => {\n      toast.error('Something went wrong')\n    })    \n  };\n  const openConnectFlowModal = () => {\n    showModal(() => (\n      <ConnectFlowModal flow={flow} bot={bot} hideModal={hideModal} handleSelect={handleSelect}/>\n    ));\n  }\n\n  const handleSelect = (flowId, flowName) => {\n    connectFlowToMessage({\n      flow: flowId\n    }, id).catch((err) => {\n      toast.error(\"Something went wrong\")\n    })\n    setBuilderState(\n      builderState.map((item, index) => {\n        if (item.id == id) {\n          item.children.push({\n            name: flowName\n          })\n        }\n        return item;\n      })\n    );\n    hideModal();\n  }\n\n  const removeConnetedFlow = () => {\n    connectFlowToMessage({}, id).catch((err) => {\n      toast.error(\"Something went wrong\")\n    })\n    setBuilderState(\n      builderState.map((item) => {\n        if (item.id == id) {\n          item.children.splice(0, 1);\n        }\n        return item;\n      })\n    );\n  }\n  \n\n  const getContents = () => {\n    if (builderState[objIndex].type === \"default\") {\n      return (\n        <ToolbarMenu>\n          <div className={isChangingTitle ? 'header active' : 'header'}>\n            <form onBlur={handleSubmit(onChangeTitle)}>\n              <input\n                maxLength={35}\n                className=\"heading-input\"\n                ref={register({required: true, minLength: 3})}\n                id=\"title\"\n                name=\"title\"\n                defaultValue={builderState[objIndex].name}\n                onBlur={() => setIsChangingTitle(false)}\n              />\n            </form>\n          </div>\n          {builderState[objIndex].children.length > 0 ? (\n            builderState[objIndex].children.map((child) => {\n              return (\n                <React.Fragment key={child.id}>\n                  <VerticalGap size=\"3\" />\n                  {getChildren(child, objIndex)}\n                </React.Fragment>\n              );\n            })\n          ) : (\n              <React.Fragment>\n                <VerticalGap size=\"3\" />\n                <p className=\"no-content-text\">No content</p>\n              </React.Fragment>\n            )}\n          <VerticalGap size=\"3\" />\n        <ToolbarButtons id={id} index={objIndex} />\n        </ToolbarMenu>\n      );\n    } else if (builderState[objIndex].type === \"flow\") {\n      return (\n        <ToolbarMenu>\n          <div className='flow-header'>\n            <h4>Connect Flow </h4>\n          </div>\n          {builderState[objIndex].children.length > 0 ? (\n            builderState[objIndex].children.map((child) => {\n              return (\n                <React.Fragment key={child.id}>\n                  <VerticalGap size=\"3\" />\n                  <div className=\"flow-content\">\n                    {child.name}\n                    <button className=\"action-btn\">\n                      <GiCancel onClick={removeConnetedFlow} />\n                  </button>\n                  </div>\n                </React.Fragment>\n              );\n            })\n          ) : (\n              <React.Fragment>\n                <VerticalGap size=\"3\" />\n                <ToolbarButton height=\"4rem\" width=\"25rem\" onClick={openConnectFlowModal}>\n                  Select Flow\n                </ToolbarButton>\n              </React.Fragment>\n            )}\n        </ToolbarMenu>\n      );\n    }\n  }\n\n  return (\n    <ToolbarWrapper>\n      {builderState[objIndex] &&\n        getContents()\n      }\n    </ToolbarWrapper>\n  );\n};\n\nexport default Toolbar;\n\nconst ToolbarButtons = ({ id, index }) => {\n  const [builderState, setBuilderState] = useContext(BuilderContext);\n\n  const addText = () => {\n    var height = builderState[index].height;\n    height = height + 50;\n    const positionIndex = builderState[index].children.length + 1;\n    saveText({\n      text: 'Change text',\n      message: id,\n      position: positionIndex,\n      height: 17\n    }).then((response) => {\n      setBuilderState(\n        builderState.map((item, ind) => {\n          if (ind == index) {\n            item.height = height;\n            item.children.push(response.data);\n          }\n          return item;\n        })\n      );\n    }).catch((err) => {\n      toast.error(\"Something went wrong\");\n    })\n  };\n\n  const addCard = () => {\n    let height = builderState[index].height;\n    height = height + 150;\n    const positionIndex = builderState[index].children.length + 1;\n\n\n    addCardGroup({\n      message: id,\n      position: positionIndex\n    }).then((response) => {\n      console.log(response.data);\n      setBuilderState(\n        builderState.map((item, ind) => {\n          if (ind == index) {\n            item.height = height;\n            item.children.push(response.data);\n          }\n          return item;\n        })\n      );\n    }).catch((err) => {\n      toast.error(\"Something went wrong\");\n    });\n  };\n\n  const addImage = () => {\n    let height = builderState[index].height;\n    height = height + 150;\n    const positionIndex = builderState[index].children.length + 1;\n\n    saveImage({\n      message: id,\n      position: positionIndex\n    }).then((response) => {\n      setBuilderState(\n        builderState.map((item, ind) => {\n          if (ind == index) {\n            item.height = height;\n            item.children.push(response.data);\n          }\n          return item;\n        })\n      );\n    }).catch((err) => {\n      toast.error(\"Something went wrong\");\n    })\n  };\n\n  return (\n    <React.Fragment>\n      <ToolbarButtonGroup>\n        <ToolbarButton\n          height=\"6rem\"\n          width=\"6rem\"\n          fontSize=\"1.2rem\"\n          onClick={addText}>\n          + Text\n        </ToolbarButton>\n        <ToolbarButton\n          height=\"6rem\"\n          width=\"6rem\"\n          fontSize=\"1.2rem\"\n          onClick={addCard}>\n          + Card\n        </ToolbarButton>\n        <ToolbarButton\n          height=\"6rem\"\n          width=\"6rem\"\n          fontSize=\"1.2rem\"\n          onClick={addImage}>\n          + Image\n        </ToolbarButton>\n        {/* <ToolbarButton height=\"4rem\" width=\"25rem\">\n          Next Button\n        </ToolbarButton> */}\n      </ToolbarButtonGroup>\n    </React.Fragment>\n  );\n};\n\nconst getChildren = (children, messageId) => {\n  if (children.type === 'text') {\n    return <FormText messageId={messageId} childId={children.id} />;\n  } else if (children.type === 'image') {\n    return <FormImage messageId={messageId} childId={children.id} />;\n  } else if (children.type === 'card') {\n    return <FormCard messageId={messageId} childId={children.id} />;\n  }\n};\n",["98","99"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Image/index.tsx",["100","101","102","103","104","105","106"],"import React, { useEffect, useRef, useContext } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { ImageWrapper } from './styles';\nimport { BuilderContext } from '../../../../../services/Builder/BuilderProvider';\nimport { AddTextButton } from '../../../../common/buttons';\nimport { BiImageAdd, BiTrash } from 'react-icons/bi';\nimport { uploadImage, deleteImage } from '../../../../../apis/images';\nimport { toast } from 'react-toastify';\n\nconst FormImage = ({ messageId, childId }) => {\n  const [builderState, setBuilderState] = useContext(BuilderContext);\n  const { register, handleSubmit } = useForm({ mode: 'onChange' });\n\n  const imageRef = useRef<HTMLInputElement>(null);\n\n  //Find index of specific object using findIndex method.\n  const childIndex = builderState[messageId].children.findIndex(\n    (obj) => obj.id == childId\n  );\n\n  const image = builderState[messageId].children[childIndex];\n\n  const onSubmit = (data) => {\n    let reader = new FileReader();\n    const formData = new FormData();\n\n    formData.append('image', data.image[0]);\n    formData.append('name', data.image[0].name);\n    \n    reader.onloadend = () => {\n      var height = 180;\n      uploadImage(formData, childId).then((response) => {\n        setBuilderState(\n          builderState.map((item, index) => {\n            if (index == messageId) {\n              item.children.map((child, ind) => {\n                if (ind == childIndex) {\n                  child.selectedImage = data.image[0];\n                  child.imagePreviewUrl = reader.result;\n                  child.height = height;\n                }\n              });\n            }\n            return item;\n          })\n        );\n      }).catch((err) => {\n        toast.error(\"Something went wrong\")\n      })\n    };\n\n    reader.readAsDataURL(data.image[0]);\n  };\n\n  const handleDelete = () => {\n    deleteImage(childId).then((response) => {\n      setBuilderState(\n        builderState.map((item, index) => {\n          if (index == messageId) {\n            item.height -= 150;\n            item.children.splice(childIndex,1)\n          }\n          return item;\n        })\n      );\n    }).catch((err) => {\n      toast.error(\"Something went wrong\");\n    })\n   \n  };\n\n  useEffect(() => {\n    if (imageRef.current) {\n      register(imageRef.current);\n    }\n  });\n\n  return (\n    <ImageWrapper>\n      {image.imagePreviewUrl ? (\n        <div>\n          <img src={image.imagePreviewUrl} alt=\"image\" />\n          {/* <AddTextButton height=\"4rem\" width=\"100%\">\n            Add Button\n          </AddTextButton> */}\n        </div>\n      ) : (\n        <form onChange={handleSubmit(onSubmit)}>\n          <input\n            ref={imageRef}\n            type=\"file\"\n            id={'file' + childIndex}\n            name=\"image\"\n            accept=\"image/*\"\n          />\n          <label htmlFor={'file' + childIndex}>\n            <BiImageAdd />\n            <p>Upload image</p>\n          </label>\n        </form>\n      )}\n      <button className=\"action-btn\">\n        <BiTrash onClick={handleDelete} />\n      </button>\n    </ImageWrapper>\n  );\n};\n\nexport default FormImage;\n",["107","108"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Card/index.tsx",["109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Toolbar/styles.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Text/index.tsx",["143","144","145","146","147","148","149","150","151","152"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Modals/ConnectFlow.tsx",["153","154","155","156"],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Form/Text/styles.ts",[],"/home/rabinson/Freelancing/ShipboardBot/frontend/src/components/dashboard/builder/Modals/styles.ts",[],{"ruleId":"157","severity":1,"message":"158","line":4,"column":30,"nodeType":"159","messageId":"160","endLine":4,"endColumn":35},{"ruleId":"157","severity":1,"message":"161","line":42,"column":17,"nodeType":"159","messageId":"160","endLine":42,"endColumn":25},{"ruleId":"162","severity":1,"message":"163","line":52,"column":64,"nodeType":"164","messageId":"165","endLine":52,"endColumn":66},{"ruleId":"162","severity":1,"message":"163","line":53,"column":21,"nodeType":"164","messageId":"165","endLine":53,"endColumn":23},{"ruleId":"162","severity":1,"message":"163","line":179,"column":21,"nodeType":"164","messageId":"165","endLine":179,"endColumn":23},{"ruleId":"162","severity":1,"message":"163","line":182,"column":21,"nodeType":"164","messageId":"165","endLine":182,"endColumn":23},{"ruleId":"162","severity":1,"message":"163","line":191,"column":21,"nodeType":"164","messageId":"165","endLine":191,"endColumn":23},{"ruleId":"162","severity":1,"message":"163","line":205,"column":21,"nodeType":"164","messageId":"165","endLine":205,"endColumn":23},{"ruleId":"162","severity":1,"message":"163","line":208,"column":21,"nodeType":"164","messageId":"165","endLine":208,"endColumn":23},{"ruleId":"162","severity":1,"message":"163","line":217,"column":21,"nodeType":"164","messageId":"165","endLine":217,"endColumn":23},{"ruleId":"162","severity":1,"message":"163","line":229,"column":19,"nodeType":"164","messageId":"165","endLine":229,"endColumn":21},{"ruleId":"162","severity":1,"message":"163","line":246,"column":23,"nodeType":"164","messageId":"165","endLine":246,"endColumn":25},{"ruleId":"162","severity":1,"message":"163","line":266,"column":23,"nodeType":"164","messageId":"165","endLine":266,"endColumn":25},{"ruleId":"162","severity":1,"message":"163","line":268,"column":28,"nodeType":"164","messageId":"165","endLine":268,"endColumn":30},{"ruleId":"162","severity":1,"message":"163","line":270,"column":33,"nodeType":"164","messageId":"165","endLine":270,"endColumn":35},{"ruleId":"162","severity":1,"message":"166","line":301,"column":30,"nodeType":"164","messageId":"165","endLine":301,"endColumn":32},{"ruleId":"162","severity":1,"message":"163","line":308,"column":31,"nodeType":"164","messageId":"165","endLine":308,"endColumn":33},{"ruleId":"162","severity":1,"message":"163","line":325,"column":31,"nodeType":"164","messageId":"165","endLine":325,"endColumn":33},{"ruleId":"167","severity":1,"message":"168","line":326,"column":47,"nodeType":"169","messageId":"170","endLine":326,"endColumn":49},{"ruleId":"162","severity":1,"message":"163","line":327,"column":36,"nodeType":"164","messageId":"165","endLine":327,"endColumn":38},{"ruleId":"167","severity":1,"message":"168","line":328,"column":52,"nodeType":"169","messageId":"170","endLine":328,"endColumn":54},{"ruleId":"162","severity":1,"message":"163","line":329,"column":41,"nodeType":"164","messageId":"165","endLine":329,"endColumn":43},{"ruleId":"162","severity":1,"message":"163","line":376,"column":19,"nodeType":"164","messageId":"165","endLine":376,"endColumn":21},{"ruleId":"162","severity":1,"message":"163","line":403,"column":17,"nodeType":"164","messageId":"165","endLine":403,"endColumn":19},{"ruleId":"162","severity":1,"message":"163","line":437,"column":27,"nodeType":"164","messageId":"165","endLine":437,"endColumn":29},{"ruleId":"162","severity":1,"message":"163","line":454,"column":27,"nodeType":"164","messageId":"165","endLine":454,"endColumn":29},{"ruleId":"162","severity":1,"message":"163","line":456,"column":32,"nodeType":"164","messageId":"165","endLine":456,"endColumn":34},{"ruleId":"162","severity":1,"message":"163","line":458,"column":37,"nodeType":"164","messageId":"165","endLine":458,"endColumn":39},{"ruleId":"162","severity":1,"message":"163","line":496,"column":25,"nodeType":"164","messageId":"165","endLine":496,"endColumn":27},{"ruleId":"162","severity":1,"message":"163","line":514,"column":27,"nodeType":"164","messageId":"165","endLine":514,"endColumn":29},{"ruleId":"162","severity":1,"message":"163","line":516,"column":32,"nodeType":"164","messageId":"165","endLine":516,"endColumn":34},{"ruleId":"162","severity":1,"message":"163","line":518,"column":37,"nodeType":"164","messageId":"165","endLine":518,"endColumn":39},{"ruleId":"162","severity":1,"message":"163","line":547,"column":23,"nodeType":"164","messageId":"165","endLine":547,"endColumn":25},{"ruleId":"162","severity":1,"message":"163","line":557,"column":25,"nodeType":"164","messageId":"165","endLine":557,"endColumn":27},{"ruleId":"162","severity":1,"message":"163","line":559,"column":30,"nodeType":"164","messageId":"165","endLine":559,"endColumn":32},{"ruleId":"162","severity":1,"message":"163","line":561,"column":35,"nodeType":"164","messageId":"165","endLine":561,"endColumn":37},{"ruleId":"171","severity":1,"message":"172","line":595,"column":6,"nodeType":"173","endLine":595,"endColumn":8,"suggestions":"174"},{"ruleId":"162","severity":1,"message":"163","line":894,"column":19,"nodeType":"164","messageId":"165","endLine":894,"endColumn":21},{"ruleId":"162","severity":1,"message":"163","line":896,"column":26,"nodeType":"164","messageId":"165","endLine":896,"endColumn":28},{"ruleId":"162","severity":1,"message":"163","line":960,"column":19,"nodeType":"164","messageId":"165","endLine":960,"endColumn":21},{"ruleId":"162","severity":1,"message":"163","line":962,"column":26,"nodeType":"164","messageId":"165","endLine":962,"endColumn":28},{"ruleId":"162","severity":1,"message":"163","line":967,"column":19,"nodeType":"164","messageId":"165","endLine":967,"endColumn":21},{"ruleId":"162","severity":1,"message":"163","line":969,"column":26,"nodeType":"164","messageId":"165","endLine":969,"endColumn":28},{"ruleId":"162","severity":1,"message":"163","line":978,"column":50,"nodeType":"164","messageId":"165","endLine":978,"endColumn":52},{"ruleId":"162","severity":1,"message":"163","line":982,"column":44,"nodeType":"164","messageId":"165","endLine":982,"endColumn":46},{"ruleId":"162","severity":1,"message":"163","line":986,"column":47,"nodeType":"164","messageId":"165","endLine":986,"endColumn":49},{"ruleId":"157","severity":1,"message":"175","line":1,"column":39,"nodeType":"159","messageId":"160","endLine":1,"endColumn":45},{"ruleId":"157","severity":1,"message":"176","line":1,"column":47,"nodeType":"159","messageId":"160","endLine":1,"endColumn":56},{"ruleId":"162","severity":1,"message":"163","line":29,"column":59,"nodeType":"164","messageId":"165","endLine":29,"endColumn":61},{"ruleId":"162","severity":1,"message":"163","line":37,"column":19,"nodeType":"164","messageId":"165","endLine":37,"endColumn":21},{"ruleId":"162","severity":1,"message":"163","line":61,"column":21,"nodeType":"164","messageId":"165","endLine":61,"endColumn":23},{"ruleId":"162","severity":1,"message":"163","line":78,"column":21,"nodeType":"164","messageId":"165","endLine":78,"endColumn":23},{"ruleId":"162","severity":1,"message":"163","line":182,"column":19,"nodeType":"164","messageId":"165","endLine":182,"endColumn":21},{"ruleId":"162","severity":1,"message":"163","line":207,"column":19,"nodeType":"164","messageId":"165","endLine":207,"endColumn":21},{"ruleId":"162","severity":1,"message":"163","line":230,"column":19,"nodeType":"164","messageId":"165","endLine":230,"endColumn":21},{"ruleId":"177","replacedBy":"178"},{"ruleId":"179","replacedBy":"180"},{"ruleId":"157","severity":1,"message":"181","line":5,"column":10,"nodeType":"159","messageId":"160","endLine":5,"endColumn":23},{"ruleId":"162","severity":1,"message":"163","line":18,"column":21,"nodeType":"164","messageId":"165","endLine":18,"endColumn":23},{"ruleId":"162","severity":1,"message":"163","line":35,"column":23,"nodeType":"164","messageId":"165","endLine":35,"endColumn":25},{"ruleId":"167","severity":1,"message":"168","line":36,"column":46,"nodeType":"169","messageId":"170","endLine":36,"endColumn":48},{"ruleId":"162","severity":1,"message":"163","line":37,"column":25,"nodeType":"164","messageId":"165","endLine":37,"endColumn":27},{"ruleId":"162","severity":1,"message":"163","line":59,"column":21,"nodeType":"164","messageId":"165","endLine":59,"endColumn":23},{"ruleId":"182","severity":1,"message":"183","line":82,"column":11,"nodeType":"184","endLine":82,"endColumn":58},{"ruleId":"177","replacedBy":"185"},{"ruleId":"179","replacedBy":"186"},{"ruleId":"157","severity":1,"message":"176","line":1,"column":27,"nodeType":"159","messageId":"160","endLine":1,"endColumn":36},{"ruleId":"157","severity":1,"message":"181","line":5,"column":10,"nodeType":"159","messageId":"160","endLine":5,"endColumn":23},{"ruleId":"157","severity":1,"message":"187","line":7,"column":16,"nodeType":"159","messageId":"160","endLine":7,"endColumn":22},{"ruleId":"157","severity":1,"message":"188","line":25,"column":9,"nodeType":"159","messageId":"160","endLine":25,"endColumn":19},{"ruleId":"157","severity":1,"message":"189","line":26,"column":9,"nodeType":"159","messageId":"160","endLine":26,"endColumn":21},{"ruleId":"162","severity":1,"message":"163","line":31,"column":21,"nodeType":"164","messageId":"165","endLine":31,"endColumn":23},{"ruleId":"162","severity":1,"message":"163","line":40,"column":25,"nodeType":"164","messageId":"165","endLine":40,"endColumn":27},{"ruleId":"162","severity":1,"message":"166","line":50,"column":25,"nodeType":"164","messageId":"165","endLine":50,"endColumn":27},{"ruleId":"162","severity":1,"message":"163","line":65,"column":23,"nodeType":"164","messageId":"165","endLine":65,"endColumn":25},{"ruleId":"167","severity":1,"message":"168","line":66,"column":49,"nodeType":"169","messageId":"170","endLine":66,"endColumn":51},{"ruleId":"162","severity":1,"message":"163","line":67,"column":25,"nodeType":"164","messageId":"165","endLine":67,"endColumn":27},{"ruleId":"162","severity":1,"message":"163","line":71,"column":27,"nodeType":"164","messageId":"165","endLine":71,"endColumn":29},{"ruleId":"162","severity":1,"message":"163","line":91,"column":21,"nodeType":"164","messageId":"165","endLine":91,"endColumn":23},{"ruleId":"162","severity":1,"message":"163","line":93,"column":23,"nodeType":"164","messageId":"165","endLine":93,"endColumn":25},{"ruleId":"162","severity":1,"message":"163","line":95,"column":27,"nodeType":"164","messageId":"165","endLine":95,"endColumn":29},{"ruleId":"162","severity":1,"message":"163","line":98,"column":27,"nodeType":"164","messageId":"165","endLine":98,"endColumn":29},{"ruleId":"162","severity":1,"message":"163","line":114,"column":48,"nodeType":"164","messageId":"165","endLine":114,"endColumn":50},{"ruleId":"162","severity":1,"message":"163","line":127,"column":28,"nodeType":"164","messageId":"165","endLine":127,"endColumn":30},{"ruleId":"162","severity":1,"message":"163","line":143,"column":23,"nodeType":"164","messageId":"165","endLine":143,"endColumn":25},{"ruleId":"162","severity":1,"message":"163","line":145,"column":25,"nodeType":"164","messageId":"165","endLine":145,"endColumn":27},{"ruleId":"162","severity":1,"message":"163","line":147,"column":27,"nodeType":"164","messageId":"165","endLine":147,"endColumn":29},{"ruleId":"162","severity":1,"message":"163","line":177,"column":21,"nodeType":"164","messageId":"165","endLine":177,"endColumn":23},{"ruleId":"167","severity":1,"message":"168","line":178,"column":44,"nodeType":"169","messageId":"170","endLine":178,"endColumn":46},{"ruleId":"162","severity":1,"message":"163","line":179,"column":23,"nodeType":"164","messageId":"165","endLine":179,"endColumn":25},{"ruleId":"167","severity":1,"message":"168","line":180,"column":43,"nodeType":"169","messageId":"170","endLine":180,"endColumn":45},{"ruleId":"162","severity":1,"message":"163","line":181,"column":25,"nodeType":"164","messageId":"165","endLine":181,"endColumn":27},{"ruleId":"162","severity":1,"message":"163","line":206,"column":21,"nodeType":"164","messageId":"165","endLine":206,"endColumn":23},{"ruleId":"167","severity":1,"message":"168","line":207,"column":44,"nodeType":"169","messageId":"170","endLine":207,"endColumn":46},{"ruleId":"162","severity":1,"message":"163","line":208,"column":23,"nodeType":"164","messageId":"165","endLine":208,"endColumn":25},{"ruleId":"167","severity":1,"message":"168","line":209,"column":43,"nodeType":"169","messageId":"170","endLine":209,"endColumn":45},{"ruleId":"162","severity":1,"message":"163","line":210,"column":25,"nodeType":"164","messageId":"165","endLine":210,"endColumn":27},{"ruleId":"162","severity":1,"message":"163","line":230,"column":21,"nodeType":"164","messageId":"165","endLine":230,"endColumn":23},{"ruleId":"167","severity":1,"message":"190","line":253,"column":70,"nodeType":"169","messageId":"191","endLine":253,"endColumn":72},{"ruleId":"182","severity":1,"message":"183","line":261,"column":23,"nodeType":"184","endLine":261,"endColumn":74},{"ruleId":"157","severity":1,"message":"187","line":11,"column":16,"nodeType":"159","messageId":"160","endLine":11,"endColumn":22},{"ruleId":"162","severity":1,"message":"163","line":23,"column":21,"nodeType":"164","messageId":"165","endLine":23,"endColumn":23},{"ruleId":"162","severity":1,"message":"163","line":34,"column":21,"nodeType":"164","messageId":"165","endLine":34,"endColumn":23},{"ruleId":"167","severity":1,"message":"168","line":35,"column":44,"nodeType":"169","messageId":"170","endLine":35,"endColumn":46},{"ruleId":"162","severity":1,"message":"163","line":36,"column":23,"nodeType":"164","messageId":"165","endLine":36,"endColumn":25},{"ruleId":"162","severity":1,"message":"163","line":56,"column":23,"nodeType":"164","messageId":"165","endLine":56,"endColumn":25},{"ruleId":"162","severity":1,"message":"163","line":78,"column":21,"nodeType":"164","messageId":"165","endLine":78,"endColumn":23},{"ruleId":"167","severity":1,"message":"168","line":79,"column":39,"nodeType":"169","messageId":"170","endLine":79,"endColumn":41},{"ruleId":"162","severity":1,"message":"163","line":80,"column":28,"nodeType":"164","messageId":"165","endLine":80,"endColumn":30},{"ruleId":"171","severity":1,"message":"192","line":97,"column":6,"nodeType":"173","endLine":97,"endColumn":8,"suggestions":"193"},{"ruleId":"157","severity":1,"message":"194","line":2,"column":10,"nodeType":"159","messageId":"160","endLine":2,"endColumn":15},{"ruleId":"157","severity":1,"message":"195","line":18,"column":10,"nodeType":"159","messageId":"160","endLine":18,"endColumn":19},{"ruleId":"162","severity":1,"message":"166","line":24,"column":77,"nodeType":"164","messageId":"165","endLine":24,"endColumn":79},{"ruleId":"171","severity":1,"message":"196","line":44,"column":6,"nodeType":"173","endLine":44,"endColumn":28,"suggestions":"197"},"@typescript-eslint/no-unused-vars","'Image' is defined but never used.","Identifier","unusedVar","'setState' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'props.match.params.id' and 'setBuilderState'. Either include them or remove the dependency array.","ArrayExpression",["198"],"'useRef' is defined but never used.","'useEffect' is defined but never used.","no-native-reassign",["199"],"no-negated-in-lhs",["200"],"'AddTextButton' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement",["199"],["200"],"'uuidv4' is defined but never used.","'headingRef' is assigned a value but never used.","'paragraphRef' is assigned a value but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","React Hook useEffect has a missing dependency: 'register'. Either include it or remove the dependency array.",["201"],"'toast' is defined but never used.","'isLoading' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'bot' and 'getFlowsData'. Either include them or remove the dependency array.",["202"],{"desc":"203","fix":"204"},"no-global-assign","no-unsafe-negation",{"desc":"205","fix":"206"},{"desc":"207","fix":"208"},"Update the dependencies array to be: [props.match.params.id, setBuilderState]",{"range":"209","text":"210"},"Update the dependencies array to be: [register]",{"range":"211","text":"212"},"Update the dependencies array to be: [pageNumber, lastPage, getFlowsData, bot]",{"range":"213","text":"214"},[18148,18150],"[props.match.params.id, setBuilderState]",[3003,3005],"[register]",[1398,1420],"[pageNumber, lastPage, getFlowsData, bot]"]